{"ast":null,"code":"/*! DataTables 1.13.7\n * Â©2008-2023 SpryMedia Ltd - datatables.net/license\n */\nimport jQuery from 'jquery'; // DataTables code uses $ internally, but we want to be able to\n// reassign $ with the `use` method, so it is a regular var.\n\nvar $ = jQuery;\n\nvar DataTable = function (selector, options) {\n  // Check if called with a window or jQuery object for DOM less applications\n  // This is for backwards compatibility\n  if (DataTable.factory(selector, options)) {\n    return DataTable;\n  } // When creating with `new`, create a new DataTable, returning the API instance\n\n\n  if (this instanceof DataTable) {\n    return $(selector).DataTable(options);\n  } else {\n    // Argument switching\n    options = selector;\n  }\n  /**\n   * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n   * return the resulting jQuery object.\n   *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n   *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n   *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n   *    criterion (\"applied\") or all TR elements (i.e. no filter).\n   *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n   *    Can be either 'current', whereby the current sorting of the table is used, or\n   *    'original' whereby the original order the data was read into the table is used.\n   *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n   *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n   *    'current' and filter is 'applied', regardless of what they might be given as.\n   *  @returns {object} jQuery object, filtered by the given selector.\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Highlight every second row\n   *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n   *    } );\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Filter to rows with 'Webkit' in them, add a background colour and then\n   *      // remove the filter, thus highlighting the 'Webkit' rows only.\n   *      oTable.fnFilter('Webkit');\n   *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n   *      oTable.fnFilter('');\n   *    } );\n   */\n\n\n  this.$ = function (sSelector, oOpts) {\n    return this.api(true).$(sSelector, oOpts);\n  };\n  /**\n   * Almost identical to $ in operation, but in this case returns the data for the matched\n   * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n   * rather than any descendants, so the data can be obtained for the row/cell. If matching\n   * rows are found, the data returned is the original data array/object that was used to\n   * create the row (or a generated array if from a DOM source).\n   *\n   * This method is often useful in-combination with $ where both functions are given the\n   * same parameters and the array indexes will match identically.\n   *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n   *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n   *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n   *    criterion (\"applied\") or all elements (i.e. no filter).\n   *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n   *    Can be either 'current', whereby the current sorting of the table is used, or\n   *    'original' whereby the original order the data was read into the table is used.\n   *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n   *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n   *    'current' and filter is 'applied', regardless of what they might be given as.\n   *  @returns {array} Data for the matched elements. If any elements, as a result of the\n   *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n   *    entry in the array.\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Get the data from the first row in the table\n   *      var data = oTable._('tr:first');\n   *\n   *      // Do something useful with the data\n   *      alert( \"First cell is: \"+data[0] );\n   *    } );\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Filter to 'Webkit' and get all data for\n   *      oTable.fnFilter('Webkit');\n   *      var data = oTable._('tr', {\"search\": \"applied\"});\n   *\n   *      // Do something with the data\n   *      alert( data.length+\" rows matched the search\" );\n   *    } );\n   */\n\n\n  this._ = function (sSelector, oOpts) {\n    return this.api(true).rows(sSelector, oOpts).data();\n  };\n  /**\n   * Create a DataTables Api instance, with the currently selected tables for\n   * the Api's context.\n   * @param {boolean} [traditional=false] Set the API instance's context to be\n   *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n   *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n   *   or if all tables captured in the jQuery object should be used.\n   * @return {DataTables.Api}\n   */\n\n\n  this.api = function (traditional) {\n    return traditional ? new _Api(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api(this);\n  };\n  /**\n   * Add a single new row or multiple rows of data to the table. Please note\n   * that this is suitable for client-side processing only - if you are using\n   * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n   * must add it to the data source, i.e. the server-side, through an Ajax call.\n   *  @param {array|object} data The data to be added to the table. This can be:\n   *    <ul>\n   *      <li>1D array of data - add a single row with the data provided</li>\n   *      <li>2D array of arrays - add multiple rows in a single call</li>\n   *      <li>object - data object when using <i>mData</i></li>\n   *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n   *    </ul>\n   *  @param {bool} [redraw=true] redraw the table or not\n   *  @returns {array} An array of integers, representing the list of indexes in\n   *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n   *    the table.\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    // Global var for counter\n   *    var giCount = 2;\n   *\n   *    $(document).ready(function() {\n   *      $('#example').dataTable();\n   *    } );\n   *\n   *    function fnClickAddRow() {\n   *      $('#example').dataTable().fnAddData( [\n   *        giCount+\".1\",\n   *        giCount+\".2\",\n   *        giCount+\".3\",\n   *        giCount+\".4\" ]\n   *      );\n   *\n   *      giCount++;\n   *    }\n   */\n\n\n  this.fnAddData = function (data, redraw) {\n    var api = this.api(true);\n    /* Check if we want to add multiple rows or not */\n\n    var rows = Array.isArray(data) && (Array.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);\n\n    if (redraw === undefined || redraw) {\n      api.draw();\n    }\n\n    return rows.flatten().toArray();\n  };\n  /**\n   * This function will make DataTables recalculate the column sizes, based on the data\n   * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n   * through the sWidth parameter). This can be useful when the width of the table's\n   * parent element changes (for example a window resize).\n   *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable( {\n   *        \"sScrollY\": \"200px\",\n   *        \"bPaginate\": false\n   *      } );\n   *\n   *      $(window).on('resize', function () {\n   *        oTable.fnAdjustColumnSizing();\n   *      } );\n   *    } );\n   */\n\n\n  this.fnAdjustColumnSizing = function (bRedraw) {\n    var api = this.api(true).columns.adjust();\n    var settings = api.settings()[0];\n    var scroll = settings.oScroll;\n\n    if (bRedraw === undefined || bRedraw) {\n      api.draw(false);\n    } else if (scroll.sX !== \"\" || scroll.sY !== \"\") {\n      /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n      _fnScrollDraw(settings);\n    }\n  };\n  /**\n   * Quickly and simply clear a table\n   *  @param {bool} [bRedraw=true] redraw the table or not\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n   *      oTable.fnClearTable();\n   *    } );\n   */\n\n\n  this.fnClearTable = function (bRedraw) {\n    var api = this.api(true).clear();\n\n    if (bRedraw === undefined || bRedraw) {\n      api.draw();\n    }\n  };\n  /**\n   * The exact opposite of 'opening' a row, this function will close any rows which\n   * are currently 'open'.\n   *  @param {node} nTr the table row to 'close'\n   *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable;\n   *\n   *      // 'open' an information row when a row is clicked on\n   *      $('#example tbody tr').click( function () {\n   *        if ( oTable.fnIsOpen(this) ) {\n   *          oTable.fnClose( this );\n   *        } else {\n   *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n   *        }\n   *      } );\n   *\n   *      oTable = $('#example').dataTable();\n   *    } );\n   */\n\n\n  this.fnClose = function (nTr) {\n    this.api(true).row(nTr).child.hide();\n  };\n  /**\n   * Remove a row for the table\n   *  @param {mixed} target The index of the row from aoData to be deleted, or\n   *    the TR element you want to delete\n   *  @param {function|null} [callBack] Callback function\n   *  @param {bool} [redraw=true] Redraw the table or not\n   *  @returns {array} The row that was deleted\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Immediately remove the first row\n   *      oTable.fnDeleteRow( 0 );\n   *    } );\n   */\n\n\n  this.fnDeleteRow = function (target, callback, redraw) {\n    var api = this.api(true);\n    var rows = api.rows(target);\n    var settings = rows.settings()[0];\n    var data = settings.aoData[rows[0][0]];\n    rows.remove();\n\n    if (callback) {\n      callback.call(this, settings, data);\n    }\n\n    if (redraw === undefined || redraw) {\n      api.draw();\n    }\n\n    return data;\n  };\n  /**\n   * Restore the table to it's original state in the DOM by removing all of DataTables\n   * enhancements, alterations to the DOM structure of the table and event listeners.\n   *  @param {boolean} [remove=false] Completely remove the table from the DOM\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n   *      var oTable = $('#example').dataTable();\n   *      oTable.fnDestroy();\n   *    } );\n   */\n\n\n  this.fnDestroy = function (remove) {\n    this.api(true).destroy(remove);\n  };\n  /**\n   * Redraw the table\n   *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n   *      oTable.fnDraw();\n   *    } );\n   */\n\n\n  this.fnDraw = function (complete) {\n    // Note that this isn't an exact match to the old call to _fnDraw - it takes\n    // into account the new data, but can hold position.\n    this.api(true).draw(complete);\n  };\n  /**\n   * Filter the input based on data\n   *  @param {string} sInput String to filter the table on\n   *  @param {int|null} [iColumn] Column to limit filtering to\n   *  @param {bool} [bRegex=false] Treat as regular expression or not\n   *  @param {bool} [bSmart=true] Perform smart filtering or not\n   *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n   *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Sometime later - filter...\n   *      oTable.fnFilter( 'test string' );\n   *    } );\n   */\n\n\n  this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {\n    var api = this.api(true);\n\n    if (iColumn === null || iColumn === undefined) {\n      api.search(sInput, bRegex, bSmart, bCaseInsensitive);\n    } else {\n      api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);\n    }\n\n    api.draw();\n  };\n  /**\n   * Get the data for the whole table, an individual row or an individual cell based on the\n   * provided parameters.\n   *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n   *    a TR node then the data source for the whole row will be returned. If given as a\n   *    TD/TH cell node then iCol will be automatically calculated and the data for the\n   *    cell returned. If given as an integer, then this is treated as the aoData internal\n   *    data index for the row (see fnGetPosition) and the data for that row used.\n   *  @param {int} [col] Optional column index that you want the data of.\n   *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n   *    returned. If mRow is defined, just data for that row, and is iCol is\n   *    defined, only data for the designated cell is returned.\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    // Row data\n   *    $(document).ready(function() {\n   *      oTable = $('#example').dataTable();\n   *\n   *      oTable.$('tr').click( function () {\n   *        var data = oTable.fnGetData( this );\n   *        // ... do something with the array / object of data for the row\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Individual cell data\n   *    $(document).ready(function() {\n   *      oTable = $('#example').dataTable();\n   *\n   *      oTable.$('td').click( function () {\n   *        var sData = oTable.fnGetData( this );\n   *        alert( 'The cell clicked on had the value of '+sData );\n   *      } );\n   *    } );\n   */\n\n\n  this.fnGetData = function (src, col) {\n    var api = this.api(true);\n\n    if (src !== undefined) {\n      var type = src.nodeName ? src.nodeName.toLowerCase() : '';\n      return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;\n    }\n\n    return api.data().toArray();\n  };\n  /**\n   * Get an array of the TR nodes that are used in the table's body. Note that you will\n   * typically want to use the '$' API method in preference to this as it is more\n   * flexible.\n   *  @param {int} [iRow] Optional row index for the TR element you want\n   *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n   *    in the table's body, or iRow is defined, just the TR element requested.\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Get the nodes from the table\n   *      var nNodes = oTable.fnGetNodes( );\n   *    } );\n   */\n\n\n  this.fnGetNodes = function (iRow) {\n    var api = this.api(true);\n    return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();\n  };\n  /**\n   * Get the array indexes of a particular cell from it's DOM element\n   * and column index including hidden columns\n   *  @param {node} node this can either be a TR, TD or TH in the table's body\n   *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n   *    if given as a cell, an array of [row index, column index (visible),\n   *    column index (all)] is given.\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      $('#example tbody td').click( function () {\n   *        // Get the position of the current data from the node\n   *        var aPos = oTable.fnGetPosition( this );\n   *\n   *        // Get the data array for this row\n   *        var aData = oTable.fnGetData( aPos[0] );\n   *\n   *        // Update the data array and return the value\n   *        aData[ aPos[1] ] = 'clicked';\n   *        this.innerHTML = 'clicked';\n   *      } );\n   *\n   *      // Init DataTables\n   *      oTable = $('#example').dataTable();\n   *    } );\n   */\n\n\n  this.fnGetPosition = function (node) {\n    var api = this.api(true);\n    var nodeName = node.nodeName.toUpperCase();\n\n    if (nodeName == 'TR') {\n      return api.row(node).index();\n    } else if (nodeName == 'TD' || nodeName == 'TH') {\n      var cell = api.cell(node).index();\n      return [cell.row, cell.columnVisible, cell.column];\n    }\n\n    return null;\n  };\n  /**\n   * Check to see if a row is 'open' or not.\n   *  @param {node} nTr the table row to check\n   *  @returns {boolean} true if the row is currently open, false otherwise\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable;\n   *\n   *      // 'open' an information row when a row is clicked on\n   *      $('#example tbody tr').click( function () {\n   *        if ( oTable.fnIsOpen(this) ) {\n   *          oTable.fnClose( this );\n   *        } else {\n   *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n   *        }\n   *      } );\n   *\n   *      oTable = $('#example').dataTable();\n   *    } );\n   */\n\n\n  this.fnIsOpen = function (nTr) {\n    return this.api(true).row(nTr).child.isShown();\n  };\n  /**\n   * This function will place a new row directly after a row which is currently\n   * on display on the page, with the HTML contents that is passed into the\n   * function. This can be used, for example, to ask for confirmation that a\n   * particular record should be deleted.\n   *  @param {node} nTr The table row to 'open'\n   *  @param {string|node|jQuery} mHtml The HTML to put into the row\n   *  @param {string} sClass Class to give the new TD cell\n   *  @returns {node} The row opened. Note that if the table row passed in as the\n   *    first parameter, is not found in the table, this method will silently\n   *    return.\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable;\n   *\n   *      // 'open' an information row when a row is clicked on\n   *      $('#example tbody tr').click( function () {\n   *        if ( oTable.fnIsOpen(this) ) {\n   *          oTable.fnClose( this );\n   *        } else {\n   *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n   *        }\n   *      } );\n   *\n   *      oTable = $('#example').dataTable();\n   *    } );\n   */\n\n\n  this.fnOpen = function (nTr, mHtml, sClass) {\n    return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];\n  };\n  /**\n   * Change the pagination - provides the internal logic for pagination in a simple API\n   * function. With this function you can have a DataTables table go to the next,\n   * previous, first or last pages.\n   *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n   *    or page number to jump to (integer), note that page 0 is the first page.\n   *  @param {bool} [bRedraw=true] Redraw the table or not\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *      oTable.fnPageChange( 'next' );\n   *    } );\n   */\n\n\n  this.fnPageChange = function (mAction, bRedraw) {\n    var api = this.api(true).page(mAction);\n\n    if (bRedraw === undefined || bRedraw) {\n      api.draw(false);\n    }\n  };\n  /**\n   * Show a particular column\n   *  @param {int} iCol The column whose display should be changed\n   *  @param {bool} bShow Show (true) or hide (false) the column\n   *  @param {bool} [bRedraw=true] Redraw the table or not\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Hide the second column after initialisation\n   *      oTable.fnSetColumnVis( 1, false );\n   *    } );\n   */\n\n\n  this.fnSetColumnVis = function (iCol, bShow, bRedraw) {\n    var api = this.api(true).column(iCol).visible(bShow);\n\n    if (bRedraw === undefined || bRedraw) {\n      api.columns.adjust().draw();\n    }\n  };\n  /**\n   * Get the settings for a particular table for external manipulation\n   *  @returns {object} DataTables settings object. See\n   *    {@link DataTable.models.oSettings}\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *      var oSettings = oTable.fnSettings();\n   *\n   *      // Show an example parameter from the settings\n   *      alert( oSettings._iDisplayStart );\n   *    } );\n   */\n\n\n  this.fnSettings = function () {\n    return _fnSettingsFromNode(this[_ext.iApiIndex]);\n  };\n  /**\n   * Sort the table by a particular column\n   *  @param {int} iCol the data index to sort on. Note that this will not match the\n   *    'display index' if you have hidden data entries\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Sort immediately with columns 0 and 1\n   *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n   *    } );\n   */\n\n\n  this.fnSort = function (aaSort) {\n    this.api(true).order(aaSort).draw();\n  };\n  /**\n   * Attach a sort listener to an element for a given column\n   *  @param {node} nNode the element to attach the sort listener to\n   *  @param {int} iColumn the column that a click on this node will sort on\n   *  @param {function} [fnCallback] callback function when sort is run\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *\n   *      // Sort on column 1, when 'sorter' is clicked on\n   *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n   *    } );\n   */\n\n\n  this.fnSortListener = function (nNode, iColumn, fnCallback) {\n    this.api(true).order.listener(nNode, iColumn, fnCallback);\n  };\n  /**\n   * Update a table cell or row - this method will accept either a single value to\n   * update the cell with, an array of values with one element for each column or\n   * an object in the same format as the original data source. The function is\n   * self-referencing in order to make the multi column updates easier.\n   *  @param {object|array|string} mData Data to update the cell/row with\n   *  @param {node|int} mRow TR element you want to update or the aoData index\n   *  @param {int} [iColumn] The column to update, give as null or undefined to\n   *    update a whole row.\n   *  @param {bool} [bRedraw=true] Redraw the table or not\n   *  @param {bool} [bAction=true] Perform pre-draw actions or not\n   *  @returns {int} 0 on success, 1 on error\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n   *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n   *    } );\n   */\n\n\n  this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {\n    var api = this.api(true);\n\n    if (iColumn === undefined || iColumn === null) {\n      api.row(mRow).data(mData);\n    } else {\n      api.cell(mRow, iColumn).data(mData);\n    }\n\n    if (bAction === undefined || bAction) {\n      api.columns.adjust();\n    }\n\n    if (bRedraw === undefined || bRedraw) {\n      api.draw();\n    }\n\n    return 0;\n  };\n  /**\n   * Provide a common method for plug-ins to check the version of DataTables being used, in order\n   * to ensure compatibility.\n   *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n   *    formats \"X\" and \"X.Y\" are also acceptable.\n   *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n   *    version, or false if this version of DataTales is not suitable\n   *  @method\n   *  @dtopt API\n   *  @deprecated Since v1.10\n   *\n   *  @example\n   *    $(document).ready(function() {\n   *      var oTable = $('#example').dataTable();\n   *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n   *    } );\n   */\n\n\n  this.fnVersionCheck = _ext.fnVersionCheck;\n\n  var _that = this;\n\n  var emptyInit = options === undefined;\n  var len = this.length;\n\n  if (emptyInit) {\n    options = {};\n  }\n\n  this.oApi = this.internal = _ext.internal; // Extend with old style plug-in API methods\n\n  for (var fn in DataTable.ext.internal) {\n    if (fn) {\n      this[fn] = _fnExternApiFunc(fn);\n    }\n  }\n\n  this.each(function () {\n    // For each initialisation we want to give it a clean initialisation\n    // object that can be bashed around\n    var o = {};\n    var oInit = len > 1 ? // optimisation for single table case\n    _fnExtend(o, options, true) : options;\n    /*global oInit,_that,emptyInit*/\n\n    var i = 0,\n        iLen,\n        j,\n        jLen,\n        k,\n        kLen;\n    var sId = this.getAttribute('id');\n    var bInitHandedOff = false;\n    var defaults = DataTable.defaults;\n    var $this = $(this);\n    /* Sanity check */\n\n    if (this.nodeName.toLowerCase() != 'table') {\n      _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);\n\n      return;\n    }\n    /* Backwards compatibility for the defaults */\n\n\n    _fnCompatOpts(defaults);\n\n    _fnCompatCols(defaults.column);\n    /* Convert the camel-case defaults to Hungarian */\n\n\n    _fnCamelToHungarian(defaults, defaults, true);\n\n    _fnCamelToHungarian(defaults.column, defaults.column, true);\n    /* Setting up the initialisation object */\n\n\n    _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()), true);\n    /* Check to see if we are re-initialising a table */\n\n\n    var allSettings = DataTable.settings;\n\n    for (i = 0, iLen = allSettings.length; i < iLen; i++) {\n      var s = allSettings[i];\n      /* Base check on table node */\n\n      if (s.nTable == this || s.nTHead && s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {\n        var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n        var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\n        if (emptyInit || bRetrieve) {\n          return s.oInstance;\n        } else if (bDestroy) {\n          s.oInstance.fnDestroy();\n          break;\n        } else {\n          _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);\n\n          return;\n        }\n      }\n      /* If the element we are initialising has the same ID as a table which was previously\n       * initialised, but the table nodes don't match (from before) then we destroy the old\n       * instance by simply deleting it. This is under the assumption that the table has been\n       * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n       */\n\n\n      if (s.sTableId == this.id) {\n        allSettings.splice(i, 1);\n        break;\n      }\n    }\n    /* Ensure the table has an ID - required for accessibility */\n\n\n    if (sId === null || sId === \"\") {\n      sId = \"DataTables_Table_\" + DataTable.ext._unique++;\n      this.id = sId;\n    }\n    /* Create the settings object for this table and set some of the default parameters */\n\n\n    var oSettings = $.extend(true, {}, DataTable.models.oSettings, {\n      \"sDestroyWidth\": $this[0].style.width,\n      \"sInstance\": sId,\n      \"sTableId\": sId\n    });\n    oSettings.nTable = this;\n    oSettings.oApi = _that.internal;\n    oSettings.oInit = oInit;\n    allSettings.push(oSettings); // Need to add the instance after the instance after the settings object has been added\n    // to the settings array, so we can self reference the table instance if more than one\n\n    oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable(); // Backwards compatibility, before we apply all the defaults\n\n    _fnCompatOpts(oInit);\n\n    _fnLanguageCompat(oInit.oLanguage); // If the length menu is given, but the init display length is not, use the length menu\n\n\n    if (oInit.aLengthMenu && !oInit.iDisplayLength) {\n      oInit.iDisplayLength = Array.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n    } // Apply the defaults and init options to make a single init object will all\n    // options defined from defaults and instance options.\n\n\n    oInit = _fnExtend($.extend(true, {}, defaults), oInit); // Map the initialisation options onto the settings object\n\n    _fnMap(oSettings.oFeatures, oInit, [\"bPaginate\", \"bLengthChange\", \"bFilter\", \"bSort\", \"bSortMulti\", \"bInfo\", \"bProcessing\", \"bAutoWidth\", \"bSortClasses\", \"bServerSide\", \"bDeferRender\"]);\n\n    _fnMap(oSettings, oInit, [\"asStripeClasses\", \"ajax\", \"fnServerData\", \"fnFormatNumber\", \"sServerMethod\", \"aaSorting\", \"aaSortingFixed\", \"aLengthMenu\", \"sPaginationType\", \"sAjaxSource\", \"sAjaxDataProp\", \"iStateDuration\", \"sDom\", \"bSortCellsTop\", \"iTabIndex\", \"fnStateLoadCallback\", \"fnStateSaveCallback\", \"renderer\", \"searchDelay\", \"rowId\", [\"iCookieDuration\", \"iStateDuration\"], // backwards compat\n    [\"oSearch\", \"oPreviousSearch\"], [\"aoSearchCols\", \"aoPreSearchCols\"], [\"iDisplayLength\", \"_iDisplayLength\"]]);\n\n    _fnMap(oSettings.oScroll, oInit, [[\"sScrollX\", \"sX\"], [\"sScrollXInner\", \"sXInner\"], [\"sScrollY\", \"sY\"], [\"bScrollCollapse\", \"bCollapse\"]]);\n\n    _fnMap(oSettings.oLanguage, oInit, \"fnInfoCallback\");\n    /* Callback functions which are array driven */\n\n\n    _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');\n\n    _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');\n\n    _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');\n\n    _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');\n\n    _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');\n\n    _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');\n\n    _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');\n\n    _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');\n\n    _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');\n\n    _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');\n\n    _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');\n\n    oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);\n    /* Browser support detection */\n\n    _fnBrowserDetect(oSettings);\n\n    var oClasses = oSettings.oClasses;\n    $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);\n    $this.addClass(oClasses.sTable);\n\n    if (oSettings.iInitDisplayStart === undefined) {\n      /* Display start point, taking into account the save saving */\n      oSettings.iInitDisplayStart = oInit.iDisplayStart;\n      oSettings._iDisplayStart = oInit.iDisplayStart;\n    }\n\n    if (oInit.iDeferLoading !== null) {\n      oSettings.bDeferLoading = true;\n      var tmp = Array.isArray(oInit.iDeferLoading);\n      oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n      oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n    }\n    /* Language definitions */\n\n\n    var oLanguage = oSettings.oLanguage;\n    $.extend(true, oLanguage, oInit.oLanguage);\n\n    if (oLanguage.sUrl) {\n      /* Get the language definitions from a file - because this Ajax call makes the language\n       * get async to the remainder of this function we use bInitHandedOff to indicate that\n       * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n       */\n      $.ajax({\n        dataType: 'json',\n        url: oLanguage.sUrl,\n        success: function (json) {\n          _fnCamelToHungarian(defaults.oLanguage, json);\n\n          _fnLanguageCompat(json);\n\n          $.extend(true, oLanguage, json, oSettings.oInit.oLanguage);\n\n          _fnCallbackFire(oSettings, null, 'i18n', [oSettings]);\n\n          _fnInitialise(oSettings);\n        },\n        error: function () {\n          // Error occurred loading language file, continue on as best we can\n          _fnInitialise(oSettings);\n        }\n      });\n      bInitHandedOff = true;\n    } else {\n      _fnCallbackFire(oSettings, null, 'i18n', [oSettings]);\n    }\n    /*\n     * Stripes\n     */\n\n\n    if (oInit.asStripeClasses === null) {\n      oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];\n    }\n    /* Remove row stripe classes if they are already on the table row */\n\n\n    var stripeClasses = oSettings.asStripeClasses;\n    var rowOne = $this.children('tbody').find('tr').eq(0);\n\n    if ($.inArray(true, $.map(stripeClasses, function (el, i) {\n      return rowOne.hasClass(el);\n    })) !== -1) {\n      $('tbody tr', this).removeClass(stripeClasses.join(' '));\n      oSettings.asDestroyStripes = stripeClasses.slice();\n    }\n    /*\n     * Columns\n     * See if we should load columns automatically or use defined ones\n     */\n\n\n    var anThs = [];\n    var aoColumnsInit;\n    var nThead = this.getElementsByTagName('thead');\n\n    if (nThead.length !== 0) {\n      _fnDetectHeader(oSettings.aoHeader, nThead[0]);\n\n      anThs = _fnGetUniqueThs(oSettings);\n    }\n    /* If not given a column array, generate one with nulls */\n\n\n    if (oInit.aoColumns === null) {\n      aoColumnsInit = [];\n\n      for (i = 0, iLen = anThs.length; i < iLen; i++) {\n        aoColumnsInit.push(null);\n      }\n    } else {\n      aoColumnsInit = oInit.aoColumns;\n    }\n    /* Add the columns */\n\n\n    for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {\n      _fnAddColumn(oSettings, anThs ? anThs[i] : null);\n    }\n    /* Apply the column definitions */\n\n\n    _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n      _fnColumnOptions(oSettings, iCol, oDef);\n    });\n    /* HTML5 attribute detection - build an mData object automatically if the\n     * attributes are found\n     */\n\n\n    if (rowOne.length) {\n      var a = function (cell, name) {\n        return cell.getAttribute('data-' + name) !== null ? name : null;\n      };\n\n      $(rowOne[0]).children('th, td').each(function (i, cell) {\n        var col = oSettings.aoColumns[i];\n\n        if (!col) {\n          _fnLog(oSettings, 0, 'Incorrect column count', 18);\n        }\n\n        if (col.mData === i) {\n          var sort = a(cell, 'sort') || a(cell, 'order');\n          var filter = a(cell, 'filter') || a(cell, 'search');\n\n          if (sort !== null || filter !== null) {\n            col.mData = {\n              _: i + '.display',\n              sort: sort !== null ? i + '.@data-' + sort : undefined,\n              type: sort !== null ? i + '.@data-' + sort : undefined,\n              filter: filter !== null ? i + '.@data-' + filter : undefined\n            };\n            col._isArrayHost = true;\n\n            _fnColumnOptions(oSettings, i);\n          }\n        }\n      });\n    }\n\n    var features = oSettings.oFeatures;\n\n    var loadedInit = function () {\n      /*\n       * Sorting\n       * @todo For modularisation (1.11) this needs to do into a sort start up handler\n       */\n      // If aaSorting is not defined, then we use the first indicator in asSorting\n      // in case that has been altered, so the default sort reflects that option\n      if (oInit.aaSorting === undefined) {\n        var sorting = oSettings.aaSorting;\n\n        for (i = 0, iLen = sorting.length; i < iLen; i++) {\n          sorting[i][1] = oSettings.aoColumns[i].asSorting[0];\n        }\n      }\n      /* Do a first pass on the sorting classes (allows any size changes to be taken into\n       * account, and also will apply sorting disabled classes if disabled\n       */\n\n\n      _fnSortingClasses(oSettings);\n\n      if (features.bSort) {\n        _fnCallbackReg(oSettings, 'aoDrawCallback', function () {\n          if (oSettings.bSorted) {\n            var aSort = _fnSortFlatten(oSettings);\n\n            var sortedColumns = {};\n            $.each(aSort, function (i, val) {\n              sortedColumns[val.src] = val.dir;\n            });\n\n            _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);\n\n            _fnSortAria(oSettings);\n          }\n        });\n      }\n\n      _fnCallbackReg(oSettings, 'aoDrawCallback', function () {\n        if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {\n          _fnSortingClasses(oSettings);\n        }\n      }, 'sc');\n      /*\n       * Final init\n       * Cache the header, body and footer as required, creating them if needed\n       */\n      // Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\n\n      var captions = $this.children('caption').each(function () {\n        this._captionSide = $(this).css('caption-side');\n      });\n      var thead = $this.children('thead');\n\n      if (thead.length === 0) {\n        thead = $('<thead/>').appendTo($this);\n      }\n\n      oSettings.nTHead = thead[0];\n      var tbody = $this.children('tbody');\n\n      if (tbody.length === 0) {\n        tbody = $('<tbody/>').insertAfter(thead);\n      }\n\n      oSettings.nTBody = tbody[0];\n      var tfoot = $this.children('tfoot');\n\n      if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\")) {\n        // If we are a scrolling table, and no footer has been given, then we need to create\n        // a tfoot element for the caption element to be appended to\n        tfoot = $('<tfoot/>').appendTo($this);\n      }\n\n      if (tfoot.length === 0 || tfoot.children().length === 0) {\n        $this.addClass(oClasses.sNoFooter);\n      } else if (tfoot.length > 0) {\n        oSettings.nTFoot = tfoot[0];\n\n        _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);\n      }\n      /* Check if there is data passing into the constructor */\n\n\n      if (oInit.aaData) {\n        for (i = 0; i < oInit.aaData.length; i++) {\n          _fnAddData(oSettings, oInit.aaData[i]);\n        }\n      } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {\n        /* Grab the data from the page - only do this when deferred loading or no Ajax\n         * source since there is no point in reading the DOM data if we are then going\n         * to replace it with Ajax data\n         */\n        _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));\n      }\n      /* Copy the data index array */\n\n\n      oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n      /* Initialisation complete - table can be drawn */\n\n      oSettings.bInitialised = true;\n      /* Check if we need to initialise the table (it might not have been handed off to the\n       * language processor)\n       */\n\n      if (bInitHandedOff === false) {\n        _fnInitialise(oSettings);\n      }\n    };\n    /* Must be done after everything which can be overridden by the state saving! */\n\n\n    _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');\n\n    if (oInit.bStateSave) {\n      features.bStateSave = true;\n\n      _fnLoadState(oSettings, oInit, loadedInit);\n    } else {\n      loadedInit();\n    }\n  });\n  _that = null;\n  return this;\n};\n/*\n * It is useful to have variables which are scoped locally so only the\n * DataTables functions can access them and they don't leak into global space.\n * At the same time these functions are often useful over multiple files in the\n * core and API, so we list, or at least document, all variables which are used\n * by DataTables as private variables here. This also ensures that there is no\n * clashing of variable names and that they can easily referenced for reuse.\n */\n// Defined else where\n//  _selector_run\n//  _selector_opts\n//  _selector_first\n//  _selector_row_indexes\n\n\nvar _ext; // DataTable.ext\n\n\nvar _Api; // DataTable.Api\n\n\nvar _api_register; // DataTable.Api.register\n\n\nvar _api_registerPlural; // DataTable.Api.registerPlural\n\n\nvar _re_dic = {};\nvar _re_new_lines = /[\\r\\n\\u2028]/g;\nvar _re_html = /<.*?>/g; // This is not strict ISO8601 - Date.parse() is quite lax, although\n// implementations differ between browsers.\n\nvar _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/; // Escape regular expression special characters\n\nvar _re_escape_regex = new RegExp('(\\\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-'].join('|\\\\') + ')', 'g'); // https://en.wikipedia.org/wiki/Foreign_exchange_market\n// - \\u20BD - Russian ruble.\n// - \\u20a9 - South Korean Won\n// - \\u20BA - Turkish Lira\n// - \\u20B9 - Indian Rupee\n// - R - Brazil (R$) and South Africa\n// - fr - Swiss Franc\n// - kr - Swedish krona, Norwegian krone and Danish krone\n// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n// - É - Bitcoin\n// - Î - Ethereum\n//   standards as thousands separators.\n\n\nvar _re_formatted_numeric = /['\\u00A0,$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkÉÎ]/gi;\n\nvar _empty = function (d) {\n  return !d || d === true || d === '-' ? true : false;\n};\n\nvar _intVal = function (s) {\n  var integer = parseInt(s, 10);\n  return !isNaN(integer) && isFinite(s) ? integer : null;\n}; // Convert from a formatted number with characters other than `.` as the\n// decimal place, to a Javascript number\n\n\nvar _numToDecimal = function (num, decimalPoint) {\n  // Cache created regular expressions for speed as this function is called often\n  if (!_re_dic[decimalPoint]) {\n    _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');\n  }\n\n  return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\\./g, '').replace(_re_dic[decimalPoint], '.') : num;\n};\n\nvar _isNumber = function (d, decimalPoint, formatted) {\n  var type = typeof d;\n  var strType = type === 'string';\n\n  if (type === 'number' || type === 'bigint') {\n    return true;\n  } // If empty return immediately so there must be a number if it is a\n  // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n  // as a formatted number for currency\n\n\n  if (_empty(d)) {\n    return true;\n  }\n\n  if (decimalPoint && strType) {\n    d = _numToDecimal(d, decimalPoint);\n  }\n\n  if (formatted && strType) {\n    d = d.replace(_re_formatted_numeric, '');\n  }\n\n  return !isNaN(parseFloat(d)) && isFinite(d);\n}; // A string without HTML in it can be considered to be HTML still\n\n\nvar _isHtml = function (d) {\n  return _empty(d) || typeof d === 'string';\n};\n\nvar _htmlNumeric = function (d, decimalPoint, formatted) {\n  if (_empty(d)) {\n    return true;\n  }\n\n  var html = _isHtml(d);\n\n  return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;\n};\n\nvar _pluck = function (a, prop, prop2) {\n  var out = [];\n  var i = 0,\n      ien = a.length; // Could have the test in the loop for slightly smaller code, but speed\n  // is essential here\n\n  if (prop2 !== undefined) {\n    for (; i < ien; i++) {\n      if (a[i] && a[i][prop]) {\n        out.push(a[i][prop][prop2]);\n      }\n    }\n  } else {\n    for (; i < ien; i++) {\n      if (a[i]) {\n        out.push(a[i][prop]);\n      }\n    }\n  }\n\n  return out;\n}; // Basically the same as _pluck, but rather than looping over `a` we use `order`\n// as the indexes to pick from `a`\n\n\nvar _pluck_order = function (a, order, prop, prop2) {\n  var out = [];\n  var i = 0,\n      ien = order.length; // Could have the test in the loop for slightly smaller code, but speed\n  // is essential here\n\n  if (prop2 !== undefined) {\n    for (; i < ien; i++) {\n      if (a[order[i]][prop]) {\n        out.push(a[order[i]][prop][prop2]);\n      }\n    }\n  } else {\n    for (; i < ien; i++) {\n      out.push(a[order[i]][prop]);\n    }\n  }\n\n  return out;\n};\n\nvar _range = function (len, start) {\n  var out = [];\n  var end;\n\n  if (start === undefined) {\n    start = 0;\n    end = len;\n  } else {\n    end = start;\n    start = len;\n  }\n\n  for (var i = start; i < end; i++) {\n    out.push(i);\n  }\n\n  return out;\n};\n\nvar _removeEmpty = function (a) {\n  var out = [];\n\n  for (var i = 0, ien = a.length; i < ien; i++) {\n    if (a[i]) {\n      // careful - will remove all falsy values!\n      out.push(a[i]);\n    }\n  }\n\n  return out;\n};\n\nvar _stripHtml = function (d) {\n  return d.replace(_re_html, '') // Complete tags\n  .replace(/<script/i, ''); // Safety for incomplete script tag\n};\n/**\n * Determine if all values in the array are unique. This means we can short\n * cut the _unique method at the cost of a single loop. A sorted array is used\n * to easily check the values.\n *\n * @param  {array} src Source array\n * @return {boolean} true if all unique, false otherwise\n * @ignore\n */\n\n\nvar _areAllUnique = function (src) {\n  if (src.length < 2) {\n    return true;\n  }\n\n  var sorted = src.slice().sort();\n  var last = sorted[0];\n\n  for (var i = 1, ien = sorted.length; i < ien; i++) {\n    if (sorted[i] === last) {\n      return false;\n    }\n\n    last = sorted[i];\n  }\n\n  return true;\n};\n/**\n * Find the unique elements in a source array.\n *\n * @param  {array} src Source array\n * @return {array} Array of unique items\n * @ignore\n */\n\n\nvar _unique = function (src) {\n  if (_areAllUnique(src)) {\n    return src.slice();\n  } // A faster unique method is to use object keys to identify used values,\n  // but this doesn't work with arrays or objects, which we must also\n  // consider. See jsperf.com/compare-array-unique-versions/4 for more\n  // information.\n\n\n  var out = [],\n      val,\n      i,\n      ien = src.length,\n      j,\n      k = 0;\n\n  again: for (i = 0; i < ien; i++) {\n    val = src[i];\n\n    for (j = 0; j < k; j++) {\n      if (out[j] === val) {\n        continue again;\n      }\n    }\n\n    out.push(val);\n    k++;\n  }\n\n  return out;\n}; // Surprisingly this is faster than [].concat.apply\n// https://jsperf.com/flatten-an-array-loop-vs-reduce/2\n\n\nvar _flatten = function (out, val) {\n  if (Array.isArray(val)) {\n    for (var i = 0; i < val.length; i++) {\n      _flatten(out, val[i]);\n    }\n  } else {\n    out.push(val);\n  }\n\n  return out;\n};\n\nvar _includes = function (search, start) {\n  if (start === undefined) {\n    start = 0;\n  }\n\n  return this.indexOf(search, start) !== -1;\n}; // Array.isArray polyfill.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n\n\nif (!Array.isArray) {\n  Array.isArray = function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n}\n\nif (!Array.prototype.includes) {\n  Array.prototype.includes = _includes;\n} // .trim() polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n\n\nif (!String.prototype.trim) {\n  String.prototype.trim = function () {\n    return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n  };\n}\n\nif (!String.prototype.includes) {\n  String.prototype.includes = _includes;\n}\n/**\n * DataTables utility methods\n * \n * This namespace provides helper methods that DataTables uses internally to\n * create a DataTable, but which are not exclusively used only for DataTables.\n * These methods can be used by extension authors to save the duplication of\n * code.\n *\n *  @namespace\n */\n\n\nDataTable.util = {\n  /**\n   * Throttle the calls to a function. Arguments and context are maintained\n   * for the throttled function.\n   *\n   * @param {function} fn Function to be called\n   * @param {integer} freq Call frequency in mS\n   * @return {function} Wrapped function\n   */\n  throttle: function (fn, freq) {\n    var frequency = freq !== undefined ? freq : 200,\n        last,\n        timer;\n    return function () {\n      var that = this,\n          now = +new Date(),\n          args = arguments;\n\n      if (last && now < last + frequency) {\n        clearTimeout(timer);\n        timer = setTimeout(function () {\n          last = undefined;\n          fn.apply(that, args);\n        }, frequency);\n      } else {\n        last = now;\n        fn.apply(that, args);\n      }\n    };\n  },\n\n  /**\n   * Escape a string such that it can be used in a regular expression\n   *\n   *  @param {string} val string to escape\n   *  @returns {string} escaped string\n   */\n  escapeRegex: function (val) {\n    return val.replace(_re_escape_regex, '\\\\$1');\n  },\n\n  /**\n   * Create a function that will write to a nested object or array\n   * @param {*} source JSON notation string\n   * @returns Write function\n   */\n  set: function (source) {\n    if ($.isPlainObject(source)) {\n      /* Unlike get, only the underscore (global) option is used for for\n       * setting data since we don't know the type here. This is why an object\n       * option is not documented for `mData` (which is read/write), but it is\n       * for `mRender` which is read only.\n       */\n      return DataTable.util.set(source._);\n    } else if (source === null) {\n      // Nothing to do when the data source is null\n      return function () {};\n    } else if (typeof source === 'function') {\n      return function (data, val, meta) {\n        source(data, 'set', val, meta);\n      };\n    } else if (typeof source === 'string' && (source.indexOf('.') !== -1 || source.indexOf('[') !== -1 || source.indexOf('(') !== -1)) {\n      // Like the get, we need to get data from a nested object\n      var setData = function (data, val, src) {\n        var a = _fnSplitObjNotation(src),\n            b;\n\n        var aLast = a[a.length - 1];\n        var arrayNotation, funcNotation, o, innerSrc;\n\n        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {\n          // Protect against prototype pollution\n          if (a[i] === '__proto__' || a[i] === 'constructor') {\n            throw new Error('Cannot set prototype values');\n          } // Check if we are dealing with an array notation request\n\n\n          arrayNotation = a[i].match(__reArray);\n          funcNotation = a[i].match(__reFn);\n\n          if (arrayNotation) {\n            a[i] = a[i].replace(__reArray, '');\n            data[a[i]] = []; // Get the remainder of the nested object to set so we can recurse\n\n            b = a.slice();\n            b.splice(0, i + 1);\n            innerSrc = b.join('.'); // Traverse each entry in the array setting the properties requested\n\n            if (Array.isArray(val)) {\n              for (var j = 0, jLen = val.length; j < jLen; j++) {\n                o = {};\n                setData(o, val[j], innerSrc);\n                data[a[i]].push(o);\n              }\n            } else {\n              // We've been asked to save data to an array, but it\n              // isn't array data to be saved. Best that can be done\n              // is to just save the value.\n              data[a[i]] = val;\n            } // The inner call to setData has already traversed through the remainder\n            // of the source and has set the data, thus we can exit here\n\n\n            return;\n          } else if (funcNotation) {\n            // Function call\n            a[i] = a[i].replace(__reFn, '');\n            data = data[a[i]](val);\n          } // If the nested object doesn't currently exist - since we are\n          // trying to set the value - create it\n\n\n          if (data[a[i]] === null || data[a[i]] === undefined) {\n            data[a[i]] = {};\n          }\n\n          data = data[a[i]];\n        } // Last item in the input - i.e, the actual set\n\n\n        if (aLast.match(__reFn)) {\n          // Function call\n          data = data[aLast.replace(__reFn, '')](val);\n        } else {\n          // If array notation is used, we just want to strip it and use the property name\n          // and assign the value. If it isn't used, then we get the result we want anyway\n          data[aLast.replace(__reArray, '')] = val;\n        }\n      };\n\n      return function (data, val) {\n        // meta is also passed in, but not used\n        return setData(data, val, source);\n      };\n    } else {\n      // Array or flat object mapping\n      return function (data, val) {\n        // meta is also passed in, but not used\n        data[source] = val;\n      };\n    }\n  },\n\n  /**\n   * Create a function that will read nested objects from arrays, based on JSON notation\n   * @param {*} source JSON notation string\n   * @returns Value read\n   */\n  get: function (source) {\n    if ($.isPlainObject(source)) {\n      // Build an object of get functions, and wrap them in a single call\n      var o = {};\n      $.each(source, function (key, val) {\n        if (val) {\n          o[key] = DataTable.util.get(val);\n        }\n      });\n      return function (data, type, row, meta) {\n        var t = o[type] || o._;\n        return t !== undefined ? t(data, type, row, meta) : data;\n      };\n    } else if (source === null) {\n      // Give an empty string for rendering / sorting etc\n      return function (data) {\n        // type, row and meta also passed, but not used\n        return data;\n      };\n    } else if (typeof source === 'function') {\n      return function (data, type, row, meta) {\n        return source(data, type, row, meta);\n      };\n    } else if (typeof source === 'string' && (source.indexOf('.') !== -1 || source.indexOf('[') !== -1 || source.indexOf('(') !== -1)) {\n      /* If there is a . in the source string then the data source is in a\n       * nested object so we loop over the data for each level to get the next\n       * level down. On each loop we test for undefined, and if found immediately\n       * return. This allows entire objects to be missing and sDefaultContent to\n       * be used if defined, rather than throwing an error\n       */\n      var fetchData = function (data, type, src) {\n        var arrayNotation, funcNotation, out, innerSrc;\n\n        if (src !== \"\") {\n          var a = _fnSplitObjNotation(src);\n\n          for (var i = 0, iLen = a.length; i < iLen; i++) {\n            // Check if we are dealing with special notation\n            arrayNotation = a[i].match(__reArray);\n            funcNotation = a[i].match(__reFn);\n\n            if (arrayNotation) {\n              // Array notation\n              a[i] = a[i].replace(__reArray, ''); // Condition allows simply [] to be passed in\n\n              if (a[i] !== \"\") {\n                data = data[a[i]];\n              }\n\n              out = []; // Get the remainder of the nested object to get\n\n              a.splice(0, i + 1);\n              innerSrc = a.join('.'); // Traverse each entry in the array getting the properties requested\n\n              if (Array.isArray(data)) {\n                for (var j = 0, jLen = data.length; j < jLen; j++) {\n                  out.push(fetchData(data[j], type, innerSrc));\n                }\n              } // If a string is given in between the array notation indicators, that\n              // is used to join the strings together, otherwise an array is returned\n\n\n              var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);\n              data = join === \"\" ? out : out.join(join); // The inner call to fetchData has already traversed through the remainder\n              // of the source requested, so we exit from the loop\n\n              break;\n            } else if (funcNotation) {\n              // Function call\n              a[i] = a[i].replace(__reFn, '');\n              data = data[a[i]]();\n              continue;\n            }\n\n            if (data === null || data[a[i]] === null) {\n              return null;\n            } else if (data === undefined || data[a[i]] === undefined) {\n              return undefined;\n            }\n\n            data = data[a[i]];\n          }\n        }\n\n        return data;\n      };\n\n      return function (data, type) {\n        // row and meta also passed, but not used\n        return fetchData(data, type, source);\n      };\n    } else {\n      // Array or flat object mapping\n      return function (data, type) {\n        // row and meta also passed, but not used\n        return data[source];\n      };\n    }\n  }\n};\n/**\n * Create a mapping object that allows camel case parameters to be looked up\n * for their Hungarian counterparts. The mapping is stored in a private\n * parameter called `_hungarianMap` which can be accessed on the source object.\n *  @param {object} o\n *  @memberof DataTable#oApi\n */\n\nfunction _fnHungarianMap(o) {\n  var hungarian = 'a aa ai ao as b fn i m o s ',\n      match,\n      newKey,\n      map = {};\n  $.each(o, function (key, val) {\n    match = key.match(/^([^A-Z]+?)([A-Z])/);\n\n    if (match && hungarian.indexOf(match[1] + ' ') !== -1) {\n      newKey = key.replace(match[0], match[2].toLowerCase());\n      map[newKey] = key;\n\n      if (match[1] === 'o') {\n        _fnHungarianMap(o[key]);\n      }\n    }\n  });\n  o._hungarianMap = map;\n}\n/**\n * Convert from camel case parameters to Hungarian, based on a Hungarian map\n * created by _fnHungarianMap.\n *  @param {object} src The model object which holds all parameters that can be\n *    mapped.\n *  @param {object} user The object to convert from camel case to Hungarian.\n *  @param {boolean} force When set to `true`, properties which already have a\n *    Hungarian value in the `user` object will be overwritten. Otherwise they\n *    won't be.\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnCamelToHungarian(src, user, force) {\n  if (!src._hungarianMap) {\n    _fnHungarianMap(src);\n  }\n\n  var hungarianKey;\n  $.each(user, function (key, val) {\n    hungarianKey = src._hungarianMap[key];\n\n    if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {\n      // For objects, we need to buzz down into the object to copy parameters\n      if (hungarianKey.charAt(0) === 'o') {\n        // Copy the camelCase options over to the hungarian\n        if (!user[hungarianKey]) {\n          user[hungarianKey] = {};\n        }\n\n        $.extend(true, user[hungarianKey], user[key]);\n\n        _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);\n      } else {\n        user[hungarianKey] = user[key];\n      }\n    }\n  });\n}\n/**\n * Language compatibility - when certain options are given, and others aren't, we\n * need to duplicate the values over, in order to provide backwards compatibility\n * with older language files.\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnLanguageCompat(lang) {\n  // Note the use of the Hungarian notation for the parameters in this method as\n  // this is called after the mapping of camelCase to Hungarian\n  var defaults = DataTable.defaults.oLanguage; // Default mapping\n\n  var defaultDecimal = defaults.sDecimal;\n\n  if (defaultDecimal) {\n    _addNumericSort(defaultDecimal);\n  }\n\n  if (lang) {\n    var zeroRecords = lang.sZeroRecords; // Backwards compatibility - if there is no sEmptyTable given, then use the same as\n    // sZeroRecords - assuming that is given.\n\n    if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === \"No data available in table\") {\n      _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');\n    } // Likewise with loading records\n\n\n    if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === \"Loading...\") {\n      _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');\n    } // Old parameter name of the thousands separator mapped onto the new\n\n\n    if (lang.sInfoThousands) {\n      lang.sThousands = lang.sInfoThousands;\n    }\n\n    var decimal = lang.sDecimal;\n\n    if (decimal && defaultDecimal !== decimal) {\n      _addNumericSort(decimal);\n    }\n  }\n}\n/**\n * Map one parameter onto another\n *  @param {object} o Object to map\n *  @param {*} knew The new parameter name\n *  @param {*} old The old parameter name\n */\n\n\nvar _fnCompatMap = function (o, knew, old) {\n  if (o[knew] !== undefined) {\n    o[old] = o[knew];\n  }\n};\n/**\n * Provide backwards compatibility for the main DT options. Note that the new\n * options are mapped onto the old parameters, so this is an external interface\n * change only.\n *  @param {object} init Object to map\n */\n\n\nfunction _fnCompatOpts(init) {\n  _fnCompatMap(init, 'ordering', 'bSort');\n\n  _fnCompatMap(init, 'orderMulti', 'bSortMulti');\n\n  _fnCompatMap(init, 'orderClasses', 'bSortClasses');\n\n  _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');\n\n  _fnCompatMap(init, 'order', 'aaSorting');\n\n  _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');\n\n  _fnCompatMap(init, 'paging', 'bPaginate');\n\n  _fnCompatMap(init, 'pagingType', 'sPaginationType');\n\n  _fnCompatMap(init, 'pageLength', 'iDisplayLength');\n\n  _fnCompatMap(init, 'searching', 'bFilter'); // Boolean initialisation of x-scrolling\n\n\n  if (typeof init.sScrollX === 'boolean') {\n    init.sScrollX = init.sScrollX ? '100%' : '';\n  }\n\n  if (typeof init.scrollX === 'boolean') {\n    init.scrollX = init.scrollX ? '100%' : '';\n  } // Column search objects are in an array, so it needs to be converted\n  // element by element\n\n\n  var searchCols = init.aoSearchCols;\n\n  if (searchCols) {\n    for (var i = 0, ien = searchCols.length; i < ien; i++) {\n      if (searchCols[i]) {\n        _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);\n      }\n    }\n  }\n}\n/**\n * Provide backwards compatibility for column options. Note that the new options\n * are mapped onto the old parameters, so this is an external interface change\n * only.\n *  @param {object} init Object to map\n */\n\n\nfunction _fnCompatCols(init) {\n  _fnCompatMap(init, 'orderable', 'bSortable');\n\n  _fnCompatMap(init, 'orderData', 'aDataSort');\n\n  _fnCompatMap(init, 'orderSequence', 'asSorting');\n\n  _fnCompatMap(init, 'orderDataType', 'sortDataType'); // orderData can be given as an integer\n\n\n  var dataSort = init.aDataSort;\n\n  if (typeof dataSort === 'number' && !Array.isArray(dataSort)) {\n    init.aDataSort = [dataSort];\n  }\n}\n/**\n * Browser feature detection for capabilities, quirks\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnBrowserDetect(settings) {\n  // We don't need to do this every time DataTables is constructed, the values\n  // calculated are specific to the browser and OS configuration which we\n  // don't expect to change between initialisations\n  if (!DataTable.__browser) {\n    var browser = {};\n    DataTable.__browser = browser; // Scrolling feature / quirks detection\n\n    var n = $('<div/>').css({\n      position: 'fixed',\n      top: 0,\n      left: $(window).scrollLeft() * -1,\n      // allow for scrolling\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    }).append($('<div/>').css({\n      position: 'absolute',\n      top: 1,\n      left: 1,\n      width: 100,\n      overflow: 'scroll'\n    }).append($('<div/>').css({\n      width: '100%',\n      height: 10\n    }))).appendTo('body');\n    var outer = n.children();\n    var inner = outer.children(); // Numbers below, in order, are:\n    // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n    //\n    // IE6 XP:                           100 100 100  83\n    // IE7 Vista:                        100 100 100  83\n    // IE 8+ Windows:                     83  83 100  83\n    // Evergreen Windows:                 83  83 100  83\n    // Evergreen Mac with scrollbars:     85  85 100  85\n    // Evergreen Mac without scrollbars: 100 100 100 100\n    // Get scrollbar width\n\n    browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth; // IE6/7 will oversize a width 100% element inside a scrolling element, to\n    // include the width of the scrollbar, while other browsers ensure the inner\n    // element is contained without forcing scrolling\n\n    browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100; // In rtl text layout, some browsers (most, but not all) will place the\n    // scrollbar on the left, rather than the right.\n\n    browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1; // IE8- don't provide height and width for getBoundingClientRect\n\n    browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n    n.remove();\n  }\n\n  $.extend(settings.oBrowser, DataTable.__browser);\n  settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n}\n/**\n * Array.prototype reduce[Right] method, used for browsers which don't support\n * JS 1.6. Done this way to reduce code size, since we iterate either way\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnReduce(that, fn, init, start, end, inc) {\n  var i = start,\n      value,\n      isSet = false;\n\n  if (init !== undefined) {\n    value = init;\n    isSet = true;\n  }\n\n  while (i !== end) {\n    if (!that.hasOwnProperty(i)) {\n      continue;\n    }\n\n    value = isSet ? fn(value, that[i], i, that) : that[i];\n    isSet = true;\n    i += inc;\n  }\n\n  return value;\n}\n/**\n * Add a column to the list used for the table with default values\n *  @param {object} oSettings dataTables settings object\n *  @param {node} nTh The th element for this column\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnAddColumn(oSettings, nTh) {\n  // Add column to aoColumns array\n  var oDefaults = DataTable.defaults.column;\n  var iCol = oSettings.aoColumns.length;\n  var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {\n    \"nTh\": nTh ? nTh : document.createElement('th'),\n    \"sTitle\": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',\n    \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n    \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n    idx: iCol\n  });\n  oSettings.aoColumns.push(oCol); // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n  // passed into extend can be undefined. This allows the user to give a default\n  // with only some of the parameters defined, and also not give a default\n\n  var searchCols = oSettings.aoPreSearchCols;\n  searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]); // Use the default column options function to initialise classes etc\n\n  _fnColumnOptions(oSettings, iCol, $(nTh).data());\n}\n/**\n * Apply options for a column\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iCol column index to consider\n *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnColumnOptions(oSettings, iCol, oOptions) {\n  var oCol = oSettings.aoColumns[iCol];\n  var oClasses = oSettings.oClasses;\n  var th = $(oCol.nTh); // Try to get width information from the DOM. We can't get it from CSS\n  // as we'd need to parse the CSS stylesheet. `width` option can override\n\n  if (!oCol.sWidthOrig) {\n    // Width attribute\n    oCol.sWidthOrig = th.attr('width') || null; // Style attribute\n\n    var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\n    if (t) {\n      oCol.sWidthOrig = t[1];\n    }\n  }\n  /* User specified column options */\n\n\n  if (oOptions !== undefined && oOptions !== null) {\n    // Backwards compatibility\n    _fnCompatCols(oOptions); // Map camel case parameters to their Hungarian counterparts\n\n\n    _fnCamelToHungarian(DataTable.defaults.column, oOptions, true);\n    /* Backwards compatibility for mDataProp */\n\n\n    if (oOptions.mDataProp !== undefined && !oOptions.mData) {\n      oOptions.mData = oOptions.mDataProp;\n    }\n\n    if (oOptions.sType) {\n      oCol._sManualType = oOptions.sType;\n    } // `class` is a reserved word in Javascript, so we need to provide\n    // the ability to use a valid name for the camel case input\n\n\n    if (oOptions.className && !oOptions.sClass) {\n      oOptions.sClass = oOptions.className;\n    }\n\n    if (oOptions.sClass) {\n      th.addClass(oOptions.sClass);\n    }\n\n    var origClass = oCol.sClass;\n    $.extend(oCol, oOptions);\n\n    _fnMap(oCol, oOptions, \"sWidth\", \"sWidthOrig\"); // Merge class from previously defined classes with this one, rather than just\n    // overwriting it in the extend above\n\n\n    if (origClass !== oCol.sClass) {\n      oCol.sClass = origClass + ' ' + oCol.sClass;\n    }\n    /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n     * priority if defined\n     */\n\n\n    if (oOptions.iDataSort !== undefined) {\n      oCol.aDataSort = [oOptions.iDataSort];\n    }\n\n    _fnMap(oCol, oOptions, \"aDataSort\"); // Fall back to the aria-label attribute on the table header if no ariaTitle is\n    // provided.\n\n\n    if (!oCol.ariaTitle) {\n      oCol.ariaTitle = th.attr(\"aria-label\");\n    }\n  }\n  /* Cache the data get and set functions for speed */\n\n\n  var mDataSrc = oCol.mData;\n\n  var mData = _fnGetObjectDataFn(mDataSrc);\n\n  var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;\n\n  var attrTest = function (src) {\n    return typeof src === 'string' && src.indexOf('@') !== -1;\n  };\n\n  oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));\n  oCol._setter = null;\n\n  oCol.fnGetData = function (rowData, type, meta) {\n    var innerData = mData(rowData, type, undefined, meta);\n    return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;\n  };\n\n  oCol.fnSetData = function (rowData, val, meta) {\n    return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);\n  }; // Indicate if DataTables should read DOM data as an object or array\n  // Used in _fnGetRowElements\n\n\n  if (typeof mDataSrc !== 'number' && !oCol._isArrayHost) {\n    oSettings._rowReadObject = true;\n  }\n  /* Feature sorting overrides column specific when off */\n\n\n  if (!oSettings.oFeatures.bSort) {\n    oCol.bSortable = false;\n    th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called\n  }\n  /* Check that the class assignment is correct for sorting */\n\n\n  var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n  var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\n  if (!oCol.bSortable || !bAsc && !bDesc) {\n    oCol.sSortingClass = oClasses.sSortableNone;\n    oCol.sSortingClassJUI = \"\";\n  } else if (bAsc && !bDesc) {\n    oCol.sSortingClass = oClasses.sSortableAsc;\n    oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n  } else if (!bAsc && bDesc) {\n    oCol.sSortingClass = oClasses.sSortableDesc;\n    oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n  } else {\n    oCol.sSortingClass = oClasses.sSortable;\n    oCol.sSortingClassJUI = oClasses.sSortJUI;\n  }\n}\n/**\n * Adjust the table column widths for new data. Note: you would probably want to\n * do a redraw after calling this function!\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnAdjustColumnSizing(settings) {\n  /* Not interested in doing column width calculation if auto-width is disabled */\n  if (settings.oFeatures.bAutoWidth !== false) {\n    var columns = settings.aoColumns;\n\n    _fnCalculateColumnWidths(settings);\n\n    for (var i = 0, iLen = columns.length; i < iLen; i++) {\n      columns[i].nTh.style.width = columns[i].sWidth;\n    }\n  }\n\n  var scroll = settings.oScroll;\n\n  if (scroll.sY !== '' || scroll.sX !== '') {\n    _fnScrollDraw(settings);\n  }\n\n  _fnCallbackFire(settings, null, 'column-sizing', [settings]);\n}\n/**\n * Convert the index of a visible column to the index in the data array (take account\n * of hidden columns)\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iMatch Visible column index to lookup\n *  @returns {int} i the data index\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnVisibleToColumnIndex(oSettings, iMatch) {\n  var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n  return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;\n}\n/**\n * Convert the index of an index in the data array and convert it to the visible\n *   column index (take account of hidden columns)\n *  @param {int} iMatch Column index to lookup\n *  @param {object} oSettings dataTables settings object\n *  @returns {int} i the data index\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnColumnIndexToVisible(oSettings, iMatch) {\n  var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n  var iPos = $.inArray(iMatch, aiVis);\n  return iPos !== -1 ? iPos : null;\n}\n/**\n * Get the number of visible columns\n *  @param {object} oSettings dataTables settings object\n *  @returns {int} i the number of visible columns\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnVisbleColumns(oSettings) {\n  var vis = 0; // No reduce in IE8, use a loop for now\n\n  $.each(oSettings.aoColumns, function (i, col) {\n    if (col.bVisible && $(col.nTh).css('display') !== 'none') {\n      vis++;\n    }\n  });\n  return vis;\n}\n/**\n * Get an array of column indexes that match a given property\n *  @param {object} oSettings dataTables settings object\n *  @param {string} sParam Parameter in aoColumns to look for - typically\n *    bVisible or bSearchable\n *  @returns {array} Array of indexes with matched properties\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnGetColumns(oSettings, sParam) {\n  var a = [];\n  $.map(oSettings.aoColumns, function (val, i) {\n    if (val[sParam]) {\n      a.push(i);\n    }\n  });\n  return a;\n}\n/**\n * Calculate the 'type' of a column\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnColumnTypes(settings) {\n  var columns = settings.aoColumns;\n  var data = settings.aoData;\n  var types = DataTable.ext.type.detect;\n  var i, ien, j, jen, k, ken;\n  var col, cell, detectedType, cache; // For each column, spin over the \n\n  for (i = 0, ien = columns.length; i < ien; i++) {\n    col = columns[i];\n    cache = [];\n\n    if (!col.sType && col._sManualType) {\n      col.sType = col._sManualType;\n    } else if (!col.sType) {\n      for (j = 0, jen = types.length; j < jen; j++) {\n        for (k = 0, ken = data.length; k < ken; k++) {\n          // Use a cache array so we only need to get the type data\n          // from the formatter once (when using multiple detectors)\n          if (cache[k] === undefined) {\n            cache[k] = _fnGetCellData(settings, k, i, 'type');\n          }\n\n          detectedType = types[j](cache[k], settings); // If null, then this type can't apply to this column, so\n          // rather than testing all cells, break out. There is an\n          // exception for the last type which is `html`. We need to\n          // scan all rows since it is possible to mix string and HTML\n          // types\n\n          if (!detectedType && j !== types.length - 1) {\n            break;\n          } // Only a single match is needed for html type since it is\n          // bottom of the pile and very similar to string - but it\n          // must not be empty\n\n\n          if (detectedType === 'html' && !_empty(cache[k])) {\n            break;\n          }\n        } // Type is valid for all data points in the column - use this\n        // type\n\n\n        if (detectedType) {\n          col.sType = detectedType;\n          break;\n        }\n      } // Fall back - if no type was detected, always use string\n\n\n      if (!col.sType) {\n        col.sType = 'string';\n      }\n    }\n  }\n}\n/**\n * Take the column definitions and static columns arrays and calculate how\n * they relate to column indexes. The callback function will then apply the\n * definition found for a column to a suitable configuration object.\n *  @param {object} oSettings dataTables settings object\n *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n *  @param {array} aoCols The aoColumns array that defines columns individually\n *  @param {function} fn Callback function - takes two parameters, the calculated\n *    column index and the definition for that column.\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {\n  var i, iLen, j, jLen, k, kLen, def;\n  var columns = oSettings.aoColumns; // Column definitions with aTargets\n\n  if (aoColDefs) {\n    /* Loop over the definitions array - loop in reverse so first instance has priority */\n    for (i = aoColDefs.length - 1; i >= 0; i--) {\n      def = aoColDefs[i];\n      /* Each definition can target multiple columns, as it is an array */\n\n      var aTargets = def.target !== undefined ? def.target : def.targets !== undefined ? def.targets : def.aTargets;\n\n      if (!Array.isArray(aTargets)) {\n        aTargets = [aTargets];\n      }\n\n      for (j = 0, jLen = aTargets.length; j < jLen; j++) {\n        if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {\n          /* Add columns that we don't yet know about */\n          while (columns.length <= aTargets[j]) {\n            _fnAddColumn(oSettings);\n          }\n          /* Integer, basic index */\n\n\n          fn(aTargets[j], def);\n        } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {\n          /* Negative integer, right to left column counting */\n          fn(columns.length + aTargets[j], def);\n        } else if (typeof aTargets[j] === 'string') {\n          /* Class name matching on TH element */\n          for (k = 0, kLen = columns.length; k < kLen; k++) {\n            if (aTargets[j] == \"_all\" || $(columns[k].nTh).hasClass(aTargets[j])) {\n              fn(k, def);\n            }\n          }\n        }\n      }\n    }\n  } // Statically defined columns array\n\n\n  if (aoCols) {\n    for (i = 0, iLen = aoCols.length; i < iLen; i++) {\n      fn(i, aoCols[i]);\n    }\n  }\n}\n/**\n * Add a data array to the table, creating DOM node etc. This is the parallel to\n * _fnGatherData, but for adding rows from a Javascript source, rather than a\n * DOM source.\n *  @param {object} oSettings dataTables settings object\n *  @param {array} aData data array to be added\n *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n *    DataTables will create a row automatically\n *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n *    if nTr is.\n *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnAddData(oSettings, aDataIn, nTr, anTds) {\n  /* Create the object for storing information about this new row */\n  var iRow = oSettings.aoData.length;\n  var oData = $.extend(true, {}, DataTable.models.oRow, {\n    src: nTr ? 'dom' : 'data',\n    idx: iRow\n  });\n  oData._aData = aDataIn;\n  oSettings.aoData.push(oData);\n  /* Create the cells */\n\n  var nTd, sThisType;\n  var columns = oSettings.aoColumns; // Invalidate the column types as the new data needs to be revalidated\n\n  for (var i = 0, iLen = columns.length; i < iLen; i++) {\n    columns[i].sType = null;\n  }\n  /* Add to the display array */\n\n\n  oSettings.aiDisplayMaster.push(iRow);\n  var id = oSettings.rowIdFn(aDataIn);\n\n  if (id !== undefined) {\n    oSettings.aIds[id] = oData;\n  }\n  /* Create the DOM information, or register it if already present */\n\n\n  if (nTr || !oSettings.oFeatures.bDeferRender) {\n    _fnCreateTr(oSettings, iRow, nTr, anTds);\n  }\n\n  return iRow;\n}\n/**\n * Add one or more TR elements to the table. Generally we'd expect to\n * use this for reading data from a DOM sourced table, but it could be\n * used for an TR element. Note that if a TR is given, it is used (i.e.\n * it is not cloned).\n *  @param {object} settings dataTables settings object\n *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n *  @returns {array} Array of indexes for the added rows\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnAddTr(settings, trs) {\n  var row; // Allow an individual node to be passed in\n\n  if (!(trs instanceof $)) {\n    trs = $(trs);\n  }\n\n  return trs.map(function (i, el) {\n    row = _fnGetRowElements(settings, el);\n    return _fnAddData(settings, row.data, el, row.cells);\n  });\n}\n/**\n * Take a TR element and convert it to an index in aoData\n *  @param {object} oSettings dataTables settings object\n *  @param {node} n the TR element to find\n *  @returns {int} index if the node is found, null if not\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnNodeToDataIndex(oSettings, n) {\n  return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;\n}\n/**\n * Take a TD element and convert it into a column data index (not the visible index)\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iRow The row number the TD/TH can be found in\n *  @param {node} n The TD/TH element to find\n *  @returns {int} index if the node is found, -1 if not\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnNodeToColumnIndex(oSettings, iRow, n) {\n  return $.inArray(n, oSettings.aoData[iRow].anCells);\n}\n/**\n * Get the data for a given cell from the internal cache, taking into account data mapping\n *  @param {object} settings dataTables settings object\n *  @param {int} rowIdx aoData row id\n *  @param {int} colIdx Column index\n *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')\n *  @returns {*} Cell data\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnGetCellData(settings, rowIdx, colIdx, type) {\n  if (type === 'search') {\n    type = 'filter';\n  } else if (type === 'order') {\n    type = 'sort';\n  }\n\n  var draw = settings.iDraw;\n  var col = settings.aoColumns[colIdx];\n  var rowData = settings.aoData[rowIdx]._aData;\n  var defaultContent = col.sDefaultContent;\n  var cellData = col.fnGetData(rowData, type, {\n    settings: settings,\n    row: rowIdx,\n    col: colIdx\n  });\n\n  if (cellData === undefined) {\n    if (settings.iDrawError != draw && defaultContent === null) {\n      _fnLog(settings, 0, \"Requested unknown parameter \" + (typeof col.mData == 'function' ? '{function}' : \"'\" + col.mData + \"'\") + \" for row \" + rowIdx + \", column \" + colIdx, 4);\n\n      settings.iDrawError = draw;\n    }\n\n    return defaultContent;\n  } // When the data source is null and a specific data type is requested (i.e.\n  // not the original data), we can use default column data\n\n\n  if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {\n    cellData = defaultContent;\n  } else if (typeof cellData === 'function') {\n    // If the data source is a function, then we run it and use the return,\n    // executing in the scope of the data object (for instances)\n    return cellData.call(rowData);\n  }\n\n  if (cellData === null && type === 'display') {\n    return '';\n  }\n\n  if (type === 'filter') {\n    var fomatters = DataTable.ext.type.search;\n\n    if (fomatters[col.sType]) {\n      cellData = fomatters[col.sType](cellData);\n    }\n  }\n\n  return cellData;\n}\n/**\n * Set the value for a specific cell, into the internal data cache\n *  @param {object} settings dataTables settings object\n *  @param {int} rowIdx aoData row id\n *  @param {int} colIdx Column index\n *  @param {*} val Value to set\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnSetCellData(settings, rowIdx, colIdx, val) {\n  var col = settings.aoColumns[colIdx];\n  var rowData = settings.aoData[rowIdx]._aData;\n  col.fnSetData(rowData, val, {\n    settings: settings,\n    row: rowIdx,\n    col: colIdx\n  });\n} // Private variable that is used to match action syntax in the data property object\n\n\nvar __reArray = /\\[.*?\\]$/;\nvar __reFn = /\\(\\)$/;\n/**\n * Split string on periods, taking into account escaped periods\n * @param  {string} str String to split\n * @return {array} Split string\n */\n\nfunction _fnSplitObjNotation(str) {\n  return $.map(str.match(/(\\\\.|[^\\.])+/g) || [''], function (s) {\n    return s.replace(/\\\\\\./g, '.');\n  });\n}\n/**\n * Return a function that can be used to get data from a source object, taking\n * into account the ability to use nested objects as a source\n *  @param {string|int|function} mSource The data source for the object\n *  @returns {function} Data get function\n *  @memberof DataTable#oApi\n */\n\n\nvar _fnGetObjectDataFn = DataTable.util.get;\n/**\n * Return a function that can be used to set data from a source object, taking\n * into account the ability to use nested objects as a source\n *  @param {string|int|function} mSource The data source for the object\n *  @returns {function} Data set function\n *  @memberof DataTable#oApi\n */\n\nvar _fnSetObjectDataFn = DataTable.util.set;\n/**\n * Return an array with the full table data\n *  @param {object} oSettings dataTables settings object\n *  @returns array {array} aData Master data array\n *  @memberof DataTable#oApi\n */\n\nfunction _fnGetDataMaster(settings) {\n  return _pluck(settings.aoData, '_aData');\n}\n/**\n * Nuke the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnClearTable(settings) {\n  settings.aoData.length = 0;\n  settings.aiDisplayMaster.length = 0;\n  settings.aiDisplay.length = 0;\n  settings.aIds = {};\n}\n/**\n* Take an array of integers (index array) and remove a target integer (value - not\n* the key!)\n*  @param {array} a Index array to target\n*  @param {int} iTarget value to find\n*  @memberof DataTable#oApi\n*/\n\n\nfunction _fnDeleteIndex(a, iTarget, splice) {\n  var iTargetIndex = -1;\n\n  for (var i = 0, iLen = a.length; i < iLen; i++) {\n    if (a[i] == iTarget) {\n      iTargetIndex = i;\n    } else if (a[i] > iTarget) {\n      a[i]--;\n    }\n  }\n\n  if (iTargetIndex != -1 && splice === undefined) {\n    a.splice(iTargetIndex, 1);\n  }\n}\n/**\n * Mark cached data as invalid such that a re-read of the data will occur when\n * the cached data is next requested. Also update from the data source object.\n *\n * @param {object} settings DataTables settings object\n * @param {int}    rowIdx   Row index to invalidate\n * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n *     or 'data'\n * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n *     row will be invalidated\n * @memberof DataTable#oApi\n *\n * @todo For the modularisation of v1.11 this will need to become a callback, so\n *   the sort and filter methods can subscribe to it. That will required\n *   initialisation options for sorting, which is why it is not already baked in\n */\n\n\nfunction _fnInvalidate(settings, rowIdx, src, colIdx) {\n  var row = settings.aoData[rowIdx];\n  var i, ien;\n\n  var cellWrite = function (cell, col) {\n    // This is very frustrating, but in IE if you just write directly\n    // to innerHTML, and elements that are overwritten are GC'ed,\n    // even if there is a reference to them elsewhere\n    while (cell.childNodes.length) {\n      cell.removeChild(cell.firstChild);\n    }\n\n    cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');\n  }; // Are we reading last data from DOM or the data object?\n\n\n  if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {\n    // Read the data from the DOM\n    row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;\n  } else {\n    // Reading from data object, update the DOM\n    var cells = row.anCells;\n\n    if (cells) {\n      if (colIdx !== undefined) {\n        cellWrite(cells[colIdx], colIdx);\n      } else {\n        for (i = 0, ien = cells.length; i < ien; i++) {\n          cellWrite(cells[i], i);\n        }\n      }\n    }\n  } // For both row and cell invalidation, the cached data for sorting and\n  // filtering is nulled out\n\n\n  row._aSortData = null;\n  row._aFilterData = null; // Invalidate the type for a specific column (if given) or all columns since\n  // the data might have changed\n\n  var cols = settings.aoColumns;\n\n  if (colIdx !== undefined) {\n    cols[colIdx].sType = null;\n  } else {\n    for (i = 0, ien = cols.length; i < ien; i++) {\n      cols[i].sType = null;\n    } // Update DataTables special `DT_*` attributes for the row\n\n\n    _fnRowAttributes(settings, row);\n  }\n}\n/**\n * Build a data source object from an HTML row, reading the contents of the\n * cells that are in the row.\n *\n * @param {object} settings DataTables settings object\n * @param {node|object} TR element from which to read data or existing row\n *   object from which to re-read the data from the cells\n * @param {int} [colIdx] Optional column index\n * @param {array|object} [d] Data source object. If `colIdx` is given then this\n *   parameter should also be given and will be used to write the data into.\n *   Only the column in question will be written\n * @returns {object} Object with two parameters: `data` the data read, in\n *   document order, and `cells` and array of nodes (they can be useful to the\n *   caller, so rather than needing a second traversal to get them, just return\n *   them from here).\n * @memberof DataTable#oApi\n */\n\n\nfunction _fnGetRowElements(settings, row, colIdx, d) {\n  var tds = [],\n      td = row.firstChild,\n      name,\n      col,\n      o,\n      i = 0,\n      contents,\n      columns = settings.aoColumns,\n      objectRead = settings._rowReadObject; // Allow the data object to be passed in, or construct\n\n  d = d !== undefined ? d : objectRead ? {} : [];\n\n  var attr = function (str, td) {\n    if (typeof str === 'string') {\n      var idx = str.indexOf('@');\n\n      if (idx !== -1) {\n        var attr = str.substring(idx + 1);\n\n        var setter = _fnSetObjectDataFn(str);\n\n        setter(d, td.getAttribute(attr));\n      }\n    }\n  }; // Read data from a cell and store into the data object\n\n\n  var cellProcess = function (cell) {\n    if (colIdx === undefined || colIdx === i) {\n      col = columns[i];\n      contents = cell.innerHTML.trim();\n\n      if (col && col._bAttrSrc) {\n        var setter = _fnSetObjectDataFn(col.mData._);\n\n        setter(d, contents);\n        attr(col.mData.sort, cell);\n        attr(col.mData.type, cell);\n        attr(col.mData.filter, cell);\n      } else {\n        // Depending on the `data` option for the columns the data can\n        // be read to either an object or an array.\n        if (objectRead) {\n          if (!col._setter) {\n            // Cache the setter function\n            col._setter = _fnSetObjectDataFn(col.mData);\n          }\n\n          col._setter(d, contents);\n        } else {\n          d[i] = contents;\n        }\n      }\n    }\n\n    i++;\n  };\n\n  if (td) {\n    // `tr` element was passed in\n    while (td) {\n      name = td.nodeName.toUpperCase();\n\n      if (name == \"TD\" || name == \"TH\") {\n        cellProcess(td);\n        tds.push(td);\n      }\n\n      td = td.nextSibling;\n    }\n  } else {\n    // Existing row object passed in\n    tds = row.anCells;\n\n    for (var j = 0, jen = tds.length; j < jen; j++) {\n      cellProcess(tds[j]);\n    }\n  } // Read the ID from the DOM if present\n\n\n  var rowNode = row.firstChild ? row : row.nTr;\n\n  if (rowNode) {\n    var id = rowNode.getAttribute('id');\n\n    if (id) {\n      _fnSetObjectDataFn(settings.rowId)(d, id);\n    }\n  }\n\n  return {\n    data: d,\n    cells: tds\n  };\n}\n/**\n * Create a new TR element (and it's TD children) for a row\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iRow Row to consider\n *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n *    DataTables will create a row automatically\n *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n *    if nTr is.\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnCreateTr(oSettings, iRow, nTrIn, anTds) {\n  var row = oSettings.aoData[iRow],\n      rowData = row._aData,\n      cells = [],\n      nTr,\n      nTd,\n      oCol,\n      i,\n      iLen,\n      create;\n\n  if (row.nTr === null) {\n    nTr = nTrIn || document.createElement('tr');\n    row.nTr = nTr;\n    row.anCells = cells;\n    /* Use a private property on the node to allow reserve mapping from the node\n     * to the aoData array for fast look up\n     */\n\n    nTr._DT_RowIndex = iRow;\n    /* Special parameters can be given by the data source to be used on the row */\n\n    _fnRowAttributes(oSettings, row);\n    /* Process each column */\n\n\n    for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n      oCol = oSettings.aoColumns[i];\n      create = nTrIn ? false : true;\n      nTd = create ? document.createElement(oCol.sCellType) : anTds[i];\n\n      if (!nTd) {\n        _fnLog(oSettings, 0, 'Incorrect column count', 18);\n      }\n\n      nTd._DT_CellIndex = {\n        row: iRow,\n        column: i\n      };\n      cells.push(nTd); // Need to create the HTML if new, or if a rendering function is defined\n\n      if (create || (oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {\n        nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');\n      }\n      /* Add user defined class */\n\n\n      if (oCol.sClass) {\n        nTd.className += ' ' + oCol.sClass;\n      } // Visibility - add or remove as required\n\n\n      if (oCol.bVisible && !nTrIn) {\n        nTr.appendChild(nTd);\n      } else if (!oCol.bVisible && nTrIn) {\n        nTd.parentNode.removeChild(nTd);\n      }\n\n      if (oCol.fnCreatedCell) {\n        oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);\n      }\n    }\n\n    _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells]);\n  }\n}\n/**\n * Add attributes to a row based on the special `DT_*` parameters in a data\n * source object.\n *  @param {object} settings DataTables settings object\n *  @param {object} DataTables row object for the row to be modified\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnRowAttributes(settings, row) {\n  var tr = row.nTr;\n  var data = row._aData;\n\n  if (tr) {\n    var id = settings.rowIdFn(data);\n\n    if (id) {\n      tr.id = id;\n    }\n\n    if (data.DT_RowClass) {\n      // Remove any classes added by DT_RowClass before\n      var a = data.DT_RowClass.split(' ');\n      row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;\n      $(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);\n    }\n\n    if (data.DT_RowAttr) {\n      $(tr).attr(data.DT_RowAttr);\n    }\n\n    if (data.DT_RowData) {\n      $(tr).data(data.DT_RowData);\n    }\n  }\n}\n/**\n * Create the HTML header for the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnBuildHead(oSettings) {\n  var i, ien, cell, row, column;\n  var thead = oSettings.nTHead;\n  var tfoot = oSettings.nTFoot;\n  var createHeader = $('th, td', thead).length === 0;\n  var classes = oSettings.oClasses;\n  var columns = oSettings.aoColumns;\n\n  if (createHeader) {\n    row = $('<tr/>').appendTo(thead);\n  }\n\n  for (i = 0, ien = columns.length; i < ien; i++) {\n    column = columns[i];\n    cell = $(column.nTh).addClass(column.sClass);\n\n    if (createHeader) {\n      cell.appendTo(row);\n    } // 1.11 move into sorting\n\n\n    if (oSettings.oFeatures.bSort) {\n      cell.addClass(column.sSortingClass);\n\n      if (column.bSortable !== false) {\n        cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);\n\n        _fnSortAttachListener(oSettings, column.nTh, i);\n      }\n    }\n\n    if (column.sTitle != cell[0].innerHTML) {\n      cell.html(column.sTitle);\n    }\n\n    _fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);\n  }\n\n  if (createHeader) {\n    _fnDetectHeader(oSettings.aoHeader, thead);\n  }\n  /* Deal with the footer - add classes if required */\n\n\n  $(thead).children('tr').children('th, td').addClass(classes.sHeaderTH);\n  $(tfoot).children('tr').children('th, td').addClass(classes.sFooterTH); // Cache the footer cells. Note that we only take the cells from the first\n  // row in the footer. If there is more than one row the user wants to\n  // interact with, they need to use the table().foot() method. Note also this\n  // allows cells to be used for multiple columns using colspan\n\n  if (tfoot !== null) {\n    var cells = oSettings.aoFooter[0];\n\n    for (i = 0, ien = cells.length; i < ien; i++) {\n      column = columns[i];\n\n      if (column) {\n        column.nTf = cells[i].cell;\n\n        if (column.sClass) {\n          $(column.nTf).addClass(column.sClass);\n        }\n      } else {\n        _fnLog(oSettings, 0, 'Incorrect column count', 18);\n      }\n    }\n  }\n}\n/**\n * Draw the header (or footer) element based on the column visibility states. The\n * methodology here is to use the layout array from _fnDetectHeader, modified for\n * the instantaneous column visibility, to construct the new layout. The grid is\n * traversed over cell at a time in a rows x columns grid fashion, although each\n * cell insert can cover multiple elements in the grid - which is tracks using the\n * aApplied array. Cell inserts in the grid will only occur where there isn't\n * already a cell in that position.\n *  @param {object} oSettings dataTables settings object\n *  @param array {objects} aoSource Layout array from _fnDetectHeader\n *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnDrawHead(oSettings, aoSource, bIncludeHidden) {\n  var i, iLen, j, jLen, k, kLen, n, nLocalTr;\n  var aoLocal = [];\n  var aApplied = [];\n  var iColumns = oSettings.aoColumns.length;\n  var iRowspan, iColspan;\n\n  if (!aoSource) {\n    return;\n  }\n\n  if (bIncludeHidden === undefined) {\n    bIncludeHidden = false;\n  }\n  /* Make a copy of the master layout array, but without the visible columns in it */\n\n\n  for (i = 0, iLen = aoSource.length; i < iLen; i++) {\n    aoLocal[i] = aoSource[i].slice();\n    aoLocal[i].nTr = aoSource[i].nTr;\n    /* Remove any columns which are currently hidden */\n\n    for (j = iColumns - 1; j >= 0; j--) {\n      if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {\n        aoLocal[i].splice(j, 1);\n      }\n    }\n    /* Prep the applied array - it needs an element for each row */\n\n\n    aApplied.push([]);\n  }\n\n  for (i = 0, iLen = aoLocal.length; i < iLen; i++) {\n    nLocalTr = aoLocal[i].nTr;\n    /* All cells are going to be replaced, so empty out the row */\n\n    if (nLocalTr) {\n      while (n = nLocalTr.firstChild) {\n        nLocalTr.removeChild(n);\n      }\n    }\n\n    for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {\n      iRowspan = 1;\n      iColspan = 1;\n      /* Check to see if there is already a cell (row/colspan) covering our target\n       * insert point. If there is, then there is nothing to do.\n       */\n\n      if (aApplied[i][j] === undefined) {\n        nLocalTr.appendChild(aoLocal[i][j].cell);\n        aApplied[i][j] = 1;\n        /* Expand the cell to cover as many rows as needed */\n\n        while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {\n          aApplied[i + iRowspan][j] = 1;\n          iRowspan++;\n        }\n        /* Expand the cell to cover as many columns as needed */\n\n\n        while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {\n          /* Must update the applied array over the rows for the columns */\n          for (k = 0; k < iRowspan; k++) {\n            aApplied[i + k][j + iColspan] = 1;\n          }\n\n          iColspan++;\n        }\n        /* Do the actual expansion in the DOM */\n\n\n        $(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);\n      }\n    }\n  }\n}\n/**\n * Insert the required TR nodes into the table for display\n *  @param {object} oSettings dataTables settings object\n *  @param ajaxComplete true after ajax call to complete rendering\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnDraw(oSettings, ajaxComplete) {\n  // Allow for state saving and a custom start position\n  _fnStart(oSettings);\n  /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n\n\n  var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);\n\n  if ($.inArray(false, aPreDraw) !== -1) {\n    _fnProcessingDisplay(oSettings, false);\n\n    return;\n  }\n\n  var anRows = [];\n  var iRowCount = 0;\n  var asStripeClasses = oSettings.asStripeClasses;\n  var iStripes = asStripeClasses.length;\n  var oLang = oSettings.oLanguage;\n  var bServerSide = _fnDataSource(oSettings) == 'ssp';\n  var aiDisplay = oSettings.aiDisplay;\n  var iDisplayStart = oSettings._iDisplayStart;\n  var iDisplayEnd = oSettings.fnDisplayEnd();\n  oSettings.bDrawing = true;\n  /* Server-side processing draw intercept */\n\n  if (oSettings.bDeferLoading) {\n    oSettings.bDeferLoading = false;\n    oSettings.iDraw++;\n\n    _fnProcessingDisplay(oSettings, false);\n  } else if (!bServerSide) {\n    oSettings.iDraw++;\n  } else if (!oSettings.bDestroying && !ajaxComplete) {\n    _fnAjaxUpdate(oSettings);\n\n    return;\n  }\n\n  if (aiDisplay.length !== 0) {\n    var iStart = bServerSide ? 0 : iDisplayStart;\n    var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\n    for (var j = iStart; j < iEnd; j++) {\n      var iDataIndex = aiDisplay[j];\n      var aoData = oSettings.aoData[iDataIndex];\n\n      if (aoData.nTr === null) {\n        _fnCreateTr(oSettings, iDataIndex);\n      }\n\n      var nRow = aoData.nTr;\n      /* Remove the old striping classes and then add the new one */\n\n      if (iStripes !== 0) {\n        var sStripe = asStripeClasses[iRowCount % iStripes];\n\n        if (aoData._sRowStripe != sStripe) {\n          $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);\n          aoData._sRowStripe = sStripe;\n        }\n      } // Row callback functions - might want to manipulate the row\n      // iRowCount and j are not currently documented. Are they at all\n      // useful?\n\n\n      _fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j, iDataIndex]);\n\n      anRows.push(nRow);\n      iRowCount++;\n    }\n  } else {\n    /* Table is empty - create a row with an empty message in it */\n    var sZero = oLang.sZeroRecords;\n\n    if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {\n      sZero = oLang.sLoadingRecords;\n    } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {\n      sZero = oLang.sEmptyTable;\n    }\n\n    anRows[0] = $('<tr/>', {\n      'class': iStripes ? asStripeClasses[0] : ''\n    }).append($('<td />', {\n      'valign': 'top',\n      'colSpan': _fnVisbleColumns(oSettings),\n      'class': oSettings.oClasses.sRowEmpty\n    }).html(sZero))[0];\n  }\n  /* Header and footer callbacks */\n\n\n  _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n  _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n  var body = $(oSettings.nTBody);\n  body.children().detach();\n  body.append($(anRows));\n  /* Call all required callback functions for the end of a draw */\n\n  _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);\n  /* Draw is complete, sorting and filtering must be as well */\n\n\n  oSettings.bSorted = false;\n  oSettings.bFiltered = false;\n  oSettings.bDrawing = false;\n}\n/**\n * Redraw the table - taking account of the various features which are enabled\n *  @param {object} oSettings dataTables settings object\n *  @param {boolean} [holdPosition] Keep the current paging position. By default\n *    the paging is reset to the first page\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnReDraw(settings, holdPosition) {\n  var features = settings.oFeatures,\n      sort = features.bSort,\n      filter = features.bFilter;\n\n  if (sort) {\n    _fnSort(settings);\n  }\n\n  if (filter) {\n    _fnFilterComplete(settings, settings.oPreviousSearch);\n  } else {\n    // No filtering, so we want to just use the display master\n    settings.aiDisplay = settings.aiDisplayMaster.slice();\n  }\n\n  if (holdPosition !== true) {\n    settings._iDisplayStart = 0;\n  } // Let any modules know about the draw hold position state (used by\n  // scrolling internally)\n\n\n  settings._drawHold = holdPosition;\n\n  _fnDraw(settings);\n\n  settings._drawHold = false;\n}\n/**\n * Add the options to the page HTML for the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnAddOptionsHtml(oSettings) {\n  var classes = oSettings.oClasses;\n  var table = $(oSettings.nTable);\n  var holding = $('<div/>').insertBefore(table); // Holding element for speed\n\n  var features = oSettings.oFeatures; // All DataTables are wrapped in a div\n\n  var insert = $('<div/>', {\n    id: oSettings.sTableId + '_wrapper',\n    'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)\n  });\n  oSettings.nHolding = holding[0];\n  oSettings.nTableWrapper = insert[0];\n  oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n  /* Loop over the user set positioning and place the elements as needed */\n\n  var aDom = oSettings.sDom.split('');\n  var featureNode, cOption, nNewNode, cNext, sAttr, j;\n\n  for (var i = 0; i < aDom.length; i++) {\n    featureNode = null;\n    cOption = aDom[i];\n\n    if (cOption == '<') {\n      /* New container div */\n      nNewNode = $('<div/>')[0];\n      /* Check to see if we should append an id and/or a class name to the container */\n\n      cNext = aDom[i + 1];\n\n      if (cNext == \"'\" || cNext == '\"') {\n        sAttr = \"\";\n        j = 2;\n\n        while (aDom[i + j] != cNext) {\n          sAttr += aDom[i + j];\n          j++;\n        }\n        /* Replace jQuery UI constants @todo depreciated */\n\n\n        if (sAttr == \"H\") {\n          sAttr = classes.sJUIHeader;\n        } else if (sAttr == \"F\") {\n          sAttr = classes.sJUIFooter;\n        }\n        /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n         * breaks the string into parts and applies them as needed\n         */\n\n\n        if (sAttr.indexOf('.') != -1) {\n          var aSplit = sAttr.split('.');\n          nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);\n          nNewNode.className = aSplit[1];\n        } else if (sAttr.charAt(0) == \"#\") {\n          nNewNode.id = sAttr.substr(1, sAttr.length - 1);\n        } else {\n          nNewNode.className = sAttr;\n        }\n\n        i += j;\n        /* Move along the position array */\n      }\n\n      insert.append(nNewNode);\n      insert = $(nNewNode);\n    } else if (cOption == '>') {\n      /* End container div */\n      insert = insert.parent();\n    } // @todo Move options into their own plugins?\n    else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {\n      /* Length */\n      featureNode = _fnFeatureHtmlLength(oSettings);\n    } else if (cOption == 'f' && features.bFilter) {\n      /* Filter */\n      featureNode = _fnFeatureHtmlFilter(oSettings);\n    } else if (cOption == 'r' && features.bProcessing) {\n      /* pRocessing */\n      featureNode = _fnFeatureHtmlProcessing(oSettings);\n    } else if (cOption == 't') {\n      /* Table */\n      featureNode = _fnFeatureHtmlTable(oSettings);\n    } else if (cOption == 'i' && features.bInfo) {\n      /* Info */\n      featureNode = _fnFeatureHtmlInfo(oSettings);\n    } else if (cOption == 'p' && features.bPaginate) {\n      /* Pagination */\n      featureNode = _fnFeatureHtmlPaginate(oSettings);\n    } else if (DataTable.ext.feature.length !== 0) {\n      /* Plug-in features */\n      var aoFeatures = DataTable.ext.feature;\n\n      for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {\n        if (cOption == aoFeatures[k].cFeature) {\n          featureNode = aoFeatures[k].fnInit(oSettings);\n          break;\n        }\n      }\n    }\n    /* Add to the 2D features array */\n\n\n    if (featureNode) {\n      var aanFeatures = oSettings.aanFeatures;\n\n      if (!aanFeatures[cOption]) {\n        aanFeatures[cOption] = [];\n      }\n\n      aanFeatures[cOption].push(featureNode);\n      insert.append(featureNode);\n    }\n  }\n  /* Built our DOM structure - replace the holding div with what we want */\n\n\n  holding.replaceWith(insert);\n  oSettings.nHolding = null;\n}\n/**\n * Use the DOM source to create up an array of header cells. The idea here is to\n * create a layout grid (array) of rows x columns, which contains a reference\n * to the cell that that point in the grid (regardless of col/rowspan), such that\n * any column / row could be removed and the new grid constructed\n *  @param array {object} aLayout Array to store the calculated layout in\n *  @param {node} nThead The header/footer element for the table\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnDetectHeader(aLayout, nThead) {\n  var nTrs = $(nThead).children('tr');\n  var nTr, nCell;\n  var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n  var bUnique;\n\n  var fnShiftCol = function (a, i, j) {\n    var k = a[i];\n\n    while (k[j]) {\n      j++;\n    }\n\n    return j;\n  };\n\n  aLayout.splice(0, aLayout.length);\n  /* We know how many rows there are in the layout - so prep it */\n\n  for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n    aLayout.push([]);\n  }\n  /* Calculate a layout array */\n\n\n  for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n    nTr = nTrs[i];\n    iColumn = 0;\n    /* For every cell in the row... */\n\n    nCell = nTr.firstChild;\n\n    while (nCell) {\n      if (nCell.nodeName.toUpperCase() == \"TD\" || nCell.nodeName.toUpperCase() == \"TH\") {\n        /* Get the col and rowspan attributes from the DOM and sanitise them */\n        iColspan = nCell.getAttribute('colspan') * 1;\n        iRowspan = nCell.getAttribute('rowspan') * 1;\n        iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;\n        iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;\n        /* There might be colspan cells already in this row, so shift our target\n         * accordingly\n         */\n\n        iColShifted = fnShiftCol(aLayout, i, iColumn);\n        /* Cache calculation for unique columns */\n\n        bUnique = iColspan === 1 ? true : false;\n        /* If there is col / rowspan, copy the information into the layout grid */\n\n        for (l = 0; l < iColspan; l++) {\n          for (k = 0; k < iRowspan; k++) {\n            aLayout[i + k][iColShifted + l] = {\n              \"cell\": nCell,\n              \"unique\": bUnique\n            };\n            aLayout[i + k].nTr = nTr;\n          }\n        }\n      }\n\n      nCell = nCell.nextSibling;\n    }\n  }\n}\n/**\n * Get an array of unique th elements, one for each column\n *  @param {object} oSettings dataTables settings object\n *  @param {node} nHeader automatically detect the layout from this node - optional\n *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n *  @returns array {node} aReturn list of unique th's\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnGetUniqueThs(oSettings, nHeader, aLayout) {\n  var aReturn = [];\n\n  if (!aLayout) {\n    aLayout = oSettings.aoHeader;\n\n    if (nHeader) {\n      aLayout = [];\n\n      _fnDetectHeader(aLayout, nHeader);\n    }\n  }\n\n  for (var i = 0, iLen = aLayout.length; i < iLen; i++) {\n    for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {\n      if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {\n        aReturn[j] = aLayout[i][j].cell;\n      }\n    }\n  }\n\n  return aReturn;\n}\n/**\n * Set the start position for draw\n *  @param {object} oSettings dataTables settings object\n */\n\n\nfunction _fnStart(oSettings) {\n  var bServerSide = _fnDataSource(oSettings) == 'ssp';\n  var iInitDisplayStart = oSettings.iInitDisplayStart; // Check and see if we have an initial draw position from state saving\n\n  if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {\n    oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;\n    oSettings.iInitDisplayStart = -1;\n  }\n}\n/**\n * Create an Ajax call based on the table's settings, taking into account that\n * parameters can have multiple forms, and backwards compatibility.\n *\n * @param {object} oSettings dataTables settings object\n * @param {array} data Data to send to the server, required by\n *     DataTables - may be augmented by developer callbacks\n * @param {function} fn Callback function to run when data is obtained\n */\n\n\nfunction _fnBuildAjax(oSettings, data, fn) {\n  // Compatibility with 1.9-, allow fnServerData and event to manipulate\n  _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]); // Convert to object based for 1.10+ if using the old array scheme which can\n  // come from server-side processing or serverParams\n\n\n  if (data && Array.isArray(data)) {\n    var tmp = {};\n    var rbracket = /(.*?)\\[\\]$/;\n    $.each(data, function (key, val) {\n      var match = val.name.match(rbracket);\n\n      if (match) {\n        // Support for arrays\n        var name = match[0];\n\n        if (!tmp[name]) {\n          tmp[name] = [];\n        }\n\n        tmp[name].push(val.value);\n      } else {\n        tmp[val.name] = val.value;\n      }\n    });\n    data = tmp;\n  }\n\n  var ajaxData;\n  var ajax = oSettings.ajax;\n  var instance = oSettings.oInstance;\n\n  var callback = function (json) {\n    var status = oSettings.jqXHR ? oSettings.jqXHR.status : null;\n\n    if (json === null || typeof status === 'number' && status == 204) {\n      json = {};\n\n      _fnAjaxDataSrc(oSettings, json, []);\n    }\n\n    var error = json.error || json.sError;\n\n    if (error) {\n      _fnLog(oSettings, 0, error);\n    }\n\n    oSettings.json = json;\n\n    _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);\n\n    fn(json);\n  };\n\n  if ($.isPlainObject(ajax) && ajax.data) {\n    ajaxData = ajax.data;\n    var newData = typeof ajaxData === 'function' ? ajaxData(data, oSettings) : // fn can manipulate data or return\n    ajaxData; // an object object or array to merge\n    // If the function returned something, use that alone\n\n    data = typeof ajaxData === 'function' && newData ? newData : $.extend(true, data, newData); // Remove the data property as we've resolved it already and don't want\n    // jQuery to do it again (it is restored at the end of the function)\n\n    delete ajax.data;\n  }\n\n  var baseAjax = {\n    \"data\": data,\n    \"success\": callback,\n    \"dataType\": \"json\",\n    \"cache\": false,\n    \"type\": oSettings.sServerMethod,\n    \"error\": function (xhr, error, thrown) {\n      var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);\n\n      if ($.inArray(true, ret) === -1) {\n        if (error == \"parsererror\") {\n          _fnLog(oSettings, 0, 'Invalid JSON response', 1);\n        } else if (xhr.readyState === 4) {\n          _fnLog(oSettings, 0, 'Ajax error', 7);\n        }\n      }\n\n      _fnProcessingDisplay(oSettings, false);\n    }\n  }; // Store the data submitted for the API\n\n  oSettings.oAjaxData = data; // Allow plug-ins and external processes to modify the data\n\n  _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);\n\n  if (oSettings.fnServerData) {\n    // DataTables 1.9- compatibility\n    oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {\n      // Need to convert back to 1.9 trad format\n      return {\n        name: key,\n        value: val\n      };\n    }), callback, oSettings);\n  } else if (oSettings.sAjaxSource || typeof ajax === 'string') {\n    // DataTables 1.9- compatibility\n    oSettings.jqXHR = $.ajax($.extend(baseAjax, {\n      url: ajax || oSettings.sAjaxSource\n    }));\n  } else if (typeof ajax === 'function') {\n    // Is a function - let the caller define what needs to be done\n    oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);\n  } else {\n    // Object to extend the base settings\n    oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax)); // Restore for next time around\n\n    ajax.data = ajaxData;\n  }\n}\n/**\n * Update the table using an Ajax call\n *  @param {object} settings dataTables settings object\n *  @returns {boolean} Block the table drawing or not\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnAjaxUpdate(settings) {\n  settings.iDraw++;\n\n  _fnProcessingDisplay(settings, true); // Keep track of drawHold state to handle scrolling after the Ajax call\n\n\n  var drawHold = settings._drawHold;\n\n  _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {\n    settings._drawHold = drawHold;\n\n    _fnAjaxUpdateDraw(settings, json);\n\n    settings._drawHold = false;\n  });\n}\n/**\n * Build up the parameters in an object needed for a server-side processing\n * request. Note that this is basically done twice, is different ways - a modern\n * method which is used by default in DataTables 1.10 which uses objects and\n * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n * the sAjaxSource option is used in the initialisation, or the legacyAjax\n * option is set.\n *  @param {object} oSettings dataTables settings object\n *  @returns {bool} block the table drawing or not\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnAjaxParameters(settings) {\n  var columns = settings.aoColumns,\n      columnCount = columns.length,\n      features = settings.oFeatures,\n      preSearch = settings.oPreviousSearch,\n      preColSearch = settings.aoPreSearchCols,\n      i,\n      data = [],\n      dataProp,\n      column,\n      columnSearch,\n      sort = _fnSortFlatten(settings),\n      displayStart = settings._iDisplayStart,\n      displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;\n\n  var param = function (name, value) {\n    data.push({\n      'name': name,\n      'value': value\n    });\n  }; // DataTables 1.9- compatible method\n\n\n  param('sEcho', settings.iDraw);\n  param('iColumns', columnCount);\n  param('sColumns', _pluck(columns, 'sName').join(','));\n  param('iDisplayStart', displayStart);\n  param('iDisplayLength', displayLength); // DataTables 1.10+ method\n\n  var d = {\n    draw: settings.iDraw,\n    columns: [],\n    order: [],\n    start: displayStart,\n    length: displayLength,\n    search: {\n      value: preSearch.sSearch,\n      regex: preSearch.bRegex\n    }\n  };\n\n  for (i = 0; i < columnCount; i++) {\n    column = columns[i];\n    columnSearch = preColSearch[i];\n    dataProp = typeof column.mData == \"function\" ? 'function' : column.mData;\n    d.columns.push({\n      data: dataProp,\n      name: column.sName,\n      searchable: column.bSearchable,\n      orderable: column.bSortable,\n      search: {\n        value: columnSearch.sSearch,\n        regex: columnSearch.bRegex\n      }\n    });\n    param(\"mDataProp_\" + i, dataProp);\n\n    if (features.bFilter) {\n      param('sSearch_' + i, columnSearch.sSearch);\n      param('bRegex_' + i, columnSearch.bRegex);\n      param('bSearchable_' + i, column.bSearchable);\n    }\n\n    if (features.bSort) {\n      param('bSortable_' + i, column.bSortable);\n    }\n  }\n\n  if (features.bFilter) {\n    param('sSearch', preSearch.sSearch);\n    param('bRegex', preSearch.bRegex);\n  }\n\n  if (features.bSort) {\n    $.each(sort, function (i, val) {\n      d.order.push({\n        column: val.col,\n        dir: val.dir\n      });\n      param('iSortCol_' + i, val.col);\n      param('sSortDir_' + i, val.dir);\n    });\n    param('iSortingCols', sort.length);\n  } // If the legacy.ajax parameter is null, then we automatically decide which\n  // form to use, based on sAjaxSource\n\n\n  var legacy = DataTable.ext.legacy.ajax;\n\n  if (legacy === null) {\n    return settings.sAjaxSource ? data : d;\n  } // Otherwise, if legacy has been specified then we use that to decide on the\n  // form\n\n\n  return legacy ? data : d;\n}\n/**\n * Data the data from the server (nuking the old) and redraw the table\n *  @param {object} oSettings dataTables settings object\n *  @param {object} json json data return from the server.\n *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n *  @param {array} json.aaData The data to display on this page\n *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnAjaxUpdateDraw(settings, json) {\n  // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n  // Support both\n  var compat = function (old, modern) {\n    return json[old] !== undefined ? json[old] : json[modern];\n  };\n\n  var data = _fnAjaxDataSrc(settings, json);\n\n  var draw = compat('sEcho', 'draw');\n  var recordsTotal = compat('iTotalRecords', 'recordsTotal');\n  var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');\n\n  if (draw !== undefined) {\n    // Protect against out of sequence returns\n    if (draw * 1 < settings.iDraw) {\n      return;\n    }\n\n    settings.iDraw = draw * 1;\n  } // No data in returned object, so rather than an array, we show an empty table\n\n\n  if (!data) {\n    data = [];\n  }\n\n  _fnClearTable(settings);\n\n  settings._iRecordsTotal = parseInt(recordsTotal, 10);\n  settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\n  for (var i = 0, ien = data.length; i < ien; i++) {\n    _fnAddData(settings, data[i]);\n  }\n\n  settings.aiDisplay = settings.aiDisplayMaster.slice();\n\n  _fnDraw(settings, true);\n\n  if (!settings._bInitComplete) {\n    _fnInitComplete(settings, json);\n  }\n\n  _fnProcessingDisplay(settings, false);\n}\n/**\n * Get the data from the JSON data source to use for drawing a table. Using\n * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n * source object, or from a processing function.\n *  @param {object} oSettings dataTables settings object\n *  @param  {object} json Data source object / array from the server\n *  @return {array} Array of data to use\n */\n\n\nfunction _fnAjaxDataSrc(oSettings, json, write) {\n  var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp; // Compatibility with 1.9-.\n\n  if (!write) {\n    if (dataSrc === 'data') {\n      // If the default, then we still want to support the old style, and safely ignore\n      // it if possible\n      return json.aaData || json[dataSrc];\n    }\n\n    return dataSrc !== \"\" ? _fnGetObjectDataFn(dataSrc)(json) : json;\n  } // set\n\n\n  _fnSetObjectDataFn(dataSrc)(json, write);\n}\n/**\n * Generate the node required for filtering text\n *  @returns {node} Filter control element\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFeatureHtmlFilter(settings) {\n  var classes = settings.oClasses;\n  var tableId = settings.sTableId;\n  var language = settings.oLanguage;\n  var previousSearch = settings.oPreviousSearch;\n  var features = settings.aanFeatures;\n  var input = '<input type=\"search\" class=\"' + classes.sFilterInput + '\"/>';\n  var str = language.sSearch;\n  str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;\n  var filter = $('<div/>', {\n    'id': !features.f ? tableId + '_filter' : null,\n    'class': classes.sFilter\n  }).append($('<label/>').append(str));\n\n  var searchFn = function (event) {\n    /* Update all other filter input elements for the new display */\n    var n = features.f;\n    var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\n    if (previousSearch['return'] && event.key !== \"Enter\") {\n      return;\n    }\n    /* Now do the filter */\n\n\n    if (val != previousSearch.sSearch) {\n      _fnFilterComplete(settings, {\n        \"sSearch\": val,\n        \"bRegex\": previousSearch.bRegex,\n        \"bSmart\": previousSearch.bSmart,\n        \"bCaseInsensitive\": previousSearch.bCaseInsensitive,\n        \"return\": previousSearch['return']\n      }); // Need to redraw, without resorting\n\n\n      settings._iDisplayStart = 0;\n\n      _fnDraw(settings);\n    }\n  };\n\n  var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;\n  var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).on('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).on('mouseup.DT', function (e) {\n    // Edge fix! Edge 17 does not trigger anything other than mouse events when clicking\n    // on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`\n    // checks the value to see if it has changed. In other browsers it won't have.\n    setTimeout(function () {\n      searchFn.call(jqFilter[0], e);\n    }, 10);\n  }).on('keypress.DT', function (e) {\n    /* Prevent form submission */\n    if (e.keyCode == 13) {\n      return false;\n    }\n  }).attr('aria-controls', tableId); // Update the input elements whenever the table is filtered\n\n  $(settings.nTable).on('search.dt.DT', function (ev, s) {\n    if (settings === s) {\n      // IE9 throws an 'unknown error' if document.activeElement is used\n      // inside an iframe or frame...\n      try {\n        if (jqFilter[0] !== document.activeElement) {\n          jqFilter.val(previousSearch.sSearch);\n        }\n      } catch (e) {}\n    }\n  });\n  return filter[0];\n}\n/**\n * Filter the table using both the global filter and column based filtering\n *  @param {object} oSettings dataTables settings object\n *  @param {object} oSearch search information\n *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFilterComplete(oSettings, oInput, iForce) {\n  var oPrevSearch = oSettings.oPreviousSearch;\n  var aoPrevSearch = oSettings.aoPreSearchCols;\n\n  var fnSaveFilter = function (oFilter) {\n    /* Save the filtering values */\n    oPrevSearch.sSearch = oFilter.sSearch;\n    oPrevSearch.bRegex = oFilter.bRegex;\n    oPrevSearch.bSmart = oFilter.bSmart;\n    oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n    oPrevSearch['return'] = oFilter['return'];\n  };\n\n  var fnRegex = function (o) {\n    // Backwards compatibility with the bEscapeRegex option\n    return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n  }; // Resolve any column types that are unknown due to addition or invalidation\n  // @todo As per sort - can this be moved into an event handler?\n\n\n  _fnColumnTypes(oSettings);\n  /* In server-side processing all filtering is done by the server, so no point hanging around here */\n\n\n  if (_fnDataSource(oSettings) != 'ssp') {\n    /* Global filter */\n    _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);\n\n    fnSaveFilter(oInput);\n    /* Now do the individual column filter */\n\n    for (var i = 0; i < aoPrevSearch.length; i++) {\n      _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);\n    }\n    /* Custom filtering */\n\n\n    _fnFilterCustom(oSettings);\n  } else {\n    fnSaveFilter(oInput);\n  }\n  /* Tell the draw function we have been filtering */\n\n\n  oSettings.bFiltered = true;\n\n  _fnCallbackFire(oSettings, null, 'search', [oSettings]);\n}\n/**\n * Apply custom filtering functions\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFilterCustom(settings) {\n  var filters = DataTable.ext.search;\n  var displayRows = settings.aiDisplay;\n  var row, rowIdx;\n\n  for (var i = 0, ien = filters.length; i < ien; i++) {\n    var rows = []; // Loop over each row and see if it should be included\n\n    for (var j = 0, jen = displayRows.length; j < jen; j++) {\n      rowIdx = displayRows[j];\n      row = settings.aoData[rowIdx];\n\n      if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {\n        rows.push(rowIdx);\n      }\n    } // So the array reference doesn't break set the results into the\n    // existing array\n\n\n    displayRows.length = 0;\n    $.merge(displayRows, rows);\n  }\n}\n/**\n * Filter the table on a per-column basis\n *  @param {object} oSettings dataTables settings object\n *  @param {string} sInput string to filter on\n *  @param {int} iColumn column to filter\n *  @param {bool} bRegex treat search string as a regular expression or not\n *  @param {bool} bSmart use smart filtering or not\n *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {\n  if (searchStr === '') {\n    return;\n  }\n\n  var data;\n  var out = [];\n  var display = settings.aiDisplay;\n\n  var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);\n\n  for (var i = 0; i < display.length; i++) {\n    data = settings.aoData[display[i]]._aFilterData[colIdx];\n\n    if (rpSearch.test(data)) {\n      out.push(display[i]);\n    }\n  }\n\n  settings.aiDisplay = out;\n}\n/**\n * Filter the data table based on user input and draw the table\n *  @param {object} settings dataTables settings object\n *  @param {string} input string to filter on\n *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n *  @param {bool} regex treat as a regular expression or not\n *  @param {bool} smart perform smart filtering or not\n *  @param {bool} caseInsensitive Do case insensitive matching or not\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFilter(settings, input, force, regex, smart, caseInsensitive) {\n  var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);\n\n  var prevSearch = settings.oPreviousSearch.sSearch;\n  var displayMaster = settings.aiDisplayMaster;\n  var display, invalidated, i;\n  var filtered = []; // Need to take account of custom filtering functions - always filter\n\n  if (DataTable.ext.search.length !== 0) {\n    force = true;\n  } // Check if any of the rows were invalidated\n\n\n  invalidated = _fnFilterData(settings); // If the input is blank - we just want the full data set\n\n  if (input.length <= 0) {\n    settings.aiDisplay = displayMaster.slice();\n  } else {\n    // New search - start from the master array\n    if (invalidated || force || regex || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted // On resort, the display master needs to be\n    // re-filtered since indexes will have changed\n    ) {\n      settings.aiDisplay = displayMaster.slice();\n    } // Search the display array\n\n\n    display = settings.aiDisplay;\n\n    for (i = 0; i < display.length; i++) {\n      if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {\n        filtered.push(display[i]);\n      }\n    }\n\n    settings.aiDisplay = filtered;\n  }\n}\n/**\n * Build a regular expression object suitable for searching a table\n *  @param {string} sSearch string to search for\n *  @param {bool} bRegex treat as a regular expression or not\n *  @param {bool} bSmart perform smart filtering or not\n *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n *  @returns {RegExp} constructed object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {\n  search = regex ? search : _fnEscapeRegex(search);\n\n  if (smart) {\n    /* For smart filtering we want to allow the search to work regardless of\n     * word order. We also want double quoted text to be preserved, so word\n     * order is important - a la google. So this is what we want to\n     * generate:\n     * \n     * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n     */\n    var a = $.map(search.match(/[\"\\u201C][^\"\\u201D]+[\"\\u201D]|[^ ]+/g) || [''], function (word) {\n      if (word.charAt(0) === '\"') {\n        var m = word.match(/^\"(.*)\"$/);\n        word = m ? m[1] : word;\n      } else if (word.charAt(0) === '\\u201C') {\n        var m = word.match(/^\\u201C(.*)\\u201D$/);\n        word = m ? m[1] : word;\n      }\n\n      return word.replace('\"', '');\n    });\n    search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';\n  }\n\n  return new RegExp(search, caseInsensitive ? 'i' : '');\n}\n/**\n * Escape a string such that it can be used in a regular expression\n *  @param {string} sVal string to escape\n *  @returns {string} escaped string\n *  @memberof DataTable#oApi\n */\n\n\nvar _fnEscapeRegex = DataTable.util.escapeRegex;\nvar __filter_div = $('<div>')[0];\n\nvar __filter_div_textContent = __filter_div.textContent !== undefined; // Update the filtering data for each row if needed (by invalidation or first run)\n\n\nfunction _fnFilterData(settings) {\n  var columns = settings.aoColumns;\n  var column;\n  var i, j, ien, jen, filterData, cellData, row;\n  var wasInvalidated = false;\n\n  for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n    row = settings.aoData[i];\n\n    if (!row._aFilterData) {\n      filterData = [];\n\n      for (j = 0, jen = columns.length; j < jen; j++) {\n        column = columns[j];\n\n        if (column.bSearchable) {\n          cellData = _fnGetCellData(settings, i, j, 'filter'); // Search in DataTables 1.10 is string based. In 1.11 this\n          // should be altered to also allow strict type checking.\n\n          if (cellData === null) {\n            cellData = '';\n          }\n\n          if (typeof cellData !== 'string' && cellData.toString) {\n            cellData = cellData.toString();\n          }\n        } else {\n          cellData = '';\n        } // If it looks like there is an HTML entity in the string,\n        // attempt to decode it so sorting works as expected. Note that\n        // we could use a single line of jQuery to do this, but the DOM\n        // method used here is much faster https://jsperf.com/html-decode\n\n\n        if (cellData.indexOf && cellData.indexOf('&') !== -1) {\n          __filter_div.innerHTML = cellData;\n          cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;\n        }\n\n        if (cellData.replace) {\n          cellData = cellData.replace(/[\\r\\n\\u2028]/g, '');\n        }\n\n        filterData.push(cellData);\n      }\n\n      row._aFilterData = filterData;\n      row._sFilterRow = filterData.join('  ');\n      wasInvalidated = true;\n    }\n  }\n\n  return wasInvalidated;\n}\n/**\n * Convert from the internal Hungarian notation to camelCase for external\n * interaction\n *  @param {object} obj Object to convert\n *  @returns {object} Inverted object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnSearchToCamel(obj) {\n  return {\n    search: obj.sSearch,\n    smart: obj.bSmart,\n    regex: obj.bRegex,\n    caseInsensitive: obj.bCaseInsensitive\n  };\n}\n/**\n * Convert from camelCase notation to the internal Hungarian. We could use the\n * Hungarian convert function here, but this is cleaner\n *  @param {object} obj Object to convert\n *  @returns {object} Inverted object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnSearchToHung(obj) {\n  return {\n    sSearch: obj.search,\n    bSmart: obj.smart,\n    bRegex: obj.regex,\n    bCaseInsensitive: obj.caseInsensitive\n  };\n}\n/**\n * Generate the node required for the info display\n *  @param {object} oSettings dataTables settings object\n *  @returns {node} Information element\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFeatureHtmlInfo(settings) {\n  var tid = settings.sTableId,\n      nodes = settings.aanFeatures.i,\n      n = $('<div/>', {\n    'class': settings.oClasses.sInfo,\n    'id': !nodes ? tid + '_info' : null\n  });\n\n  if (!nodes) {\n    // Update display on each draw\n    settings.aoDrawCallback.push({\n      \"fn\": _fnUpdateInfo,\n      \"sName\": \"information\"\n    });\n    n.attr('role', 'status').attr('aria-live', 'polite'); // Table is described by our info div\n\n    $(settings.nTable).attr('aria-describedby', tid + '_info');\n  }\n\n  return n[0];\n}\n/**\n * Update the information elements in the display\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnUpdateInfo(settings) {\n  /* Show information about the table */\n  var nodes = settings.aanFeatures.i;\n\n  if (nodes.length === 0) {\n    return;\n  }\n\n  var lang = settings.oLanguage,\n      start = settings._iDisplayStart + 1,\n      end = settings.fnDisplayEnd(),\n      max = settings.fnRecordsTotal(),\n      total = settings.fnRecordsDisplay(),\n      out = total ? lang.sInfo : lang.sInfoEmpty;\n\n  if (total !== max) {\n    /* Record set after filtering */\n    out += ' ' + lang.sInfoFiltered;\n  } // Convert the macros\n\n\n  out += lang.sInfoPostFix;\n  out = _fnInfoMacros(settings, out);\n  var callback = lang.fnInfoCallback;\n\n  if (callback !== null) {\n    out = callback.call(settings.oInstance, settings, start, end, max, total, out);\n  }\n\n  $(nodes).html(out);\n}\n\nfunction _fnInfoMacros(settings, str) {\n  // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n  // internally\n  var formatter = settings.fnFormatNumber,\n      start = settings._iDisplayStart + 1,\n      len = settings._iDisplayLength,\n      vis = settings.fnRecordsDisplay(),\n      all = len === -1;\n  return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));\n}\n/**\n * Draw the table for the first time, adding all required features\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnInitialise(settings) {\n  var i,\n      iLen,\n      iAjaxStart = settings.iInitDisplayStart;\n  var columns = settings.aoColumns,\n      column;\n  var features = settings.oFeatures;\n  var deferLoading = settings.bDeferLoading; // value modified by the draw\n\n  /* Ensure that the table data is fully initialised */\n\n  if (!settings.bInitialised) {\n    setTimeout(function () {\n      _fnInitialise(settings);\n    }, 200);\n    return;\n  }\n  /* Show the display HTML options */\n\n\n  _fnAddOptionsHtml(settings);\n  /* Build and draw the header / footer for the table */\n\n\n  _fnBuildHead(settings);\n\n  _fnDrawHead(settings, settings.aoHeader);\n\n  _fnDrawHead(settings, settings.aoFooter);\n  /* Okay to show that something is going on now */\n\n\n  _fnProcessingDisplay(settings, true);\n  /* Calculate sizes for columns */\n\n\n  if (features.bAutoWidth) {\n    _fnCalculateColumnWidths(settings);\n  }\n\n  for (i = 0, iLen = columns.length; i < iLen; i++) {\n    column = columns[i];\n\n    if (column.sWidth) {\n      column.nTh.style.width = _fnStringToCss(column.sWidth);\n    }\n  }\n\n  _fnCallbackFire(settings, null, 'preInit', [settings]); // If there is default sorting required - let's do it. The sort function\n  // will do the drawing for us. Otherwise we draw the table regardless of the\n  // Ajax source - this allows the table to look initialised for Ajax sourcing\n  // data (show 'loading' message possibly)\n\n\n  _fnReDraw(settings); // Server-side processing init complete is done by _fnAjaxUpdateDraw\n\n\n  var dataSrc = _fnDataSource(settings);\n\n  if (dataSrc != 'ssp' || deferLoading) {\n    // if there is an ajax source load the data\n    if (dataSrc == 'ajax') {\n      _fnBuildAjax(settings, [], function (json) {\n        var aData = _fnAjaxDataSrc(settings, json); // Got the data - add it to the table\n\n\n        for (i = 0; i < aData.length; i++) {\n          _fnAddData(settings, aData[i]);\n        } // Reset the init display for cookie saving. We've already done\n        // a filter, and therefore cleared it before. So we need to make\n        // it appear 'fresh'\n\n\n        settings.iInitDisplayStart = iAjaxStart;\n\n        _fnReDraw(settings);\n\n        _fnProcessingDisplay(settings, false);\n\n        _fnInitComplete(settings, json);\n      }, settings);\n    } else {\n      _fnProcessingDisplay(settings, false);\n\n      _fnInitComplete(settings);\n    }\n  }\n}\n/**\n * Draw the table for the first time, adding all required features\n *  @param {object} oSettings dataTables settings object\n *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n *    with client-side processing (optional)\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnInitComplete(settings, json) {\n  settings._bInitComplete = true; // When data was added after the initialisation (data or Ajax) we need to\n  // calculate the column sizing\n\n  if (json || settings.oInit.aaData) {\n    _fnAdjustColumnSizing(settings);\n  }\n\n  _fnCallbackFire(settings, null, 'plugin-init', [settings, json]);\n\n  _fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);\n}\n\nfunction _fnLengthChange(settings, val) {\n  var len = parseInt(val, 10);\n  settings._iDisplayLength = len;\n\n  _fnLengthOverflow(settings); // Fire length change event\n\n\n  _fnCallbackFire(settings, null, 'length', [settings, len]);\n}\n/**\n * Generate the node required for user display length changing\n *  @param {object} settings dataTables settings object\n *  @returns {node} Display length feature node\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFeatureHtmlLength(settings) {\n  var classes = settings.oClasses,\n      tableId = settings.sTableId,\n      menu = settings.aLengthMenu,\n      d2 = Array.isArray(menu[0]),\n      lengths = d2 ? menu[0] : menu,\n      language = d2 ? menu[1] : menu;\n  var select = $('<select/>', {\n    'name': tableId + '_length',\n    'aria-controls': tableId,\n    'class': classes.sLengthSelect\n  });\n\n  for (var i = 0, ien = lengths.length; i < ien; i++) {\n    select[0][i] = new Option(typeof language[i] === 'number' ? settings.fnFormatNumber(language[i]) : language[i], lengths[i]);\n  }\n\n  var div = $('<div><label/></div>').addClass(classes.sLength);\n\n  if (!settings.aanFeatures.l) {\n    div[0].id = tableId + '_length';\n  }\n\n  div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML)); // Can't use `select` variable as user might provide their own and the\n  // reference is broken by the use of outerHTML\n\n  $('select', div).val(settings._iDisplayLength).on('change.DT', function (e) {\n    _fnLengthChange(settings, $(this).val());\n\n    _fnDraw(settings);\n  }); // Update node value whenever anything changes the table's length\n\n  $(settings.nTable).on('length.dt.DT', function (e, s, len) {\n    if (settings === s) {\n      $('select', div).val(len);\n    }\n  });\n  return div[0];\n}\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Note that most of the paging logic is done in\n * DataTable.ext.pager\n */\n\n/**\n * Generate the node required for default pagination\n *  @param {object} oSettings dataTables settings object\n *  @returns {node} Pagination feature node\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFeatureHtmlPaginate(settings) {\n  var type = settings.sPaginationType,\n      plugin = DataTable.ext.pager[type],\n      modern = typeof plugin === 'function',\n      redraw = function (settings) {\n    _fnDraw(settings);\n  },\n      node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],\n      features = settings.aanFeatures;\n\n  if (!modern) {\n    plugin.fnInit(settings, node, redraw);\n  }\n  /* Add a draw callback for the pagination on first instance, to update the paging display */\n\n\n  if (!features.p) {\n    node.id = settings.sTableId + '_paginate';\n    settings.aoDrawCallback.push({\n      \"fn\": function (settings) {\n        if (modern) {\n          var start = settings._iDisplayStart,\n              len = settings._iDisplayLength,\n              visRecords = settings.fnRecordsDisplay(),\n              all = len === -1,\n              page = all ? 0 : Math.ceil(start / len),\n              pages = all ? 1 : Math.ceil(visRecords / len),\n              buttons = plugin(page, pages),\n              i,\n              ien;\n\n          for (i = 0, ien = features.p.length; i < ien; i++) {\n            _fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);\n          }\n        } else {\n          plugin.fnUpdate(settings, redraw);\n        }\n      },\n      \"sName\": \"pagination\"\n    });\n  }\n\n  return node;\n}\n/**\n * Alter the display settings to change the page\n *  @param {object} settings DataTables settings object\n *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n *    \"next\" or \"last\" or page number to jump to (integer)\n *  @param [bool] redraw Automatically draw the update or not\n *  @returns {bool} true page has changed, false - no change\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnPageChange(settings, action, redraw) {\n  var start = settings._iDisplayStart,\n      len = settings._iDisplayLength,\n      records = settings.fnRecordsDisplay();\n\n  if (records === 0 || len === -1) {\n    start = 0;\n  } else if (typeof action === \"number\") {\n    start = action * len;\n\n    if (start > records) {\n      start = 0;\n    }\n  } else if (action == \"first\") {\n    start = 0;\n  } else if (action == \"previous\") {\n    start = len >= 0 ? start - len : 0;\n\n    if (start < 0) {\n      start = 0;\n    }\n  } else if (action == \"next\") {\n    if (start + len < records) {\n      start += len;\n    }\n  } else if (action == \"last\") {\n    start = Math.floor((records - 1) / len) * len;\n  } else {\n    _fnLog(settings, 0, \"Unknown paging action: \" + action, 5);\n  }\n\n  var changed = settings._iDisplayStart !== start;\n  settings._iDisplayStart = start;\n\n  if (changed) {\n    _fnCallbackFire(settings, null, 'page', [settings]);\n\n    if (redraw) {\n      _fnDraw(settings);\n    }\n  } else {\n    // No change event - paging was called, but no change\n    _fnCallbackFire(settings, null, 'page-nc', [settings]);\n  }\n\n  return changed;\n}\n/**\n * Generate the node required for the processing node\n *  @param {object} settings dataTables settings object\n *  @returns {node} Processing element\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFeatureHtmlProcessing(settings) {\n  return $('<div/>', {\n    'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,\n    'class': settings.oClasses.sProcessing,\n    'role': 'status'\n  }).html(settings.oLanguage.sProcessing).append('<div><div></div><div></div><div></div><div></div></div>').insertBefore(settings.nTable)[0];\n}\n/**\n * Display or hide the processing indicator\n *  @param {object} settings dataTables settings object\n *  @param {bool} show Show the processing indicator (true) or not (false)\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnProcessingDisplay(settings, show) {\n  if (settings.oFeatures.bProcessing) {\n    $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');\n  }\n\n  _fnCallbackFire(settings, null, 'processing', [settings, show]);\n}\n/**\n * Add any control elements for the table - specifically scrolling\n *  @param {object} settings dataTables settings object\n *  @returns {node} Node to add to the DOM\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnFeatureHtmlTable(settings) {\n  var table = $(settings.nTable); // Scrolling from here on in\n\n  var scroll = settings.oScroll;\n\n  if (scroll.sX === '' && scroll.sY === '') {\n    return settings.nTable;\n  }\n\n  var scrollX = scroll.sX;\n  var scrollY = scroll.sY;\n  var classes = settings.oClasses;\n  var caption = table.children('caption');\n  var captionSide = caption.length ? caption[0]._captionSide : null;\n  var headerClone = $(table[0].cloneNode(false));\n  var footerClone = $(table[0].cloneNode(false));\n  var footer = table.children('tfoot');\n  var _div = '<div/>';\n\n  var size = function (s) {\n    return !s ? null : _fnStringToCss(s);\n  };\n\n  if (!footer.length) {\n    footer = null;\n  }\n  /*\n   * The HTML structure that we want to generate in this function is:\n   *  div - scroller\n   *    div - scroll head\n   *      div - scroll head inner\n   *        table - scroll head table\n   *          thead - thead\n   *    div - scroll body\n   *      table - table (master table)\n   *        thead - thead clone for sizing\n   *        tbody - tbody\n   *    div - scroll foot\n   *      div - scroll foot inner\n   *        table - scroll foot table\n   *          tfoot - tfoot\n   */\n\n\n  var scroller = $(_div, {\n    'class': classes.sScrollWrapper\n  }).append($(_div, {\n    'class': classes.sScrollHead\n  }).css({\n    overflow: 'hidden',\n    position: 'relative',\n    border: 0,\n    width: scrollX ? size(scrollX) : '100%'\n  }).append($(_div, {\n    'class': classes.sScrollHeadInner\n  }).css({\n    'box-sizing': 'content-box',\n    width: scroll.sXInner || '100%'\n  }).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, {\n    'class': classes.sScrollBody\n  }).css({\n    position: 'relative',\n    overflow: 'auto',\n    width: size(scrollX)\n  }).append(table));\n\n  if (footer) {\n    scroller.append($(_div, {\n      'class': classes.sScrollFoot\n    }).css({\n      overflow: 'hidden',\n      border: 0,\n      width: scrollX ? size(scrollX) : '100%'\n    }).append($(_div, {\n      'class': classes.sScrollFootInner\n    }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));\n  }\n\n  var children = scroller.children();\n  var scrollHead = children[0];\n  var scrollBody = children[1];\n  var scrollFoot = footer ? children[2] : null; // When the body is scrolled, then we also want to scroll the headers\n\n  if (scrollX) {\n    $(scrollBody).on('scroll.DT', function (e) {\n      var scrollLeft = this.scrollLeft;\n      scrollHead.scrollLeft = scrollLeft;\n\n      if (footer) {\n        scrollFoot.scrollLeft = scrollLeft;\n      }\n    });\n  }\n\n  $(scrollBody).css('max-height', scrollY);\n\n  if (!scroll.bCollapse) {\n    $(scrollBody).css('height', scrollY);\n  }\n\n  settings.nScrollHead = scrollHead;\n  settings.nScrollBody = scrollBody;\n  settings.nScrollFoot = scrollFoot; // On redraw - align columns\n\n  settings.aoDrawCallback.push({\n    \"fn\": _fnScrollDraw,\n    \"sName\": \"scrolling\"\n  });\n  return scroller[0];\n}\n/**\n * Update the header, footer and body tables for resizing - i.e. column\n * alignment.\n *\n * Welcome to the most horrible function DataTables. The process that this\n * function follows is basically:\n *   1. Re-create the table inside the scrolling div\n *   2. Take live measurements from the DOM\n *   3. Apply the measurements to align the columns\n *   4. Clean up\n *\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnScrollDraw(settings) {\n  // Given that this is such a monster function, a lot of variables are use\n  // to try and keep the minimised size as small as possible\n  var scroll = settings.oScroll,\n      scrollX = scroll.sX,\n      scrollXInner = scroll.sXInner,\n      scrollY = scroll.sY,\n      barWidth = scroll.iBarWidth,\n      divHeader = $(settings.nScrollHead),\n      divHeaderStyle = divHeader[0].style,\n      divHeaderInner = divHeader.children('div'),\n      divHeaderInnerStyle = divHeaderInner[0].style,\n      divHeaderTable = divHeaderInner.children('table'),\n      divBodyEl = settings.nScrollBody,\n      divBody = $(divBodyEl),\n      divBodyStyle = divBodyEl.style,\n      divFooter = $(settings.nScrollFoot),\n      divFooterInner = divFooter.children('div'),\n      divFooterTable = divFooterInner.children('table'),\n      header = $(settings.nTHead),\n      table = $(settings.nTable),\n      tableEl = table[0],\n      tableStyle = tableEl.style,\n      footer = settings.nTFoot ? $(settings.nTFoot) : null,\n      browser = settings.oBrowser,\n      ie67 = browser.bScrollOversize,\n      dtHeaderCells = _pluck(settings.aoColumns, 'nTh'),\n      headerTrgEls,\n      footerTrgEls,\n      headerSrcEls,\n      footerSrcEls,\n      headerCopy,\n      footerCopy,\n      headerWidths = [],\n      footerWidths = [],\n      headerContent = [],\n      footerContent = [],\n      idx,\n      correction,\n      sanityWidth,\n      zeroOut = function (nSizer) {\n    var style = nSizer.style;\n    style.paddingTop = \"0\";\n    style.paddingBottom = \"0\";\n    style.borderTopWidth = \"0\";\n    style.borderBottomWidth = \"0\";\n    style.height = 0;\n  }; // If the scrollbar visibility has changed from the last draw, we need to\n  // adjust the column sizes as the table width will have changed to account\n  // for the scrollbar\n\n\n  var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\n  if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {\n    settings.scrollBarVis = scrollBarVis;\n\n    _fnAdjustColumnSizing(settings);\n\n    return; // adjust column sizing will call this function again\n  } else {\n    settings.scrollBarVis = scrollBarVis;\n  }\n  /*\n   * 1. Re-create the table inside the scrolling div\n   */\n  // Remove the old minimised thead and tfoot elements in the inner table\n\n\n  table.children('thead, tfoot').remove();\n\n  if (footer) {\n    footerCopy = footer.clone().prependTo(table);\n    footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\n    footerSrcEls = footerCopy.find('tr');\n    footerCopy.find('[id]').removeAttr('id');\n  } // Clone the current header and footer elements and then place it into the inner table\n\n\n  headerCopy = header.clone().prependTo(table);\n  headerTrgEls = header.find('tr'); // original header is in its own table\n\n  headerSrcEls = headerCopy.find('tr');\n  headerCopy.find('th, td').removeAttr('tabindex');\n  headerCopy.find('[id]').removeAttr('id');\n  /*\n   * 2. Take live measurements from the DOM - do not alter the DOM itself!\n   */\n  // Remove old sizing and apply the calculated column widths\n  // Get the unique column headers in the newly created (cloned) header. We want to apply the\n  // calculated sizes to this header\n\n  if (!scrollX) {\n    divBodyStyle.width = '100%';\n    divHeader[0].style.width = '100%';\n  }\n\n  $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {\n    idx = _fnVisibleToColumnIndex(settings, i);\n    el.style.width = settings.aoColumns[idx].sWidth;\n  });\n\n  if (footer) {\n    _fnApplyToChildren(function (n) {\n      n.style.width = \"\";\n    }, footerSrcEls);\n  } // Size the table as a whole\n\n\n  sanityWidth = table.outerWidth();\n\n  if (scrollX === \"\") {\n    // No x scrolling\n    tableStyle.width = \"100%\"; // IE7 will make the width of the table when 100% include the scrollbar\n    // - which is shouldn't. When there is a scrollbar we need to take this\n    // into account.\n\n    if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")) {\n      tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);\n    } // Recalculate the sanity width\n\n\n    sanityWidth = table.outerWidth();\n  } else if (scrollXInner !== \"\") {\n    // legacy x scroll inner has been given - use it\n    tableStyle.width = _fnStringToCss(scrollXInner); // Recalculate the sanity width\n\n    sanityWidth = table.outerWidth();\n  } // Hidden header should have zero height, so remove padding and borders. Then\n  // set the width based on the real headers\n  // Apply all styles in one pass\n\n\n  _fnApplyToChildren(zeroOut, headerSrcEls); // Read all widths in next pass\n\n\n  _fnApplyToChildren(function (nSizer) {\n    var style = window.getComputedStyle ? window.getComputedStyle(nSizer).width : _fnStringToCss($(nSizer).width());\n    headerContent.push(nSizer.innerHTML);\n    headerWidths.push(style);\n  }, headerSrcEls); // Apply all widths in final pass\n\n\n  _fnApplyToChildren(function (nToSize, i) {\n    nToSize.style.width = headerWidths[i];\n  }, headerTrgEls);\n\n  $(headerSrcEls).css('height', 0);\n  /* Same again with the footer if we have one */\n\n  if (footer) {\n    _fnApplyToChildren(zeroOut, footerSrcEls);\n\n    _fnApplyToChildren(function (nSizer) {\n      footerContent.push(nSizer.innerHTML);\n      footerWidths.push(_fnStringToCss($(nSizer).css('width')));\n    }, footerSrcEls);\n\n    _fnApplyToChildren(function (nToSize, i) {\n      nToSize.style.width = footerWidths[i];\n    }, footerTrgEls);\n\n    $(footerSrcEls).height(0);\n  }\n  /*\n   * 3. Apply the measurements\n   */\n  // \"Hide\" the header and footer that we used for the sizing. We need to keep\n  // the content of the cell so that the width applied to the header and body\n  // both match, but we want to hide it completely. We want to also fix their\n  // width to what they currently are\n\n\n  _fnApplyToChildren(function (nSizer, i) {\n    nSizer.innerHTML = '<div class=\"dataTables_sizing\">' + headerContent[i] + '</div>';\n    nSizer.childNodes[0].style.height = \"0\";\n    nSizer.childNodes[0].style.overflow = \"hidden\";\n    nSizer.style.width = headerWidths[i];\n  }, headerSrcEls);\n\n  if (footer) {\n    _fnApplyToChildren(function (nSizer, i) {\n      nSizer.innerHTML = '<div class=\"dataTables_sizing\">' + footerContent[i] + '</div>';\n      nSizer.childNodes[0].style.height = \"0\";\n      nSizer.childNodes[0].style.overflow = \"hidden\";\n      nSizer.style.width = footerWidths[i];\n    }, footerSrcEls);\n  } // Sanity check that the table is of a sensible width. If not then we are going to get\n  // misalignment - try to prevent this by not allowing the table to shrink below its min width\n\n\n  if (Math.round(table.outerWidth()) < Math.round(sanityWidth)) {\n    // The min width depends upon if we have a vertical scrollbar visible or not */\n    correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\" ? sanityWidth + barWidth : sanityWidth; // IE6/7 are a law unto themselves...\n\n    if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")) {\n      tableStyle.width = _fnStringToCss(correction - barWidth);\n    } // And give the user a warning that we've stopped the table getting too small\n\n\n    if (scrollX === \"\" || scrollXInner !== \"\") {\n      _fnLog(settings, 1, 'Possible column misalignment', 6);\n    }\n  } else {\n    correction = '100%';\n  } // Apply to the container elements\n\n\n  divBodyStyle.width = _fnStringToCss(correction);\n  divHeaderStyle.width = _fnStringToCss(correction);\n\n  if (footer) {\n    settings.nScrollFoot.style.width = _fnStringToCss(correction);\n  }\n  /*\n   * 4. Clean up\n   */\n\n\n  if (!scrollY) {\n    /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n     * the scrollbar height from the visible display, rather than adding it on. We need to\n     * set the height in order to sort this. Don't want to do it in any other browsers.\n     */\n    if (ie67) {\n      divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);\n    }\n  }\n  /* Finally set the width's of the header and footer tables */\n\n\n  var iOuterWidth = table.outerWidth();\n  divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);\n  divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth); // Figure out if there are scrollbar present - if so then we need a the header and footer to\n  // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\n  var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n  var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');\n  divHeaderInnerStyle[padding] = bScrolling ? barWidth + \"px\" : \"0px\";\n\n  if (footer) {\n    divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);\n    divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);\n    divFooterInner[0].style[padding] = bScrolling ? barWidth + \"px\" : \"0px\";\n  } // Correct DOM ordering for colgroup - comes before the thead\n\n\n  table.children('colgroup').insertBefore(table.children('thead'));\n  /* Adjust the position of the header in case we loose the y-scrollbar */\n\n  divBody.trigger('scroll'); // If sorting or filtering has occurred, jump the scrolling back to the top\n  // only if we aren't holding the position\n\n  if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {\n    divBodyEl.scrollTop = 0;\n  }\n}\n/**\n * Apply a given function to the display child nodes of an element array (typically\n * TD children of TR rows\n *  @param {function} fn Method to apply to the objects\n *  @param array {nodes} an1 List of elements to look through for display children\n *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnApplyToChildren(fn, an1, an2) {\n  var index = 0,\n      i = 0,\n      iLen = an1.length;\n  var nNode1, nNode2;\n\n  while (i < iLen) {\n    nNode1 = an1[i].firstChild;\n    nNode2 = an2 ? an2[i].firstChild : null;\n\n    while (nNode1) {\n      if (nNode1.nodeType === 1) {\n        if (an2) {\n          fn(nNode1, nNode2, index);\n        } else {\n          fn(nNode1, index);\n        }\n\n        index++;\n      }\n\n      nNode1 = nNode1.nextSibling;\n      nNode2 = an2 ? nNode2.nextSibling : null;\n    }\n\n    i++;\n  }\n}\n\nvar __re_html_remove = /<.*?>/g;\n/**\n * Calculate the width of columns for the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\nfunction _fnCalculateColumnWidths(oSettings) {\n  var table = oSettings.nTable,\n      columns = oSettings.aoColumns,\n      scroll = oSettings.oScroll,\n      scrollY = scroll.sY,\n      scrollX = scroll.sX,\n      scrollXInner = scroll.sXInner,\n      columnCount = columns.length,\n      visibleColumns = _fnGetColumns(oSettings, 'bVisible'),\n      headerCells = $('th', oSettings.nTHead),\n      tableWidthAttr = table.getAttribute('width'),\n      // from DOM element\n  tableContainer = table.parentNode,\n      userInputs = false,\n      i,\n      column,\n      columnIdx,\n      width,\n      outerWidth,\n      browser = oSettings.oBrowser,\n      ie67 = browser.bScrollOversize;\n\n  var styleWidth = table.style.width;\n\n  if (styleWidth && styleWidth.indexOf('%') !== -1) {\n    tableWidthAttr = styleWidth;\n  }\n  /* Convert any user input sizes into pixel sizes */\n\n\n  var sizes = _fnConvertToWidth(_pluck(columns, 'sWidthOrig'), tableContainer);\n\n  for (i = 0; i < visibleColumns.length; i++) {\n    column = columns[visibleColumns[i]];\n\n    if (column.sWidth !== null) {\n      column.sWidth = sizes[i];\n      userInputs = true;\n    }\n  }\n  /* If the number of columns in the DOM equals the number that we have to\n   * process in DataTables, then we can use the offsets that are created by\n   * the web- browser. No custom sizes can be set in order for this to happen,\n   * nor scrolling used\n   */\n\n\n  if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {\n    for (i = 0; i < columnCount; i++) {\n      var colIdx = _fnVisibleToColumnIndex(oSettings, i);\n\n      if (colIdx !== null) {\n        columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());\n      }\n    }\n  } else {\n    // Otherwise construct a single row, worst case, table with the widest\n    // node in the data, assign any user defined widths, then insert it into\n    // the DOM and allow the browser to do all the hard work of calculating\n    // table widths\n    var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n    .css('visibility', 'hidden').removeAttr('id'); // Clean up the table body\n\n    tmpTable.find('tbody tr').remove();\n    var tr = $('<tr/>').appendTo(tmpTable.find('tbody')); // Clone the table header and footer - we can't use the header / footer\n    // from the cloned table, since if scrolling is active, the table's\n    // real header and footer are contained in different table tags\n\n    tmpTable.find('thead, tfoot').remove();\n    tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone()); // Remove any assigned widths from the footer (from scrolling)\n\n    tmpTable.find('tfoot th, tfoot td').css('width', ''); // Apply custom sizing to the cloned header\n\n    headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);\n\n    for (i = 0; i < visibleColumns.length; i++) {\n      column = columns[visibleColumns[i]];\n      headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : ''; // For scrollX we need to force the column width otherwise the\n      // browser will collapse it. If this width is smaller than the\n      // width the column requires, then it will have no effect\n\n      if (column.sWidthOrig && scrollX) {\n        $(headerCells[i]).append($('<div/>').css({\n          width: column.sWidthOrig,\n          margin: 0,\n          padding: 0,\n          border: 0,\n          height: 1\n        }));\n      }\n    } // Find the widest cell for each column and put it into the table\n\n\n    if (oSettings.aoData.length) {\n      for (i = 0; i < visibleColumns.length; i++) {\n        columnIdx = visibleColumns[i];\n        column = columns[columnIdx];\n        $(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);\n      }\n    } // Tidy the temporary table - remove name attributes so there aren't\n    // duplicated in the dom (radio elements for example)\n\n\n    $('[name]', tmpTable).removeAttr('name'); // Table has been built, attach to the document so we can work with it.\n    // A holding element is used, positioned at the top of the container\n    // with minimal height, so it has no effect on if the container scrolls\n    // or not. Otherwise it might trigger scrolling when it actually isn't\n    // needed\n\n    var holder = $('<div/>').css(scrollX || scrollY ? {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      height: 1,\n      right: 0,\n      overflow: 'hidden'\n    } : {}).append(tmpTable).appendTo(tableContainer); // When scrolling (X or Y) we want to set the width of the table as \n    // appropriate. However, when not scrolling leave the table width as it\n    // is. This results in slightly different, but I think correct behaviour\n\n    if (scrollX && scrollXInner) {\n      tmpTable.width(scrollXInner);\n    } else if (scrollX) {\n      tmpTable.css('width', 'auto');\n      tmpTable.removeAttr('width'); // If there is no width attribute or style, then allow the table to\n      // collapse\n\n      if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {\n        tmpTable.width(tableContainer.clientWidth);\n      }\n    } else if (scrollY) {\n      tmpTable.width(tableContainer.clientWidth);\n    } else if (tableWidthAttr) {\n      tmpTable.width(tableWidthAttr);\n    } // Get the width of each column in the constructed table - we need to\n    // know the inner width (so it can be assigned to the other table's\n    // cells) and the outer width so we can calculate the full width of the\n    // table. This is safe since DataTables requires a unique cell for each\n    // column, but if ever a header can span multiple columns, this will\n    // need to be modified.\n\n\n    var total = 0;\n\n    for (i = 0; i < visibleColumns.length; i++) {\n      var cell = $(headerCells[i]);\n      var border = cell.outerWidth() - cell.width(); // Use getBounding... where possible (not IE8-) because it can give\n      // sub-pixel accuracy, which we then want to round up!\n\n      var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth(); // Total is tracked to remove any sub-pixel errors as the outerWidth\n      // of the table might not equal the total given here (IE!).\n\n      total += bounding; // Width for each column to use\n\n      columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);\n    }\n\n    table.style.width = _fnStringToCss(total); // Finished with the table - ditch it\n\n    holder.remove();\n  } // If there is a width attr, we want to attach an event listener which\n  // allows the table sizing to automatically adjust when the window is\n  // resized. Use the width attr rather than CSS, since we can't know if the\n  // CSS is a relative value or absolute - DOM read is always px.\n\n\n  if (tableWidthAttr) {\n    table.style.width = _fnStringToCss(tableWidthAttr);\n  }\n\n  if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {\n    var bindResize = function () {\n      $(window).on('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {\n        _fnAdjustColumnSizing(oSettings);\n      }));\n    }; // IE6/7 will crash if we bind a resize event handler on page load.\n    // To be removed in 1.11 which drops IE6/7 support\n\n\n    if (ie67) {\n      setTimeout(bindResize, 1000);\n    } else {\n      bindResize();\n    }\n\n    oSettings._reszEvt = true;\n  }\n}\n/**\n * Throttle the calls to a function. Arguments and context are maintained for\n * the throttled function\n *  @param {function} fn Function to be called\n *  @param {int} [freq=200] call frequency in mS\n *  @returns {function} wrapped function\n *  @memberof DataTable#oApi\n */\n\n\nvar _fnThrottle = DataTable.util.throttle;\n/**\n * Convert a set of CSS units width to pixels (e.g. 2em)\n *  @param {string[]} widths widths to be converted\n *  @param {node} parent parent to get the with for (required for relative widths) - optional\n *  @returns {int[]} widths in pixels\n *  @memberof DataTable#oApi\n */\n\nfunction _fnConvertToWidth(widths, parent) {\n  var els = [];\n  var results = []; // Add the elements in a single loop so we only need to reflow once\n\n  for (var i = 0; i < widths.length; i++) {\n    if (widths[i]) {\n      els.push($('<div/>').css('width', _fnStringToCss(widths[i])).appendTo(parent || document.body));\n    } else {\n      els.push(null);\n    }\n  } // Get the sizes (will reflow once)\n\n\n  for (var i = 0; i < widths.length; i++) {\n    results.push(els[i] ? els[i][0].offsetWidth : null);\n  } // Tidy\n\n\n  $(els).remove();\n  return results;\n}\n/**\n * Get the widest node\n *  @param {object} settings dataTables settings object\n *  @param {int} colIdx column of interest\n *  @returns {node} widest table node\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnGetWidestNode(settings, colIdx) {\n  var idx = _fnGetMaxLenString(settings, colIdx);\n\n  if (idx < 0) {\n    return null;\n  }\n\n  var data = settings.aoData[idx];\n  return !data.nTr ? // Might not have been created when deferred rendering\n  $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];\n}\n/**\n * Get the maximum strlen for each data column\n *  @param {object} settings dataTables settings object\n *  @param {int} colIdx column of interest\n *  @returns {string} max string length for each column\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnGetMaxLenString(settings, colIdx) {\n  var s,\n      max = -1,\n      maxIdx = -1;\n\n  for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n    s = _fnGetCellData(settings, i, colIdx, 'display') + '';\n    s = s.replace(__re_html_remove, '');\n    s = s.replace(/&nbsp;/g, ' ');\n\n    if (s.length > max) {\n      max = s.length;\n      maxIdx = i;\n    }\n  }\n\n  return maxIdx;\n}\n/**\n * Append a CSS unit (only if required) to a string\n *  @param {string} value to css-ify\n *  @returns {string} value with css unit\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnStringToCss(s) {\n  if (s === null) {\n    return '0px';\n  }\n\n  if (typeof s == 'number') {\n    return s < 0 ? '0px' : s + 'px';\n  } // Check it has a unit character already\n\n\n  return s.match(/\\d$/) ? s + 'px' : s;\n}\n\nfunction _fnSortFlatten(settings) {\n  var i,\n      iLen,\n      k,\n      kLen,\n      aSort = [],\n      aiOrig = [],\n      aoColumns = settings.aoColumns,\n      aDataSort,\n      iCol,\n      sType,\n      srcCol,\n      fixed = settings.aaSortingFixed,\n      fixedObj = $.isPlainObject(fixed),\n      nestedSort = [],\n      add = function (a) {\n    if (a.length && !Array.isArray(a[0])) {\n      // 1D array\n      nestedSort.push(a);\n    } else {\n      // 2D array\n      $.merge(nestedSort, a);\n    }\n  }; // Build the sort array, with pre-fix and post-fix options if they have been\n  // specified\n\n\n  if (Array.isArray(fixed)) {\n    add(fixed);\n  }\n\n  if (fixedObj && fixed.pre) {\n    add(fixed.pre);\n  }\n\n  add(settings.aaSorting);\n\n  if (fixedObj && fixed.post) {\n    add(fixed.post);\n  }\n\n  for (i = 0; i < nestedSort.length; i++) {\n    srcCol = nestedSort[i][0];\n    aDataSort = aoColumns[srcCol].aDataSort;\n\n    for (k = 0, kLen = aDataSort.length; k < kLen; k++) {\n      iCol = aDataSort[k];\n      sType = aoColumns[iCol].sType || 'string';\n\n      if (nestedSort[i]._idx === undefined) {\n        nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);\n      }\n\n      aSort.push({\n        src: srcCol,\n        col: iCol,\n        dir: nestedSort[i][1],\n        index: nestedSort[i]._idx,\n        type: sType,\n        formatter: DataTable.ext.type.order[sType + \"-pre\"]\n      });\n    }\n  }\n\n  return aSort;\n}\n/**\n * Change the order of the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n *  @todo This really needs split up!\n */\n\n\nfunction _fnSort(oSettings) {\n  var i,\n      ien,\n      iLen,\n      j,\n      jLen,\n      k,\n      kLen,\n      sDataType,\n      nTh,\n      aiOrig = [],\n      oExtSort = DataTable.ext.type.order,\n      aoData = oSettings.aoData,\n      aoColumns = oSettings.aoColumns,\n      aDataSort,\n      data,\n      iCol,\n      sType,\n      oSort,\n      formatters = 0,\n      sortCol,\n      displayMaster = oSettings.aiDisplayMaster,\n      aSort; // Resolve any column types that are unknown due to addition or invalidation\n  // @todo Can this be moved into a 'data-ready' handler which is called when\n  //   data is going to be used in the table?\n\n  _fnColumnTypes(oSettings);\n\n  aSort = _fnSortFlatten(oSettings);\n\n  for (i = 0, ien = aSort.length; i < ien; i++) {\n    sortCol = aSort[i]; // Track if we can use the fast sort algorithm\n\n    if (sortCol.formatter) {\n      formatters++;\n    } // Load the data needed for the sort, for each cell\n\n\n    _fnSortData(oSettings, sortCol.col);\n  }\n  /* No sorting required if server-side or no sorting array */\n\n\n  if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {\n    // Create a value - key array of the current row positions such that we can use their\n    // current position during the sort, if values match, in order to perform stable sorting\n    for (i = 0, iLen = displayMaster.length; i < iLen; i++) {\n      aiOrig[displayMaster[i]] = i;\n    }\n    /* Do the sort - here we want multi-column sorting based on a given data source (column)\n     * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n     * follow on it's own, but this is what we want (example two column sorting):\n     *  fnLocalSorting = function(a,b){\n     *    var iTest;\n     *    iTest = oSort['string-asc']('data11', 'data12');\n     *      if (iTest !== 0)\n     *        return iTest;\n     *    iTest = oSort['numeric-desc']('data21', 'data22');\n     *    if (iTest !== 0)\n     *      return iTest;\n     *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n     *  }\n     * Basically we have a test for each sorting column, if the data in that column is equal,\n     * test the next column. If all columns match, then we use a numeric sort on the row\n     * positions in the original data array to provide a stable sort.\n     *\n     * Note - I know it seems excessive to have two sorting methods, but the first is around\n     * 15% faster, so the second is only maintained for backwards compatibility with sorting\n     * methods which do not have a pre-sort formatting function.\n     */\n\n\n    if (formatters === aSort.length) {\n      // All sort types have formatting functions\n      displayMaster.sort(function (a, b) {\n        var x,\n            y,\n            k,\n            test,\n            sort,\n            len = aSort.length,\n            dataA = aoData[a]._aSortData,\n            dataB = aoData[b]._aSortData;\n\n        for (k = 0; k < len; k++) {\n          sort = aSort[k];\n          x = dataA[sort.col];\n          y = dataB[sort.col];\n          test = x < y ? -1 : x > y ? 1 : 0;\n\n          if (test !== 0) {\n            return sort.dir === 'asc' ? test : -test;\n          }\n        }\n\n        x = aiOrig[a];\n        y = aiOrig[b];\n        return x < y ? -1 : x > y ? 1 : 0;\n      });\n    } else {\n      // Depreciated - remove in 1.11 (providing a plug-in option)\n      // Not all sort types have formatting methods, so we have to call their sorting\n      // methods.\n      displayMaster.sort(function (a, b) {\n        var x,\n            y,\n            k,\n            l,\n            test,\n            sort,\n            fn,\n            len = aSort.length,\n            dataA = aoData[a]._aSortData,\n            dataB = aoData[b]._aSortData;\n\n        for (k = 0; k < len; k++) {\n          sort = aSort[k];\n          x = dataA[sort.col];\n          y = dataB[sort.col];\n          fn = oExtSort[sort.type + \"-\" + sort.dir] || oExtSort[\"string-\" + sort.dir];\n          test = fn(x, y);\n\n          if (test !== 0) {\n            return test;\n          }\n        }\n\n        x = aiOrig[a];\n        y = aiOrig[b];\n        return x < y ? -1 : x > y ? 1 : 0;\n      });\n    }\n  }\n  /* Tell the draw function that we have sorted the data */\n\n\n  oSettings.bSorted = true;\n}\n\nfunction _fnSortAria(settings) {\n  var label;\n  var nextSort;\n  var columns = settings.aoColumns;\n\n  var aSort = _fnSortFlatten(settings);\n\n  var oAria = settings.oLanguage.oAria; // ARIA attributes - need to loop all columns, to update all (removing old\n  // attributes as needed)\n\n  for (var i = 0, iLen = columns.length; i < iLen; i++) {\n    var col = columns[i];\n    var asSorting = col.asSorting;\n    var sTitle = col.ariaTitle || col.sTitle.replace(/<.*?>/g, \"\");\n    var th = col.nTh; // IE7 is throwing an error when setting these properties with jQuery's\n    // attr() and removeAttr() methods...\n\n    th.removeAttribute('aria-sort');\n    /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\n    if (col.bSortable) {\n      if (aSort.length > 0 && aSort[0].col == i) {\n        th.setAttribute('aria-sort', aSort[0].dir == \"asc\" ? \"ascending\" : \"descending\");\n        nextSort = asSorting[aSort[0].index + 1] || asSorting[0];\n      } else {\n        nextSort = asSorting[0];\n      }\n\n      label = sTitle + (nextSort === \"asc\" ? oAria.sSortAscending : oAria.sSortDescending);\n    } else {\n      label = sTitle;\n    }\n\n    th.setAttribute('aria-label', label);\n  }\n}\n/**\n * Function to run on user sort request\n *  @param {object} settings dataTables settings object\n *  @param {node} attachTo node to attach the handler to\n *  @param {int} colIdx column sorting index\n *  @param {boolean} [append=false] Append the requested sort to the existing\n *    sort if true (i.e. multi-column sort)\n *  @param {function} [callback] callback function\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnSortListener(settings, colIdx, append, callback) {\n  var col = settings.aoColumns[colIdx];\n  var sorting = settings.aaSorting;\n  var asSorting = col.asSorting;\n  var nextSortIdx;\n\n  var next = function (a, overflow) {\n    var idx = a._idx;\n\n    if (idx === undefined) {\n      idx = $.inArray(a[1], asSorting);\n    }\n\n    return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;\n  }; // Convert to 2D array if needed\n\n\n  if (typeof sorting[0] === 'number') {\n    sorting = settings.aaSorting = [sorting];\n  } // If appending the sort then we are multi-column sorting\n\n\n  if (append && settings.oFeatures.bSortMulti) {\n    // Are we already doing some kind of sort on this column?\n    var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));\n\n    if (sortIdx !== -1) {\n      // Yes, modify the sort\n      nextSortIdx = next(sorting[sortIdx], true);\n\n      if (nextSortIdx === null && sorting.length === 1) {\n        nextSortIdx = 0; // can't remove sorting completely\n      }\n\n      if (nextSortIdx === null) {\n        sorting.splice(sortIdx, 1);\n      } else {\n        sorting[sortIdx][1] = asSorting[nextSortIdx];\n        sorting[sortIdx]._idx = nextSortIdx;\n      }\n    } else {\n      // No sort on this column yet\n      sorting.push([colIdx, asSorting[0], 0]);\n      sorting[sorting.length - 1]._idx = 0;\n    }\n  } else if (sorting.length && sorting[0][0] == colIdx) {\n    // Single column - already sorting on this column, modify the sort\n    nextSortIdx = next(sorting[0]);\n    sorting.length = 1;\n    sorting[0][1] = asSorting[nextSortIdx];\n    sorting[0]._idx = nextSortIdx;\n  } else {\n    // Single column - sort only on this column\n    sorting.length = 0;\n    sorting.push([colIdx, asSorting[0]]);\n    sorting[0]._idx = 0;\n  } // Run the sort by calling a full redraw\n\n\n  _fnReDraw(settings); // callback used for async user interaction\n\n\n  if (typeof callback == 'function') {\n    callback(settings);\n  }\n}\n/**\n * Attach a sort handler (click) to a node\n *  @param {object} settings dataTables settings object\n *  @param {node} attachTo node to attach the handler to\n *  @param {int} colIdx column sorting index\n *  @param {function} [callback] callback function\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnSortAttachListener(settings, attachTo, colIdx, callback) {\n  var col = settings.aoColumns[colIdx];\n\n  _fnBindAction(attachTo, {}, function (e) {\n    /* If the column is not sortable - don't to anything */\n    if (col.bSortable === false) {\n      return;\n    } // If processing is enabled use a timeout to allow the processing\n    // display to be shown - otherwise to it synchronously\n\n\n    if (settings.oFeatures.bProcessing) {\n      _fnProcessingDisplay(settings, true);\n\n      setTimeout(function () {\n        _fnSortListener(settings, colIdx, e.shiftKey, callback); // In server-side processing, the draw callback will remove the\n        // processing display\n\n\n        if (_fnDataSource(settings) !== 'ssp') {\n          _fnProcessingDisplay(settings, false);\n        }\n      }, 0);\n    } else {\n      _fnSortListener(settings, colIdx, e.shiftKey, callback);\n    }\n  });\n}\n/**\n * Set the sorting classes on table's body, Note: it is safe to call this function\n * when bSort and bSortClasses are false\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnSortingClasses(settings) {\n  var oldSort = settings.aLastSort;\n  var sortClass = settings.oClasses.sSortColumn;\n\n  var sort = _fnSortFlatten(settings);\n\n  var features = settings.oFeatures;\n  var i, ien, colIdx;\n\n  if (features.bSort && features.bSortClasses) {\n    // Remove old sorting classes\n    for (i = 0, ien = oldSort.length; i < ien; i++) {\n      colIdx = oldSort[i].src; // Remove column sorting\n\n      $(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));\n    } // Add new column sorting\n\n\n    for (i = 0, ien = sort.length; i < ien; i++) {\n      colIdx = sort[i].src;\n      $(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));\n    }\n  }\n\n  settings.aLastSort = sort;\n} // Get the data to sort a column, be it from cache, fresh (populating the\n// cache), or from a sort formatter\n\n\nfunction _fnSortData(settings, idx) {\n  // Custom sorting function - provided by the sort data type\n  var column = settings.aoColumns[idx];\n  var customSort = DataTable.ext.order[column.sSortDataType];\n  var customData;\n\n  if (customSort) {\n    customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));\n  } // Use / populate cache\n\n\n  var row, cellData;\n  var formatter = DataTable.ext.type.order[column.sType + \"-pre\"];\n\n  for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n    row = settings.aoData[i];\n\n    if (!row._aSortData) {\n      row._aSortData = [];\n    }\n\n    if (!row._aSortData[idx] || customSort) {\n      cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there\n      _fnGetCellData(settings, i, idx, 'sort');\n      row._aSortData[idx] = formatter ? formatter(cellData) : cellData;\n    }\n  }\n}\n/**\n * Save the state of a table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnSaveState(settings) {\n  if (settings._bLoadingState) {\n    return;\n  }\n  /* Store the interesting variables */\n\n\n  var state = {\n    time: +new Date(),\n    start: settings._iDisplayStart,\n    length: settings._iDisplayLength,\n    order: $.extend(true, [], settings.aaSorting),\n    search: _fnSearchToCamel(settings.oPreviousSearch),\n    columns: $.map(settings.aoColumns, function (col, i) {\n      return {\n        visible: col.bVisible,\n        search: _fnSearchToCamel(settings.aoPreSearchCols[i])\n      };\n    })\n  };\n  settings.oSavedState = state;\n\n  _fnCallbackFire(settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state]);\n\n  if (settings.oFeatures.bStateSave && !settings.bDestroying) {\n    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);\n  }\n}\n/**\n * Attempt to load a saved table state\n *  @param {object} oSettings dataTables settings object\n *  @param {object} oInit DataTables init object so we can override settings\n *  @param {function} callback Callback to execute when the state has been loaded\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnLoadState(settings, oInit, callback) {\n  if (!settings.oFeatures.bStateSave) {\n    callback();\n    return;\n  }\n\n  var loaded = function (state) {\n    _fnImplementState(settings, state, callback);\n  };\n\n  var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);\n\n  if (state !== undefined) {\n    _fnImplementState(settings, state, callback);\n  } // otherwise, wait for the loaded callback to be executed\n\n\n  return true;\n}\n\nfunction _fnImplementState(settings, s, callback) {\n  var i, ien;\n  var columns = settings.aoColumns;\n  settings._bLoadingState = true; // When StateRestore was introduced the state could now be implemented at any time\n  // Not just initialisation. To do this an api instance is required in some places\n\n  var api = settings._bInitComplete ? new DataTable.Api(settings) : null;\n\n  if (!s || !s.time) {\n    settings._bLoadingState = false;\n    callback();\n    return;\n  } // Allow custom and plug-in manipulation functions to alter the saved data set and\n  // cancelling of loading by returning false\n\n\n  var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s]);\n\n  if ($.inArray(false, abStateLoad) !== -1) {\n    settings._bLoadingState = false;\n    callback();\n    return;\n  } // Reject old data\n\n\n  var duration = settings.iStateDuration;\n\n  if (duration > 0 && s.time < +new Date() - duration * 1000) {\n    settings._bLoadingState = false;\n    callback();\n    return;\n  } // Number of columns have changed - all bets are off, no restore of settings\n\n\n  if (s.columns && columns.length !== s.columns.length) {\n    settings._bLoadingState = false;\n    callback();\n    return;\n  } // Store the saved state so it might be accessed at any time\n\n\n  settings.oLoadedState = $.extend(true, {}, s); // Page Length\n\n  if (s.length !== undefined) {\n    // If already initialised just set the value directly so that the select element is also updated\n    if (api) {\n      api.page.len(s.length);\n    } else {\n      settings._iDisplayLength = s.length;\n    }\n  } // Restore key features - todo - for 1.11 this needs to be done by\n  // subscribed events\n\n\n  if (s.start !== undefined) {\n    if (api === null) {\n      settings._iDisplayStart = s.start;\n      settings.iInitDisplayStart = s.start;\n    } else {\n      _fnPageChange(settings, s.start / settings._iDisplayLength);\n    }\n  } // Order\n\n\n  if (s.order !== undefined) {\n    settings.aaSorting = [];\n    $.each(s.order, function (i, col) {\n      settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);\n    });\n  } // Search\n\n\n  if (s.search !== undefined) {\n    $.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));\n  } // Columns\n\n\n  if (s.columns) {\n    for (i = 0, ien = s.columns.length; i < ien; i++) {\n      var col = s.columns[i]; // Visibility\n\n      if (col.visible !== undefined) {\n        // If the api is defined, the table has been initialised so we need to use it rather than internal settings\n        if (api) {\n          // Don't redraw the columns on every iteration of this loop, we will do this at the end instead\n          api.column(i).visible(col.visible, false);\n        } else {\n          columns[i].bVisible = col.visible;\n        }\n      } // Search\n\n\n      if (col.search !== undefined) {\n        $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));\n      }\n    } // If the api is defined then we need to adjust the columns once the visibility has been changed\n\n\n    if (api) {\n      api.columns.adjust();\n    }\n  }\n\n  settings._bLoadingState = false;\n\n  _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, s]);\n\n  callback();\n}\n\n;\n/**\n * Return the settings object for a particular table\n *  @param {node} table table we are using as a dataTable\n *  @returns {object} Settings object - or null if not found\n *  @memberof DataTable#oApi\n */\n\nfunction _fnSettingsFromNode(table) {\n  var settings = DataTable.settings;\n  var idx = $.inArray(table, _pluck(settings, 'nTable'));\n  return idx !== -1 ? settings[idx] : null;\n}\n/**\n * Log an error message\n *  @param {object} settings dataTables settings object\n *  @param {int} level log error messages, or display them to the user\n *  @param {string} msg error message\n *  @param {int} tn Technical note id to get more information about the error.\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnLog(settings, level, msg, tn) {\n  msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;\n\n  if (tn) {\n    msg += '. For more information about this error, please see ' + 'https://datatables.net/tn/' + tn;\n  }\n\n  if (!level) {\n    // Backwards compatibility pre 1.10\n    var ext = DataTable.ext;\n    var type = ext.sErrMode || ext.errMode;\n\n    if (settings) {\n      _fnCallbackFire(settings, null, 'error', [settings, tn, msg]);\n    }\n\n    if (type == 'alert') {\n      alert(msg);\n    } else if (type == 'throw') {\n      throw new Error(msg);\n    } else if (typeof type == 'function') {\n      type(settings, tn, msg);\n    }\n  } else if (window.console && console.log) {\n    console.log(msg);\n  }\n}\n/**\n * See if a property is defined on one object, if so assign it to the other object\n *  @param {object} ret target object\n *  @param {object} src source object\n *  @param {string} name property\n *  @param {string} [mappedName] name to map too - optional, name used if not given\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnMap(ret, src, name, mappedName) {\n  if (Array.isArray(name)) {\n    $.each(name, function (i, val) {\n      if (Array.isArray(val)) {\n        _fnMap(ret, src, val[0], val[1]);\n      } else {\n        _fnMap(ret, src, val);\n      }\n    });\n    return;\n  }\n\n  if (mappedName === undefined) {\n    mappedName = name;\n  }\n\n  if (src[name] !== undefined) {\n    ret[mappedName] = src[name];\n  }\n}\n/**\n * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n * shallow copy arrays. The reason we need to do this, is that we don't want to\n * deep copy array init values (such as aaSorting) since the dev wouldn't be\n * able to override them, but we do want to deep copy arrays.\n *  @param {object} out Object to extend\n *  @param {object} extender Object from which the properties will be applied to\n *      out\n *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n *      independent copy with the exception of the `data` or `aaData` parameters\n *      if they are present. This is so you can pass in a collection to\n *      DataTables and have that used as your data source without breaking the\n *      references\n *  @returns {object} out Reference, just for convenience - out === the return.\n *  @memberof DataTable#oApi\n *  @todo This doesn't take account of arrays inside the deep copied objects.\n */\n\n\nfunction _fnExtend(out, extender, breakRefs) {\n  var val;\n\n  for (var prop in extender) {\n    if (extender.hasOwnProperty(prop)) {\n      val = extender[prop];\n\n      if ($.isPlainObject(val)) {\n        if (!$.isPlainObject(out[prop])) {\n          out[prop] = {};\n        }\n\n        $.extend(true, out[prop], val);\n      } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && Array.isArray(val)) {\n        out[prop] = val.slice();\n      } else {\n        out[prop] = val;\n      }\n    }\n  }\n\n  return out;\n}\n/**\n * Bind an event handers to allow a click or return key to activate the callback.\n * This is good for accessibility since a return on the keyboard will have the\n * same effect as a click, if the element has focus.\n *  @param {element} n Element to bind the action to\n *  @param {object} oData Data object to pass to the triggered function\n *  @param {function} fn Callback function for when the event is triggered\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnBindAction(n, oData, fn) {\n  $(n).on('click.DT', oData, function (e) {\n    $(n).trigger('blur'); // Remove focus outline for mouse users\n\n    fn(e);\n  }).on('keypress.DT', oData, function (e) {\n    if (e.which === 13) {\n      e.preventDefault();\n      fn(e);\n    }\n  }).on('selectstart.DT', function () {\n    /* Take the brutal approach to cancelling text selection */\n    return false;\n  });\n}\n/**\n * Register a callback function. Easily allows a callback function to be added to\n * an array store of callback functions that can then all be called together.\n *  @param {object} oSettings dataTables settings object\n *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n *  @param {function} fn Function to be called back\n *  @param {string} sName Identifying name for the callback (i.e. a label)\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnCallbackReg(oSettings, sStore, fn, sName) {\n  if (fn) {\n    oSettings[sStore].push({\n      \"fn\": fn,\n      \"sName\": sName\n    });\n  }\n}\n/**\n * Fire callback functions and trigger events. Note that the loop over the\n * callback array store is done backwards! Further note that you do not want to\n * fire off triggers in time sensitive applications (for example cell creation)\n * as its slow.\n *  @param {object} settings dataTables settings object\n *  @param {string} callbackArr Name of the array storage for the callbacks in\n *      oSettings\n *  @param {string} eventName Name of the jQuery custom event to trigger. If\n *      null no trigger is fired\n *  @param {array} args Array of arguments to pass to the callback function /\n *      trigger\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnCallbackFire(settings, callbackArr, eventName, args) {\n  var ret = [];\n\n  if (callbackArr) {\n    ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {\n      return val.fn.apply(settings.oInstance, args);\n    });\n  }\n\n  if (eventName !== null) {\n    var e = $.Event(eventName + '.dt');\n    var table = $(settings.nTable);\n    table.trigger(e, args); // If not yet attached to the document, trigger the event\n    // on the body directly to sort of simulate the bubble\n\n    if (table.parents('body').length === 0) {\n      $('body').trigger(e, args);\n    }\n\n    ret.push(e.result);\n  }\n\n  return ret;\n}\n\nfunction _fnLengthOverflow(settings) {\n  var start = settings._iDisplayStart,\n      end = settings.fnDisplayEnd(),\n      len = settings._iDisplayLength;\n  /* If we have space to show extra rows (backing up from the end point - then do so */\n\n  if (start >= end) {\n    start = end - len;\n  } // Keep the start record on the current page\n\n\n  start -= start % len;\n\n  if (len === -1 || start < 0) {\n    start = 0;\n  }\n\n  settings._iDisplayStart = start;\n}\n\nfunction _fnRenderer(settings, type) {\n  var renderer = settings.renderer;\n  var host = DataTable.ext.renderer[type];\n\n  if ($.isPlainObject(renderer) && renderer[type]) {\n    // Specific renderer for this type. If available use it, otherwise use\n    // the default.\n    return host[renderer[type]] || host._;\n  } else if (typeof renderer === 'string') {\n    // Common renderer - if there is one available for this type use it,\n    // otherwise use the default\n    return host[renderer] || host._;\n  } // Use the default\n\n\n  return host._;\n}\n/**\n * Detect the data source being used for the table. Used to simplify the code\n * a little (ajax) and to make it compress a little smaller.\n *\n *  @param {object} settings dataTables settings object\n *  @returns {string} Data source\n *  @memberof DataTable#oApi\n */\n\n\nfunction _fnDataSource(settings) {\n  if (settings.oFeatures.bServerSide) {\n    return 'ssp';\n  } else if (settings.ajax || settings.sAjaxSource) {\n    return 'ajax';\n  }\n\n  return 'dom';\n}\n/**\n * Computed structure of the DataTables API, defined by the options passed to\n * `DataTable.Api.register()` when building the API.\n *\n * The structure is built in order to speed creation and extension of the Api\n * objects since the extensions are effectively pre-parsed.\n *\n * The array is an array of objects with the following structure, where this\n * base array represents the Api prototype base:\n *\n *     [\n *       {\n *         name:      'data'                -- string   - Property name\n *         val:       function () {},       -- function - Api method (or undefined if just an object\n *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n *       },\n *       {\n *         name:     'row'\n *         val:       {},\n *         methodExt: [ ... ],\n *         propExt:   [\n *           {\n *             name:      'data'\n *             val:       function () {},\n *             methodExt: [ ... ],\n *             propExt:   [ ... ]\n *           },\n *           ...\n *         ]\n *       }\n *     ]\n *\n * @type {Array}\n * @ignore\n */\n\n\nvar __apiStruct = [];\n/**\n * `Array.prototype` reference.\n *\n * @type object\n * @ignore\n */\n\nvar __arrayProto = Array.prototype;\n/**\n * Abstraction for `context` parameter of the `Api` constructor to allow it to\n * take several different forms for ease of use.\n *\n * Each of the input parameter types will be converted to a DataTables settings\n * object where possible.\n *\n * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n *   of:\n *\n *   * `string` - jQuery selector. Any DataTables' matching the given selector\n *     with be found and used.\n *   * `node` - `TABLE` node which has already been formed into a DataTable.\n *   * `jQuery` - A jQuery object of `TABLE` nodes.\n *   * `object` - DataTables settings object\n *   * `DataTables.Api` - API instance\n * @return {array|null} Matching DataTables settings objects. `null` or\n *   `undefined` is returned if no matching DataTable is found.\n * @ignore\n */\n\nvar _toSettings = function (mixed) {\n  var idx, jq;\n  var settings = DataTable.settings;\n  var tables = $.map(settings, function (el, i) {\n    return el.nTable;\n  });\n\n  if (!mixed) {\n    return [];\n  } else if (mixed.nTable && mixed.oApi) {\n    // DataTables settings object\n    return [mixed];\n  } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {\n    // Table node\n    idx = $.inArray(mixed, tables);\n    return idx !== -1 ? [settings[idx]] : null;\n  } else if (mixed && typeof mixed.settings === 'function') {\n    return mixed.settings().toArray();\n  } else if (typeof mixed === 'string') {\n    // jQuery selector\n    jq = $(mixed);\n  } else if (mixed instanceof $) {\n    // jQuery object (also DataTables instance)\n    jq = mixed;\n  }\n\n  if (jq) {\n    return jq.map(function (i) {\n      idx = $.inArray(this, tables);\n      return idx !== -1 ? settings[idx] : null;\n    }).toArray();\n  }\n};\n/**\n * DataTables API class - used to control and interface with  one or more\n * DataTables enhanced tables.\n *\n * The API class is heavily based on jQuery, presenting a chainable interface\n * that you can use to interact with tables. Each instance of the API class has\n * a \"context\" - i.e. the tables that it will operate on. This could be a single\n * table, all tables on a page or a sub-set thereof.\n *\n * Additionally the API is designed to allow you to easily work with the data in\n * the tables, retrieving and manipulating it as required. This is done by\n * presenting the API class as an array like interface. The contents of the\n * array depend upon the actions requested by each method (for example\n * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n * return an array of objects or arrays depending upon your table's\n * configuration). The API object has a number of array like methods (`push`,\n * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n * `unique` etc) to assist your working with the data held in a table.\n *\n * Most methods (those which return an Api instance) are chainable, which means\n * the return from a method call also has all of the methods available that the\n * top level object had. For example, these two calls are equivalent:\n *\n *     // Not chained\n *     api.row.add( {...} );\n *     api.draw();\n *\n *     // Chained\n *     api.row.add( {...} ).draw();\n *\n * @class DataTable.Api\n * @param {array|object|string|jQuery} context DataTable identifier. This is\n *   used to define which DataTables enhanced tables this API will operate on.\n *   Can be one of:\n *\n *   * `string` - jQuery selector. Any DataTables' matching the given selector\n *     with be found and used.\n *   * `node` - `TABLE` node which has already been formed into a DataTable.\n *   * `jQuery` - A jQuery object of `TABLE` nodes.\n *   * `object` - DataTables settings object\n * @param {array} [data] Data to initialise the Api instance with.\n *\n * @example\n *   // Direct initialisation during DataTables construction\n *   var api = $('#example').DataTable();\n *\n * @example\n *   // Initialisation using a DataTables jQuery object\n *   var api = $('#example').dataTable().api();\n *\n * @example\n *   // Initialisation as a constructor\n *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n */\n\n\n_Api = function (context, data) {\n  if (!(this instanceof _Api)) {\n    return new _Api(context, data);\n  }\n\n  var settings = [];\n\n  var ctxSettings = function (o) {\n    var a = _toSettings(o);\n\n    if (a) {\n      settings.push.apply(settings, a);\n    }\n  };\n\n  if (Array.isArray(context)) {\n    for (var i = 0, ien = context.length; i < ien; i++) {\n      ctxSettings(context[i]);\n    }\n  } else {\n    ctxSettings(context);\n  } // Remove duplicates\n\n\n  this.context = _unique(settings); // Initial data\n\n  if (data) {\n    $.merge(this, data);\n  } // selector\n\n\n  this.selector = {\n    rows: null,\n    cols: null,\n    opts: null\n  };\n\n  _Api.extend(this, this, __apiStruct);\n};\n\nDataTable.Api = _Api; // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n// isPlainObject.\n\n$.extend(_Api.prototype, {\n  any: function () {\n    return this.count() !== 0;\n  },\n  concat: __arrayProto.concat,\n  context: [],\n  // array of table settings objects\n  count: function () {\n    return this.flatten().length;\n  },\n  each: function (fn) {\n    for (var i = 0, ien = this.length; i < ien; i++) {\n      fn.call(this, this[i], i, this);\n    }\n\n    return this;\n  },\n  eq: function (idx) {\n    var ctx = this.context;\n    return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;\n  },\n  filter: function (fn) {\n    var a = [];\n\n    if (__arrayProto.filter) {\n      a = __arrayProto.filter.call(this, fn, this);\n    } else {\n      // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n      for (var i = 0, ien = this.length; i < ien; i++) {\n        if (fn.call(this, this[i], i, this)) {\n          a.push(this[i]);\n        }\n      }\n    }\n\n    return new _Api(this.context, a);\n  },\n  flatten: function () {\n    var a = [];\n    return new _Api(this.context, a.concat.apply(a, this.toArray()));\n  },\n  join: __arrayProto.join,\n  indexOf: __arrayProto.indexOf || function (obj, start) {\n    for (var i = start || 0, ien = this.length; i < ien; i++) {\n      if (this[i] === obj) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  iterator: function (flatten, type, fn, alwaysNew) {\n    var a = [],\n        ret,\n        i,\n        ien,\n        j,\n        jen,\n        context = this.context,\n        rows,\n        items,\n        item,\n        selector = this.selector; // Argument shifting\n\n    if (typeof flatten === 'string') {\n      alwaysNew = fn;\n      fn = type;\n      type = flatten;\n      flatten = false;\n    }\n\n    for (i = 0, ien = context.length; i < ien; i++) {\n      var apiInst = new _Api(context[i]);\n\n      if (type === 'table') {\n        ret = fn.call(apiInst, context[i], i);\n\n        if (ret !== undefined) {\n          a.push(ret);\n        }\n      } else if (type === 'columns' || type === 'rows') {\n        // this has same length as context - one entry for each table\n        ret = fn.call(apiInst, context[i], this[i], i);\n\n        if (ret !== undefined) {\n          a.push(ret);\n        }\n      } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {\n        // columns and rows share the same structure.\n        // 'this' is an array of column indexes for each context\n        items = this[i];\n\n        if (type === 'column-rows') {\n          rows = _selector_row_indexes(context[i], selector.opts);\n        }\n\n        for (j = 0, jen = items.length; j < jen; j++) {\n          item = items[j];\n\n          if (type === 'cell') {\n            ret = fn.call(apiInst, context[i], item.row, item.column, i, j);\n          } else {\n            ret = fn.call(apiInst, context[i], item, i, j, rows);\n          }\n\n          if (ret !== undefined) {\n            a.push(ret);\n          }\n        }\n      }\n    }\n\n    if (a.length || alwaysNew) {\n      var api = new _Api(context, flatten ? a.concat.apply([], a) : a);\n      var apiSelector = api.selector;\n      apiSelector.rows = selector.rows;\n      apiSelector.cols = selector.cols;\n      apiSelector.opts = selector.opts;\n      return api;\n    }\n\n    return this;\n  },\n  lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {\n    // Bit cheeky...\n    return this.indexOf.apply(this.toArray.reverse(), arguments);\n  },\n  length: 0,\n  map: function (fn) {\n    var a = [];\n\n    if (__arrayProto.map) {\n      a = __arrayProto.map.call(this, fn, this);\n    } else {\n      // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n      for (var i = 0, ien = this.length; i < ien; i++) {\n        a.push(fn.call(this, this[i], i));\n      }\n    }\n\n    return new _Api(this.context, a);\n  },\n  pluck: function (prop) {\n    var fn = DataTable.util.get(prop);\n    return this.map(function (el) {\n      return fn(el);\n    });\n  },\n  pop: __arrayProto.pop,\n  push: __arrayProto.push,\n  // Does not return an API instance\n  reduce: __arrayProto.reduce || function (fn, init) {\n    return _fnReduce(this, fn, init, 0, this.length, 1);\n  },\n  reduceRight: __arrayProto.reduceRight || function (fn, init) {\n    return _fnReduce(this, fn, init, this.length - 1, -1, -1);\n  },\n  reverse: __arrayProto.reverse,\n  // Object with rows, columns and opts\n  selector: null,\n  shift: __arrayProto.shift,\n  slice: function () {\n    return new _Api(this.context, this);\n  },\n  sort: __arrayProto.sort,\n  // ? name - order?\n  splice: __arrayProto.splice,\n  toArray: function () {\n    return __arrayProto.slice.call(this);\n  },\n  to$: function () {\n    return $(this);\n  },\n  toJQuery: function () {\n    return $(this);\n  },\n  unique: function () {\n    return new _Api(this.context, _unique(this));\n  },\n  unshift: __arrayProto.unshift\n});\n\n_Api.extend = function (scope, obj, ext) {\n  // Only extend API instances and static properties of the API\n  if (!ext.length || !obj || !(obj instanceof _Api) && !obj.__dt_wrapper) {\n    return;\n  }\n\n  var i,\n      ien,\n      struct,\n      methodScoping = function (scope, fn, struc) {\n    return function () {\n      var ret = fn.apply(scope, arguments); // Method extension\n\n      _Api.extend(ret, ret, struc.methodExt);\n\n      return ret;\n    };\n  };\n\n  for (i = 0, ien = ext.length; i < ien; i++) {\n    struct = ext[i]; // Value\n\n    obj[struct.name] = struct.type === 'function' ? methodScoping(scope, struct.val, struct) : struct.type === 'object' ? {} : struct.val;\n    obj[struct.name].__dt_wrapper = true; // Property extension\n\n    _Api.extend(scope, obj[struct.name], struct.propExt);\n  }\n}; // @todo - Is there need for an augment function?\n// _Api.augment = function ( inst, name )\n// {\n// \t// Find src object in the structure from the name\n// \tvar parts = name.split('.');\n// \t_Api.extend( inst, obj );\n// };\n//     [\n//       {\n//         name:      'data'                -- string   - Property name\n//         val:       function () {},       -- function - Api method (or undefined if just an object\n//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n//       },\n//       {\n//         name:     'row'\n//         val:       {},\n//         methodExt: [ ... ],\n//         propExt:   [\n//           {\n//             name:      'data'\n//             val:       function () {},\n//             methodExt: [ ... ],\n//             propExt:   [ ... ]\n//           },\n//           ...\n//         ]\n//       }\n//     ]\n\n\n_Api.register = _api_register = function (name, val) {\n  if (Array.isArray(name)) {\n    for (var j = 0, jen = name.length; j < jen; j++) {\n      _Api.register(name[j], val);\n    }\n\n    return;\n  }\n\n  var i,\n      ien,\n      heir = name.split('.'),\n      struct = __apiStruct,\n      key,\n      method;\n\n  var find = function (src, name) {\n    for (var i = 0, ien = src.length; i < ien; i++) {\n      if (src[i].name === name) {\n        return src[i];\n      }\n    }\n\n    return null;\n  };\n\n  for (i = 0, ien = heir.length; i < ien; i++) {\n    method = heir[i].indexOf('()') !== -1;\n    key = method ? heir[i].replace('()', '') : heir[i];\n    var src = find(struct, key);\n\n    if (!src) {\n      src = {\n        name: key,\n        val: {},\n        methodExt: [],\n        propExt: [],\n        type: 'object'\n      };\n      struct.push(src);\n    }\n\n    if (i === ien - 1) {\n      src.val = val;\n      src.type = typeof val === 'function' ? 'function' : $.isPlainObject(val) ? 'object' : 'other';\n    } else {\n      struct = method ? src.methodExt : src.propExt;\n    }\n  }\n};\n\n_Api.registerPlural = _api_registerPlural = function (pluralName, singularName, val) {\n  _Api.register(pluralName, val);\n\n  _Api.register(singularName, function () {\n    var ret = val.apply(this, arguments);\n\n    if (ret === this) {\n      // Returned item is the API instance that was passed in, return it\n      return this;\n    } else if (ret instanceof _Api) {\n      // New API instance returned, want the value from the first item\n      // in the returned array for the singular result.\n      return ret.length ? Array.isArray(ret[0]) ? new _Api(ret.context, ret[0]) : // Array results are 'enhanced'\n      ret[0] : undefined;\n    } // Non-API return - just fire it back\n\n\n    return ret;\n  });\n};\n/**\n * Selector for HTML tables. Apply the given selector to the give array of\n * DataTables settings objects.\n *\n * @param {string|integer} [selector] jQuery selector string or integer\n * @param  {array} Array of DataTables settings objects to be filtered\n * @return {array}\n * @ignore\n */\n\n\nvar __table_selector = function (selector, a) {\n  if (Array.isArray(selector)) {\n    return $.map(selector, function (item) {\n      return __table_selector(item, a);\n    });\n  } // Integer is used to pick out a table by index\n\n\n  if (typeof selector === 'number') {\n    return [a[selector]];\n  } // Perform a jQuery selector on the table nodes\n\n\n  var nodes = $.map(a, function (el, i) {\n    return el.nTable;\n  });\n  return $(nodes).filter(selector).map(function (i) {\n    // Need to translate back from the table node to the settings\n    var idx = $.inArray(this, nodes);\n    return a[idx];\n  }).toArray();\n};\n/**\n * Context selector for the API's context (i.e. the tables the API instance\n * refers to.\n *\n * @name    DataTable.Api#tables\n * @param {string|integer} [selector] Selector to pick which tables the iterator\n *   should operate on. If not given, all tables in the current context are\n *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n *   select multiple tables or as an integer to select a single table.\n * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n */\n\n\n_api_register('tables()', function (selector) {\n  // A new instance is created if there was a selector specified\n  return selector !== undefined && selector !== null ? new _Api(__table_selector(selector, this.context)) : this;\n});\n\n_api_register('table()', function (selector) {\n  var tables = this.tables(selector);\n  var ctx = tables.context; // Truncate to the first matched table\n\n  return ctx.length ? new _Api(ctx[0]) : tables;\n});\n\n_api_registerPlural('tables().nodes()', 'table().node()', function () {\n  return this.iterator('table', function (ctx) {\n    return ctx.nTable;\n  }, 1);\n});\n\n_api_registerPlural('tables().body()', 'table().body()', function () {\n  return this.iterator('table', function (ctx) {\n    return ctx.nTBody;\n  }, 1);\n});\n\n_api_registerPlural('tables().header()', 'table().header()', function () {\n  return this.iterator('table', function (ctx) {\n    return ctx.nTHead;\n  }, 1);\n});\n\n_api_registerPlural('tables().footer()', 'table().footer()', function () {\n  return this.iterator('table', function (ctx) {\n    return ctx.nTFoot;\n  }, 1);\n});\n\n_api_registerPlural('tables().containers()', 'table().container()', function () {\n  return this.iterator('table', function (ctx) {\n    return ctx.nTableWrapper;\n  }, 1);\n});\n/**\n * Redraw the tables in the current context.\n */\n\n\n_api_register('draw()', function (paging) {\n  return this.iterator('table', function (settings) {\n    if (paging === 'page') {\n      _fnDraw(settings);\n    } else {\n      if (typeof paging === 'string') {\n        paging = paging === 'full-hold' ? false : true;\n      }\n\n      _fnReDraw(settings, paging === false);\n    }\n  });\n});\n/**\n * Get the current page index.\n *\n * @return {integer} Current page index (zero based)\n */\n\n/**\n* Set the current page.\n*\n* Note that if you attempt to show a page which does not exist, DataTables will\n* not throw an error, but rather reset the paging.\n*\n* @param {integer|string} action The paging action to take. This can be one of:\n*  * `integer` - The page index to jump to\n*  * `string` - An action to take:\n*    * `first` - Jump to first page.\n*    * `next` - Jump to the next page\n*    * `previous` - Jump to previous page\n*    * `last` - Jump to the last page.\n* @returns {DataTables.Api} this\n*/\n\n\n_api_register('page()', function (action) {\n  if (action === undefined) {\n    return this.page.info().page; // not an expensive call\n  } // else, have an action to take on all tables\n\n\n  return this.iterator('table', function (settings) {\n    _fnPageChange(settings, action);\n  });\n});\n/**\n * Paging information for the first table in the current context.\n *\n * If you require paging information for another table, use the `table()` method\n * with a suitable selector.\n *\n * @return {object} Object with the following properties set:\n *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n *  * `pages` - Total number of pages\n *  * `start` - Display index for the first record shown on the current page\n *  * `end` - Display index for the last record shown on the current page\n *  * `length` - Display length (number of records). Note that generally `start\n *    + length = end`, but this is not always true, for example if there are\n *    only 2 records to show on the final page, with a length of 10.\n *  * `recordsTotal` - Full data set length\n *  * `recordsDisplay` - Data set length once the current filtering criterion\n *    are applied.\n */\n\n\n_api_register('page.info()', function (action) {\n  if (this.context.length === 0) {\n    return undefined;\n  }\n\n  var settings = this.context[0],\n      start = settings._iDisplayStart,\n      len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n      visRecords = settings.fnRecordsDisplay(),\n      all = len === -1;\n  return {\n    \"page\": all ? 0 : Math.floor(start / len),\n    \"pages\": all ? 1 : Math.ceil(visRecords / len),\n    \"start\": start,\n    \"end\": settings.fnDisplayEnd(),\n    \"length\": len,\n    \"recordsTotal\": settings.fnRecordsTotal(),\n    \"recordsDisplay\": visRecords,\n    \"serverSide\": _fnDataSource(settings) === 'ssp'\n  };\n});\n/**\n * Get the current page length.\n *\n * @return {integer} Current page length. Note `-1` indicates that all records\n *   are to be shown.\n */\n\n/**\n* Set the current page length.\n*\n* @param {integer} Page length to set. Use `-1` to show all records.\n* @returns {DataTables.Api} this\n*/\n\n\n_api_register('page.len()', function (len) {\n  // Note that we can't call this function 'length()' because `length`\n  // is a Javascript property of functions which defines how many arguments\n  // the function expects.\n  if (len === undefined) {\n    return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;\n  } // else, set the page length\n\n\n  return this.iterator('table', function (settings) {\n    _fnLengthChange(settings, len);\n  });\n});\n\nvar __reload = function (settings, holdPosition, callback) {\n  // Use the draw event to trigger a callback\n  if (callback) {\n    var api = new _Api(settings);\n    api.one('draw', function () {\n      callback(api.ajax.json());\n    });\n  }\n\n  if (_fnDataSource(settings) == 'ssp') {\n    _fnReDraw(settings, holdPosition);\n  } else {\n    _fnProcessingDisplay(settings, true); // Cancel an existing request\n\n\n    var xhr = settings.jqXHR;\n\n    if (xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    } // Trigger xhr\n\n\n    _fnBuildAjax(settings, [], function (json) {\n      _fnClearTable(settings);\n\n      var data = _fnAjaxDataSrc(settings, json);\n\n      for (var i = 0, ien = data.length; i < ien; i++) {\n        _fnAddData(settings, data[i]);\n      }\n\n      _fnReDraw(settings, holdPosition);\n\n      _fnProcessingDisplay(settings, false);\n    });\n  }\n};\n/**\n * Get the JSON response from the last Ajax request that DataTables made to the\n * server. Note that this returns the JSON from the first table in the current\n * context.\n *\n * @return {object} JSON received from the server.\n */\n\n\n_api_register('ajax.json()', function () {\n  var ctx = this.context;\n\n  if (ctx.length > 0) {\n    return ctx[0].json;\n  } // else return undefined;\n\n});\n/**\n * Get the data submitted in the last Ajax request\n */\n\n\n_api_register('ajax.params()', function () {\n  var ctx = this.context;\n\n  if (ctx.length > 0) {\n    return ctx[0].oAjaxData;\n  } // else return undefined;\n\n});\n/**\n * Reload tables from the Ajax data source. Note that this function will\n * automatically re-draw the table when the remote data has been loaded.\n *\n * @param {boolean} [reset=true] Reset (default) or hold the current paging\n *   position. A full re-sort and re-filter is performed when this method is\n *   called, which is why the pagination reset is the default action.\n * @returns {DataTables.Api} this\n */\n\n\n_api_register('ajax.reload()', function (callback, resetPaging) {\n  return this.iterator('table', function (settings) {\n    __reload(settings, resetPaging === false, callback);\n  });\n});\n/**\n * Get the current Ajax URL. Note that this returns the URL from the first\n * table in the current context.\n *\n * @return {string} Current Ajax source URL\n */\n\n/**\n* Set the Ajax URL. Note that this will set the URL for all tables in the\n* current context.\n*\n* @param {string} url URL to set.\n* @returns {DataTables.Api} this\n*/\n\n\n_api_register('ajax.url()', function (url) {\n  var ctx = this.context;\n\n  if (url === undefined) {\n    // get\n    if (ctx.length === 0) {\n      return undefined;\n    }\n\n    ctx = ctx[0];\n    return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;\n  } // set\n\n\n  return this.iterator('table', function (settings) {\n    if ($.isPlainObject(settings.ajax)) {\n      settings.ajax.url = url;\n    } else {\n      settings.ajax = url;\n    } // No need to consider sAjaxSource here since DataTables gives priority\n    // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n    // value of `sAjaxSource` redundant.\n\n  });\n});\n/**\n * Load data from the newly set Ajax URL. Note that this method is only\n * available when `ajax.url()` is used to set a URL. Additionally, this method\n * has the same effect as calling `ajax.reload()` but is provided for\n * convenience when setting a new URL. Like `ajax.reload()` it will\n * automatically redraw the table once the remote data has been loaded.\n *\n * @returns {DataTables.Api} this\n */\n\n\n_api_register('ajax.url().load()', function (callback, resetPaging) {\n  // Same as a reload, but makes sense to present it for easy access after a\n  // url change\n  return this.iterator('table', function (ctx) {\n    __reload(ctx, resetPaging === false, callback);\n  });\n});\n\nvar _selector_run = function (type, selector, selectFn, settings, opts) {\n  var out = [],\n      res,\n      a,\n      i,\n      ien,\n      j,\n      jen,\n      selectorType = typeof selector; // Can't just check for isArray here, as an API or jQuery instance might be\n  // given with their array like look\n\n  if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {\n    selector = [selector];\n  }\n\n  for (i = 0, ien = selector.length; i < ien; i++) {\n    // Only split on simple strings - complex expressions will be jQuery selectors\n    a = selector[i] && selector[i].split && !selector[i].match(/[\\[\\(:]/) ? selector[i].split(',') : [selector[i]];\n\n    for (j = 0, jen = a.length; j < jen; j++) {\n      res = selectFn(typeof a[j] === 'string' ? a[j].trim() : a[j]);\n\n      if (res && res.length) {\n        out = out.concat(res);\n      }\n    }\n  } // selector extensions\n\n\n  var ext = _ext.selector[type];\n\n  if (ext.length) {\n    for (i = 0, ien = ext.length; i < ien; i++) {\n      out = ext[i](settings, opts, out);\n    }\n  }\n\n  return _unique(out);\n};\n\nvar _selector_opts = function (opts) {\n  if (!opts) {\n    opts = {};\n  } // Backwards compatibility for 1.9- which used the terminology filter rather\n  // than search\n\n\n  if (opts.filter && opts.search === undefined) {\n    opts.search = opts.filter;\n  }\n\n  return $.extend({\n    search: 'none',\n    order: 'current',\n    page: 'all'\n  }, opts);\n};\n\nvar _selector_first = function (inst) {\n  // Reduce the API instance to the first item found\n  for (var i = 0, ien = inst.length; i < ien; i++) {\n    if (inst[i].length > 0) {\n      // Assign the first element to the first item in the instance\n      // and truncate the instance and context\n      inst[0] = inst[i];\n      inst[0].length = 1;\n      inst.length = 1;\n      inst.context = [inst.context[i]];\n      return inst;\n    }\n  } // Not found - return an empty instance\n\n\n  inst.length = 0;\n  return inst;\n};\n\nvar _selector_row_indexes = function (settings, opts) {\n  var i,\n      ien,\n      tmp,\n      a = [],\n      displayFiltered = settings.aiDisplay,\n      displayMaster = settings.aiDisplayMaster;\n  var search = opts.search,\n      // none, applied, removed\n  order = opts.order,\n      // applied, current, index (original - compatibility with 1.9)\n  page = opts.page; // all, current\n\n  if (_fnDataSource(settings) == 'ssp') {\n    // In server-side processing mode, most options are irrelevant since\n    // rows not shown don't exist and the index order is the applied order\n    // Removed is a special case - for consistency just return an empty\n    // array\n    return search === 'removed' ? [] : _range(0, displayMaster.length);\n  } else if (page == 'current') {\n    // Current page implies that order=current and filter=applied, since it is\n    // fairly senseless otherwise, regardless of what order and search actually\n    // are\n    for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {\n      a.push(displayFiltered[i]);\n    }\n  } else if (order == 'current' || order == 'applied') {\n    if (search == 'none') {\n      a = displayMaster.slice();\n    } else if (search == 'applied') {\n      a = displayFiltered.slice();\n    } else if (search == 'removed') {\n      // O(n+m) solution by creating a hash map\n      var displayFilteredMap = {};\n\n      for (var i = 0, ien = displayFiltered.length; i < ien; i++) {\n        displayFilteredMap[displayFiltered[i]] = null;\n      }\n\n      a = $.map(displayMaster, function (el) {\n        return !displayFilteredMap.hasOwnProperty(el) ? el : null;\n      });\n    }\n  } else if (order == 'index' || order == 'original') {\n    for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n      if (search == 'none') {\n        a.push(i);\n      } else {\n        // applied | removed\n        tmp = $.inArray(i, displayFiltered);\n\n        if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {\n          a.push(i);\n        }\n      }\n    }\n  }\n\n  return a;\n};\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Rows\n *\n * {}          - no selector - use all available rows\n * {integer}   - row aoData index\n * {node}      - TR node\n * {string}    - jQuery selector to apply to the TR elements\n * {array}     - jQuery array of nodes, or simply an array of TR nodes\n *\n */\n\n\nvar __row_selector = function (settings, selector, opts) {\n  var rows;\n\n  var run = function (sel) {\n    var selInt = _intVal(sel);\n\n    var i, ien;\n    var aoData = settings.aoData; // Short cut - selector is a number and no options provided (default is\n    // all records, so no need to check if the index is in there, since it\n    // must be - dev error if the index doesn't exist).\n\n    if (selInt !== null && !opts) {\n      return [selInt];\n    }\n\n    if (!rows) {\n      rows = _selector_row_indexes(settings, opts);\n    }\n\n    if (selInt !== null && $.inArray(selInt, rows) !== -1) {\n      // Selector - integer\n      return [selInt];\n    } else if (sel === null || sel === undefined || sel === '') {\n      // Selector - none\n      return rows;\n    } // Selector - function\n\n\n    if (typeof sel === 'function') {\n      return $.map(rows, function (idx) {\n        var row = aoData[idx];\n        return sel(idx, row._aData, row.nTr) ? idx : null;\n      });\n    } // Selector - node\n\n\n    if (sel.nodeName) {\n      var rowIdx = sel._DT_RowIndex; // Property added by DT for fast lookup\n\n      var cellIdx = sel._DT_CellIndex;\n\n      if (rowIdx !== undefined) {\n        // Make sure that the row is actually still present in the table\n        return aoData[rowIdx] && aoData[rowIdx].nTr === sel ? [rowIdx] : [];\n      } else if (cellIdx) {\n        return aoData[cellIdx.row] && aoData[cellIdx.row].nTr === sel.parentNode ? [cellIdx.row] : [];\n      } else {\n        var host = $(sel).closest('*[data-dt-row]');\n        return host.length ? [host.data('dt-row')] : [];\n      }\n    } // ID selector. Want to always be able to select rows by id, regardless\n    // of if the tr element has been created or not, so can't rely upon\n    // jQuery here - hence a custom implementation. This does not match\n    // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n    // but to select it using a CSS selector engine (like Sizzle or\n    // querySelect) it would need to need to be escaped for some characters.\n    // DataTables simplifies this for row selectors since you can select\n    // only a row. A # indicates an id any anything that follows is the id -\n    // unescaped.\n\n\n    if (typeof sel === 'string' && sel.charAt(0) === '#') {\n      // get row index from id\n      var rowObj = settings.aIds[sel.replace(/^#/, '')];\n\n      if (rowObj !== undefined) {\n        return [rowObj.idx];\n      } // need to fall through to jQuery in case there is DOM id that\n      // matches\n\n    } // Get nodes in the order from the `rows` array with null values removed\n\n\n    var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr')); // Selector - jQuery selector string, array of nodes or jQuery object/\n    // As jQuery's .filter() allows jQuery objects to be passed in filter,\n    // it also allows arrays, so this will cope with all three options\n\n\n    return $(nodes).filter(sel).map(function () {\n      return this._DT_RowIndex;\n    }).toArray();\n  };\n\n  return _selector_run('row', selector, run, settings, opts);\n};\n\n_api_register('rows()', function (selector, opts) {\n  // argument shifting\n  if (selector === undefined) {\n    selector = '';\n  } else if ($.isPlainObject(selector)) {\n    opts = selector;\n    selector = '';\n  }\n\n  opts = _selector_opts(opts);\n  var inst = this.iterator('table', function (settings) {\n    return __row_selector(settings, selector, opts);\n  }, 1); // Want argument shifting here and in __row_selector?\n\n  inst.selector.rows = selector;\n  inst.selector.opts = opts;\n  return inst;\n});\n\n_api_register('rows().nodes()', function () {\n  return this.iterator('row', function (settings, row) {\n    return settings.aoData[row].nTr || undefined;\n  }, 1);\n});\n\n_api_register('rows().data()', function () {\n  return this.iterator(true, 'rows', function (settings, rows) {\n    return _pluck_order(settings.aoData, rows, '_aData');\n  }, 1);\n});\n\n_api_registerPlural('rows().cache()', 'row().cache()', function (type) {\n  return this.iterator('row', function (settings, row) {\n    var r = settings.aoData[row];\n    return type === 'search' ? r._aFilterData : r._aSortData;\n  }, 1);\n});\n\n_api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {\n  return this.iterator('row', function (settings, row) {\n    _fnInvalidate(settings, row, src);\n  });\n});\n\n_api_registerPlural('rows().indexes()', 'row().index()', function () {\n  return this.iterator('row', function (settings, row) {\n    return row;\n  }, 1);\n});\n\n_api_registerPlural('rows().ids()', 'row().id()', function (hash) {\n  var a = [];\n  var context = this.context; // `iterator` will drop undefined values, but in this case we want them\n\n  for (var i = 0, ien = context.length; i < ien; i++) {\n    for (var j = 0, jen = this[i].length; j < jen; j++) {\n      var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);\n      a.push((hash === true ? '#' : '') + id);\n    }\n  }\n\n  return new _Api(context, a);\n});\n\n_api_registerPlural('rows().remove()', 'row().remove()', function () {\n  var that = this;\n  this.iterator('row', function (settings, row, thatIdx) {\n    var data = settings.aoData;\n    var rowData = data[row];\n    var i, ien, j, jen;\n    var loopRow, loopCells;\n    data.splice(row, 1); // Update the cached indexes\n\n    for (i = 0, ien = data.length; i < ien; i++) {\n      loopRow = data[i];\n      loopCells = loopRow.anCells; // Rows\n\n      if (loopRow.nTr !== null) {\n        loopRow.nTr._DT_RowIndex = i;\n      } // Cells\n\n\n      if (loopCells !== null) {\n        for (j = 0, jen = loopCells.length; j < jen; j++) {\n          loopCells[j]._DT_CellIndex.row = i;\n        }\n      }\n    } // Delete from the display arrays\n\n\n    _fnDeleteIndex(settings.aiDisplayMaster, row);\n\n    _fnDeleteIndex(settings.aiDisplay, row);\n\n    _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes\n    // For server-side processing tables - subtract the deleted row from the count\n\n\n    if (settings._iRecordsDisplay > 0) {\n      settings._iRecordsDisplay--;\n    } // Check for an 'overflow' they case for displaying the table\n\n\n    _fnLengthOverflow(settings); // Remove the row's ID reference if there is one\n\n\n    var id = settings.rowIdFn(rowData._aData);\n\n    if (id !== undefined) {\n      delete settings.aIds[id];\n    }\n  });\n  this.iterator('table', function (settings) {\n    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n      settings.aoData[i].idx = i;\n    }\n  });\n  return this;\n});\n\n_api_register('rows.add()', function (rows) {\n  var newRows = this.iterator('table', function (settings) {\n    var row, i, ien;\n    var out = [];\n\n    for (i = 0, ien = rows.length; i < ien; i++) {\n      row = rows[i];\n\n      if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n        out.push(_fnAddTr(settings, row)[0]);\n      } else {\n        out.push(_fnAddData(settings, row));\n      }\n    }\n\n    return out;\n  }, 1); // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\n  var modRows = this.rows(-1);\n  modRows.pop();\n  $.merge(modRows, newRows);\n  return modRows;\n});\n/**\n *\n */\n\n\n_api_register('row()', function (selector, opts) {\n  return _selector_first(this.rows(selector, opts));\n});\n\n_api_register('row().data()', function (data) {\n  var ctx = this.context;\n\n  if (data === undefined) {\n    // Get\n    return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;\n  } // Set\n\n\n  var row = ctx[0].aoData[this[0]];\n  row._aData = data; // If the DOM has an id, and the data source is an array\n\n  if (Array.isArray(data) && row.nTr && row.nTr.id) {\n    _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);\n  } // Automatically invalidate\n\n\n  _fnInvalidate(ctx[0], this[0], 'data');\n\n  return this;\n});\n\n_api_register('row().node()', function () {\n  var ctx = this.context;\n  return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;\n});\n\n_api_register('row.add()', function (row) {\n  // Allow a jQuery object to be passed in - only a single row is added from\n  // it though - the first element in the set\n  if (row instanceof $ && row.length) {\n    row = row[0];\n  }\n\n  var rows = this.iterator('table', function (settings) {\n    if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n      return _fnAddTr(settings, row)[0];\n    }\n\n    return _fnAddData(settings, row);\n  }); // Return an Api.rows() extended instance, with the newly added row selected\n\n  return this.row(rows[0]);\n});\n\n$(document).on('plugin-init.dt', function (e, context) {\n  var api = new _Api(context);\n  var namespace = 'on-plugin-init';\n  var stateSaveParamsEvent = 'stateSaveParams.' + namespace;\n  var destroyEvent = 'destroy. ' + namespace;\n  api.on(stateSaveParamsEvent, function (e, settings, d) {\n    // This could be more compact with the API, but it is a lot faster as a simple\n    // internal loop\n    var idFn = settings.rowIdFn;\n    var data = settings.aoData;\n    var ids = [];\n\n    for (var i = 0; i < data.length; i++) {\n      if (data[i]._detailsShow) {\n        ids.push('#' + idFn(data[i]._aData));\n      }\n    }\n\n    d.childRows = ids;\n  });\n  api.on(destroyEvent, function () {\n    api.off(stateSaveParamsEvent + ' ' + destroyEvent);\n  });\n  var loaded = api.state.loaded();\n\n  if (loaded && loaded.childRows) {\n    api.rows($.map(loaded.childRows, function (id) {\n      return id.replace(/:/g, '\\\\:');\n    })).every(function () {\n      _fnCallbackFire(context, null, 'requestChild', [this]);\n    });\n  }\n});\n\nvar __details_add = function (ctx, row, data, klass) {\n  // Convert to array of TR elements\n  var rows = [];\n\n  var addRow = function (r, k) {\n    // Recursion to allow for arrays of jQuery objects\n    if (Array.isArray(r) || r instanceof $) {\n      for (var i = 0, ien = r.length; i < ien; i++) {\n        addRow(r[i], k);\n      }\n\n      return;\n    } // If we get a TR element, then just add it directly - up to the dev\n    // to add the correct number of columns etc\n\n\n    if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {\n      rows.push(r);\n    } else {\n      // Otherwise create a row with a wrapper\n      var created = $('<tr><td></td></tr>').addClass(k);\n      $('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);\n      rows.push(created[0]);\n    }\n  };\n\n  addRow(data, klass);\n\n  if (row._details) {\n    row._details.detach();\n  }\n\n  row._details = $(rows); // If the children were already shown, that state should be retained\n\n  if (row._detailsShow) {\n    row._details.insertAfter(row.nTr);\n  }\n}; // Make state saving of child row details async to allow them to be batch processed\n\n\nvar __details_state = DataTable.util.throttle(function (ctx) {\n  _fnSaveState(ctx[0]);\n}, 500);\n\nvar __details_remove = function (api, idx) {\n  var ctx = api.context;\n\n  if (ctx.length) {\n    var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];\n\n    if (row && row._details) {\n      row._details.remove();\n\n      row._detailsShow = undefined;\n      row._details = undefined;\n      $(row.nTr).removeClass('dt-hasChild');\n\n      __details_state(ctx);\n    }\n  }\n};\n\nvar __details_display = function (api, show) {\n  var ctx = api.context;\n\n  if (ctx.length && api.length) {\n    var row = ctx[0].aoData[api[0]];\n\n    if (row._details) {\n      row._detailsShow = show;\n\n      if (show) {\n        row._details.insertAfter(row.nTr);\n\n        $(row.nTr).addClass('dt-hasChild');\n      } else {\n        row._details.detach();\n\n        $(row.nTr).removeClass('dt-hasChild');\n      }\n\n      _fnCallbackFire(ctx[0], null, 'childRow', [show, api.row(api[0])]);\n\n      __details_events(ctx[0]);\n\n      __details_state(ctx);\n    }\n  }\n};\n\nvar __details_events = function (settings) {\n  var api = new _Api(settings);\n  var namespace = '.dt.DT_details';\n  var drawEvent = 'draw' + namespace;\n  var colvisEvent = 'column-sizing' + namespace;\n  var destroyEvent = 'destroy' + namespace;\n  var data = settings.aoData;\n  api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);\n\n  if (_pluck(data, '_details').length > 0) {\n    // On each draw, insert the required elements into the document\n    api.on(drawEvent, function (e, ctx) {\n      if (settings !== ctx) {\n        return;\n      }\n\n      api.rows({\n        page: 'current'\n      }).eq(0).each(function (idx) {\n        // Internal data grab\n        var row = data[idx];\n\n        if (row._detailsShow) {\n          row._details.insertAfter(row.nTr);\n        }\n      });\n    }); // Column visibility change - update the colspan\n\n    api.on(colvisEvent, function (e, ctx, idx, vis) {\n      if (settings !== ctx) {\n        return;\n      } // Update the colspan for the details rows (note, only if it already has\n      // a colspan)\n\n\n      var row,\n          visible = _fnVisbleColumns(ctx);\n\n      for (var i = 0, ien = data.length; i < ien; i++) {\n        row = data[i];\n\n        if (row._details) {\n          row._details.each(function () {\n            var el = $(this).children('td');\n\n            if (el.length == 1) {\n              el.attr('colspan', visible);\n            }\n          });\n        }\n      }\n    }); // Table destroyed - nuke any child rows\n\n    api.on(destroyEvent, function (e, ctx) {\n      if (settings !== ctx) {\n        return;\n      }\n\n      for (var i = 0, ien = data.length; i < ien; i++) {\n        if (data[i]._details) {\n          __details_remove(api, i);\n        }\n      }\n    });\n  }\n}; // Strings for the method names to help minification\n\n\nvar _emp = '';\n\nvar _child_obj = _emp + 'row().child';\n\nvar _child_mth = _child_obj + '()'; // data can be:\n//  tr\n//  string\n//  jQuery or array of any of the above\n\n\n_api_register(_child_mth, function (data, klass) {\n  var ctx = this.context;\n\n  if (data === undefined) {\n    // get\n    return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;\n  } else if (data === true) {\n    // show\n    this.child.show();\n  } else if (data === false) {\n    // remove\n    __details_remove(this);\n  } else if (ctx.length && this.length) {\n    // set\n    __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);\n  }\n\n  return this;\n});\n\n_api_register([_child_obj + '.show()', _child_mth + '.show()' // only when `child()` was called with parameters (without\n], function (show) {\n  // it returns an object and this method is not executed)\n  __details_display(this, true);\n\n  return this;\n});\n\n_api_register([_child_obj + '.hide()', _child_mth + '.hide()' // only when `child()` was called with parameters (without\n], function () {\n  // it returns an object and this method is not executed)\n  __details_display(this, false);\n\n  return this;\n});\n\n_api_register([_child_obj + '.remove()', _child_mth + '.remove()' // only when `child()` was called with parameters (without\n], function () {\n  // it returns an object and this method is not executed)\n  __details_remove(this);\n\n  return this;\n});\n\n_api_register(_child_obj + '.isShown()', function () {\n  var ctx = this.context;\n\n  if (ctx.length && this.length) {\n    // _detailsShown as false or undefined will fall through to return false\n    return ctx[0].aoData[this[0]]._detailsShow || false;\n  }\n\n  return false;\n});\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Columns\n *\n * {integer}           - column index (>=0 count from left, <0 count from right)\n * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n * \"{string}:name\"     - column name\n * \"{string}\"          - jQuery selector on column header nodes\n *\n */\n// can be an array of these items, comma separated list, or an array of comma\n// separated lists\n\n\nvar __re_column_selector = /^([^:]+):(name|visIdx|visible)$/; // r1 and r2 are redundant - but it means that the parameters match for the\n// iterator callback in columns().data()\n\nvar __columnData = function (settings, column, r1, r2, rows) {\n  var a = [];\n\n  for (var row = 0, ien = rows.length; row < ien; row++) {\n    a.push(_fnGetCellData(settings, rows[row], column));\n  }\n\n  return a;\n};\n\nvar __column_selector = function (settings, selector, opts) {\n  var columns = settings.aoColumns,\n      names = _pluck(columns, 'sName'),\n      nodes = _pluck(columns, 'nTh');\n\n  var run = function (s) {\n    var selInt = _intVal(s); // Selector - all\n\n\n    if (s === '') {\n      return _range(columns.length);\n    } // Selector - index\n\n\n    if (selInt !== null) {\n      return [selInt >= 0 ? selInt : // Count from left\n      columns.length + selInt // Count from right (+ because its a negative value)\n      ];\n    } // Selector = function\n\n\n    if (typeof s === 'function') {\n      var rows = _selector_row_indexes(settings, opts);\n\n      return $.map(columns, function (col, idx) {\n        return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;\n      });\n    } // jQuery or string selector\n\n\n    var match = typeof s === 'string' ? s.match(__re_column_selector) : '';\n\n    if (match) {\n      switch (match[2]) {\n        case 'visIdx':\n        case 'visible':\n          var idx = parseInt(match[1], 10); // Visible index given, convert to column index\n\n          if (idx < 0) {\n            // Counting from the right\n            var visColumns = $.map(columns, function (col, i) {\n              return col.bVisible ? i : null;\n            });\n            return [visColumns[visColumns.length + idx]];\n          } // Counting from the left\n\n\n          return [_fnVisibleToColumnIndex(settings, idx)];\n\n        case 'name':\n          // match by name. `names` is column index complete and in order\n          return $.map(names, function (name, i) {\n            return name === match[1] ? i : null;\n          });\n\n        default:\n          return [];\n      }\n    } // Cell in the table body\n\n\n    if (s.nodeName && s._DT_CellIndex) {\n      return [s._DT_CellIndex.column];\n    } // jQuery selector on the TH elements for the columns\n\n\n    var jqResult = $(nodes).filter(s).map(function () {\n      return $.inArray(this, nodes); // `nodes` is column index complete and in order\n    }).toArray();\n\n    if (jqResult.length || !s.nodeName) {\n      return jqResult;\n    } // Otherwise a node which might have a `dt-column` data attribute, or be\n    // a child or such an element\n\n\n    var host = $(s).closest('*[data-dt-column]');\n    return host.length ? [host.data('dt-column')] : [];\n  };\n\n  return _selector_run('column', selector, run, settings, opts);\n};\n\nvar __setColumnVis = function (settings, column, vis) {\n  var cols = settings.aoColumns,\n      col = cols[column],\n      data = settings.aoData,\n      row,\n      cells,\n      i,\n      ien,\n      tr; // Get\n\n  if (vis === undefined) {\n    return col.bVisible;\n  } // Set\n  // No change\n\n\n  if (col.bVisible === vis) {\n    return;\n  }\n\n  if (vis) {\n    // Insert column\n    // Need to decide if we should use appendChild or insertBefore\n    var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);\n\n    for (i = 0, ien = data.length; i < ien; i++) {\n      tr = data[i].nTr;\n      cells = data[i].anCells;\n\n      if (tr) {\n        // insertBefore can act like appendChild if 2nd arg is null\n        tr.insertBefore(cells[column], cells[insertBefore] || null);\n      }\n    }\n  } else {\n    // Remove column\n    $(_pluck(settings.aoData, 'anCells', column)).detach();\n  } // Common actions\n\n\n  col.bVisible = vis;\n};\n\n_api_register('columns()', function (selector, opts) {\n  // argument shifting\n  if (selector === undefined) {\n    selector = '';\n  } else if ($.isPlainObject(selector)) {\n    opts = selector;\n    selector = '';\n  }\n\n  opts = _selector_opts(opts);\n  var inst = this.iterator('table', function (settings) {\n    return __column_selector(settings, selector, opts);\n  }, 1); // Want argument shifting here and in _row_selector?\n\n  inst.selector.cols = selector;\n  inst.selector.opts = opts;\n  return inst;\n});\n\n_api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {\n  return this.iterator('column', function (settings, column) {\n    return settings.aoColumns[column].nTh;\n  }, 1);\n});\n\n_api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {\n  return this.iterator('column', function (settings, column) {\n    return settings.aoColumns[column].nTf;\n  }, 1);\n});\n\n_api_registerPlural('columns().data()', 'column().data()', function () {\n  return this.iterator('column-rows', __columnData, 1);\n});\n\n_api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {\n  return this.iterator('column', function (settings, column) {\n    return settings.aoColumns[column].mData;\n  }, 1);\n});\n\n_api_registerPlural('columns().cache()', 'column().cache()', function (type) {\n  return this.iterator('column-rows', function (settings, column, i, j, rows) {\n    return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);\n  }, 1);\n});\n\n_api_registerPlural('columns().nodes()', 'column().nodes()', function () {\n  return this.iterator('column-rows', function (settings, column, i, j, rows) {\n    return _pluck_order(settings.aoData, rows, 'anCells', column);\n  }, 1);\n});\n\n_api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {\n  var that = this;\n  var ret = this.iterator('column', function (settings, column) {\n    if (vis === undefined) {\n      return settings.aoColumns[column].bVisible;\n    } // else\n\n\n    __setColumnVis(settings, column, vis);\n  }); // Group the column visibility changes\n\n  if (vis !== undefined) {\n    this.iterator('table', function (settings) {\n      // Redraw the header after changes\n      _fnDrawHead(settings, settings.aoHeader);\n\n      _fnDrawHead(settings, settings.aoFooter); // Update colspan for no records display. Child rows and extensions will use their own\n      // listeners to do this - only need to update the empty table item here\n\n\n      if (!settings.aiDisplay.length) {\n        $(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\n      }\n\n      _fnSaveState(settings); // Second loop once the first is done for events\n\n\n      that.iterator('column', function (settings, column) {\n        _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, calc]);\n      });\n\n      if (calc === undefined || calc) {\n        that.columns.adjust();\n      }\n    });\n  }\n\n  return ret;\n});\n\n_api_registerPlural('columns().indexes()', 'column().index()', function (type) {\n  return this.iterator('column', function (settings, column) {\n    return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;\n  }, 1);\n});\n\n_api_register('columns.adjust()', function () {\n  return this.iterator('table', function (settings) {\n    _fnAdjustColumnSizing(settings);\n  }, 1);\n});\n\n_api_register('column.index()', function (type, idx) {\n  if (this.context.length !== 0) {\n    var ctx = this.context[0];\n\n    if (type === 'fromVisible' || type === 'toData') {\n      return _fnVisibleToColumnIndex(ctx, idx);\n    } else if (type === 'fromData' || type === 'toVisible') {\n      return _fnColumnIndexToVisible(ctx, idx);\n    }\n  }\n});\n\n_api_register('column()', function (selector, opts) {\n  return _selector_first(this.columns(selector, opts));\n});\n\nvar __cell_selector = function (settings, selector, opts) {\n  var data = settings.aoData;\n\n  var rows = _selector_row_indexes(settings, opts);\n\n  var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));\n\n  var allCells = $(_flatten([], cells));\n  var row;\n  var columns = settings.aoColumns.length;\n  var a, i, ien, j, o, host;\n\n  var run = function (s) {\n    var fnSelector = typeof s === 'function';\n\n    if (s === null || s === undefined || fnSelector) {\n      // All cells and function selectors\n      a = [];\n\n      for (i = 0, ien = rows.length; i < ien; i++) {\n        row = rows[i];\n\n        for (j = 0; j < columns; j++) {\n          o = {\n            row: row,\n            column: j\n          };\n\n          if (fnSelector) {\n            // Selector - function\n            host = data[row];\n\n            if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {\n              a.push(o);\n            }\n          } else {\n            // Selector - all\n            a.push(o);\n          }\n        }\n      }\n\n      return a;\n    } // Selector - index\n\n\n    if ($.isPlainObject(s)) {\n      // Valid cell index and its in the array of selectable rows\n      return s.column !== undefined && s.row !== undefined && $.inArray(s.row, rows) !== -1 ? [s] : [];\n    } // Selector - jQuery filtered cells\n\n\n    var jqResult = allCells.filter(s).map(function (i, el) {\n      return {\n        // use a new object, in case someone changes the values\n        row: el._DT_CellIndex.row,\n        column: el._DT_CellIndex.column\n      };\n    }).toArray();\n\n    if (jqResult.length || !s.nodeName) {\n      return jqResult;\n    } // Otherwise the selector is a node, and there is one last option - the\n    // element might be a child of an element which has dt-row and dt-column\n    // data attributes\n\n\n    host = $(s).closest('*[data-dt-row]');\n    return host.length ? [{\n      row: host.data('dt-row'),\n      column: host.data('dt-column')\n    }] : [];\n  };\n\n  return _selector_run('cell', selector, run, settings, opts);\n};\n\n_api_register('cells()', function (rowSelector, columnSelector, opts) {\n  // Argument shifting\n  if ($.isPlainObject(rowSelector)) {\n    // Indexes\n    if (rowSelector.row === undefined) {\n      // Selector options in first parameter\n      opts = rowSelector;\n      rowSelector = null;\n    } else {\n      // Cell index objects in first parameter\n      opts = columnSelector;\n      columnSelector = null;\n    }\n  }\n\n  if ($.isPlainObject(columnSelector)) {\n    opts = columnSelector;\n    columnSelector = null;\n  } // Cell selector\n\n\n  if (columnSelector === null || columnSelector === undefined) {\n    return this.iterator('table', function (settings) {\n      return __cell_selector(settings, rowSelector, _selector_opts(opts));\n    });\n  } // The default built in options need to apply to row and columns\n\n\n  var internalOpts = opts ? {\n    page: opts.page,\n    order: opts.order,\n    search: opts.search\n  } : {}; // Row + column selector\n\n  var columns = this.columns(columnSelector, internalOpts);\n  var rows = this.rows(rowSelector, internalOpts);\n  var i, ien, j, jen;\n  var cellsNoOpts = this.iterator('table', function (settings, idx) {\n    var a = [];\n\n    for (i = 0, ien = rows[idx].length; i < ien; i++) {\n      for (j = 0, jen = columns[idx].length; j < jen; j++) {\n        a.push({\n          row: rows[idx][i],\n          column: columns[idx][j]\n        });\n      }\n    }\n\n    return a;\n  }, 1); // There is currently only one extension which uses a cell selector extension\n  // It is a _major_ performance drag to run this if it isn't needed, so this is\n  // an extension specific check at the moment\n\n  var cells = opts && opts.selected ? this.cells(cellsNoOpts, opts) : cellsNoOpts;\n  $.extend(cells.selector, {\n    cols: columnSelector,\n    rows: rowSelector,\n    opts: opts\n  });\n  return cells;\n});\n\n_api_registerPlural('cells().nodes()', 'cell().node()', function () {\n  return this.iterator('cell', function (settings, row, column) {\n    var data = settings.aoData[row];\n    return data && data.anCells ? data.anCells[column] : undefined;\n  }, 1);\n});\n\n_api_register('cells().data()', function () {\n  return this.iterator('cell', function (settings, row, column) {\n    return _fnGetCellData(settings, row, column);\n  }, 1);\n});\n\n_api_registerPlural('cells().cache()', 'cell().cache()', function (type) {\n  type = type === 'search' ? '_aFilterData' : '_aSortData';\n  return this.iterator('cell', function (settings, row, column) {\n    return settings.aoData[row][type][column];\n  }, 1);\n});\n\n_api_registerPlural('cells().render()', 'cell().render()', function (type) {\n  return this.iterator('cell', function (settings, row, column) {\n    return _fnGetCellData(settings, row, column, type);\n  }, 1);\n});\n\n_api_registerPlural('cells().indexes()', 'cell().index()', function () {\n  return this.iterator('cell', function (settings, row, column) {\n    return {\n      row: row,\n      column: column,\n      columnVisible: _fnColumnIndexToVisible(settings, column)\n    };\n  }, 1);\n});\n\n_api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {\n  return this.iterator('cell', function (settings, row, column) {\n    _fnInvalidate(settings, row, src, column);\n  });\n});\n\n_api_register('cell()', function (rowSelector, columnSelector, opts) {\n  return _selector_first(this.cells(rowSelector, columnSelector, opts));\n});\n\n_api_register('cell().data()', function (data) {\n  var ctx = this.context;\n  var cell = this[0];\n\n  if (data === undefined) {\n    // Get\n    return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;\n  } // Set\n\n\n  _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);\n\n  _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);\n\n  return this;\n});\n/**\n * Get current ordering (sorting) that has been applied to the table.\n *\n * @returns {array} 2D array containing the sorting information for the first\n *   table in the current context. Each element in the parent array represents\n *   a column being sorted upon (i.e. multi-sorting with two columns would have\n *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n *   the column index that the sorting condition applies to, the second is the\n *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n *   index of the sorting order from the `column.sorting` initialisation array.\n */\n\n/**\n* Set the ordering for the table.\n*\n* @param {integer} order Column index to sort upon.\n* @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n* @returns {DataTables.Api} this\n*/\n\n/**\n* Set the ordering for the table.\n*\n* @param {array} order 1D array of sorting information to be applied.\n* @param {array} [...] Optional additional sorting conditions\n* @returns {DataTables.Api} this\n*/\n\n/**\n* Set the ordering for the table.\n*\n* @param {array} order 2D array of sorting information to be applied.\n* @returns {DataTables.Api} this\n*/\n\n\n_api_register('order()', function (order, dir) {\n  var ctx = this.context;\n\n  if (order === undefined) {\n    // get\n    return ctx.length !== 0 ? ctx[0].aaSorting : undefined;\n  } // set\n\n\n  if (typeof order === 'number') {\n    // Simple column / direction passed in\n    order = [[order, dir]];\n  } else if (order.length && !Array.isArray(order[0])) {\n    // Arguments passed in (list of 1D arrays)\n    order = Array.prototype.slice.call(arguments);\n  } // otherwise a 2D array was passed in\n\n\n  return this.iterator('table', function (settings) {\n    settings.aaSorting = order.slice();\n  });\n});\n/**\n * Attach a sort listener to an element for a given column\n *\n * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n *   listener to. This can take the form of a single DOM node, a jQuery\n *   collection of nodes or a jQuery selector which will identify the node(s).\n * @param {integer} column the column that a click on this node will sort on\n * @param {function} [callback] callback function when sort is run\n * @returns {DataTables.Api} this\n */\n\n\n_api_register('order.listener()', function (node, column, callback) {\n  return this.iterator('table', function (settings) {\n    _fnSortAttachListener(settings, node, column, callback);\n  });\n});\n\n_api_register('order.fixed()', function (set) {\n  if (!set) {\n    var ctx = this.context;\n    var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;\n    return Array.isArray(fixed) ? {\n      pre: fixed\n    } : fixed;\n  }\n\n  return this.iterator('table', function (settings) {\n    settings.aaSortingFixed = $.extend(true, {}, set);\n  });\n}); // Order by the selected column(s)\n\n\n_api_register(['columns().order()', 'column().order()'], function (dir) {\n  var that = this;\n  return this.iterator('table', function (settings, i) {\n    var sort = [];\n    $.each(that[i], function (j, col) {\n      sort.push([col, dir]);\n    });\n    settings.aaSorting = sort;\n  });\n});\n\n_api_register('search()', function (input, regex, smart, caseInsen) {\n  var ctx = this.context;\n\n  if (input === undefined) {\n    // get\n    return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;\n  } // set\n\n\n  return this.iterator('table', function (settings) {\n    if (!settings.oFeatures.bFilter) {\n      return;\n    }\n\n    _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {\n      \"sSearch\": input + \"\",\n      \"bRegex\": regex === null ? false : regex,\n      \"bSmart\": smart === null ? true : smart,\n      \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n    }), 1);\n  });\n});\n\n_api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {\n  return this.iterator('column', function (settings, column) {\n    var preSearch = settings.aoPreSearchCols;\n\n    if (input === undefined) {\n      // get\n      return preSearch[column].sSearch;\n    } // set\n\n\n    if (!settings.oFeatures.bFilter) {\n      return;\n    }\n\n    $.extend(preSearch[column], {\n      \"sSearch\": input + \"\",\n      \"bRegex\": regex === null ? false : regex,\n      \"bSmart\": smart === null ? true : smart,\n      \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n    });\n\n    _fnFilterComplete(settings, settings.oPreviousSearch, 1);\n  });\n});\n/*\n * State API methods\n */\n\n\n_api_register('state()', function () {\n  return this.context.length ? this.context[0].oSavedState : null;\n});\n\n_api_register('state.clear()', function () {\n  return this.iterator('table', function (settings) {\n    // Save an empty object\n    settings.fnStateSaveCallback.call(settings.oInstance, settings, {});\n  });\n});\n\n_api_register('state.loaded()', function () {\n  return this.context.length ? this.context[0].oLoadedState : null;\n});\n\n_api_register('state.save()', function () {\n  return this.iterator('table', function (settings) {\n    _fnSaveState(settings);\n  });\n});\n/**\n * Set the jQuery or window object to be used by DataTables\n *\n * @param {*} module Library / container object\n * @param {string} [type] Library or container type `lib`, `win` or `datetime`.\n *   If not provided, automatic detection is attempted.\n */\n\n\nDataTable.use = function (module, type) {\n  if (type === 'lib' || module.fn) {\n    $ = module;\n  } else if (type == 'win' || module.document) {\n    window = module;\n    document = module.document;\n  } else if (type === 'datetime' || module.type === 'DateTime') {\n    DataTable.DateTime = module;\n  }\n};\n/**\n * CommonJS factory function pass through. This will check if the arguments\n * given are a window object or a jQuery object. If so they are set\n * accordingly.\n * @param {*} root Window\n * @param {*} jq jQUery\n * @returns {boolean} Indicator\n */\n\n\nDataTable.factory = function (root, jq) {\n  var is = false; // Test if the first parameter is a window object\n\n  if (root && root.document) {\n    window = root;\n    document = root.document;\n  } // Test if the second parameter is a jQuery object\n\n\n  if (jq && jq.fn && jq.fn.jquery) {\n    $ = jq;\n    is = true;\n  }\n\n  return is;\n};\n/**\n * Provide a common method for plug-ins to check the version of DataTables being\n * used, in order to ensure compatibility.\n *\n *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n *  @returns {boolean} true if this version of DataTables is greater or equal to\n *    the required version, or false if this version of DataTales is not\n *    suitable\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n */\n\n\nDataTable.versionCheck = DataTable.fnVersionCheck = function (version) {\n  var aThis = DataTable.version.split('.');\n  var aThat = version.split('.');\n  var iThis, iThat;\n\n  for (var i = 0, iLen = aThat.length; i < iLen; i++) {\n    iThis = parseInt(aThis[i], 10) || 0;\n    iThat = parseInt(aThat[i], 10) || 0; // Parts are the same, keep comparing\n\n    if (iThis === iThat) {\n      continue;\n    } // Parts are different, return immediately\n\n\n    return iThis > iThat;\n  }\n\n  return true;\n};\n/**\n * Check if a `<table>` node is a DataTable table already or not.\n *\n *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n *      selector for the table to test. Note that if more than more than one\n *      table is passed on, only the first will be checked\n *  @returns {boolean} true the table given is a DataTable, or false otherwise\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n *      $('#example').dataTable();\n *    }\n */\n\n\nDataTable.isDataTable = DataTable.fnIsDataTable = function (table) {\n  var t = $(table).get(0);\n  var is = false;\n\n  if (table instanceof DataTable.Api) {\n    return true;\n  }\n\n  $.each(DataTable.settings, function (i, o) {\n    var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n    var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\n    if (o.nTable === t || head === t || foot === t) {\n      is = true;\n    }\n  });\n  return is;\n};\n/**\n * Get all DataTable tables that have been initialised - optionally you can\n * select to get only currently visible tables.\n *\n *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n *    or visible tables only.\n *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n *    DataTables\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    $.each( $.fn.dataTable.tables(true), function () {\n *      $(table).DataTable().columns.adjust();\n *    } );\n */\n\n\nDataTable.tables = DataTable.fnTables = function (visible) {\n  var api = false;\n\n  if ($.isPlainObject(visible)) {\n    api = visible.api;\n    visible = visible.visible;\n  }\n\n  var a = $.map(DataTable.settings, function (o) {\n    if (!visible || visible && $(o.nTable).is(':visible')) {\n      return o.nTable;\n    }\n  });\n  return api ? new _Api(a) : a;\n};\n/**\n * Convert from camel case parameters to Hungarian notation. This is made public\n * for the extensions to provide the same ability as DataTables core to accept\n * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n * parameters.\n *\n *  @param {object} src The model object which holds all parameters that can be\n *    mapped.\n *  @param {object} user The object to convert from camel case to Hungarian.\n *  @param {boolean} force When set to `true`, properties which already have a\n *    Hungarian value in the `user` object will be overwritten. Otherwise they\n *    won't be.\n */\n\n\nDataTable.camelToHungarian = _fnCamelToHungarian;\n/**\n *\n */\n\n_api_register('$()', function (selector, opts) {\n  var rows = this.rows(opts).nodes(),\n      // Get all rows\n  jqRows = $(rows);\n  return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));\n}); // jQuery functions to operate on the tables\n\n\n$.each(['on', 'one', 'off'], function (i, key) {\n  _api_register(key + '()', function () {\n    var args = Array.prototype.slice.call(arguments); // Add the `dt` namespace automatically if it isn't already present\n\n    args[0] = $.map(args[0].split(/\\s/), function (e) {\n      return !e.match(/\\.dt\\b/) ? e + '.dt' : e;\n    }).join(' ');\n    var inst = $(this.tables().nodes());\n    inst[key].apply(inst, args);\n    return this;\n  });\n});\n\n_api_register('clear()', function () {\n  return this.iterator('table', function (settings) {\n    _fnClearTable(settings);\n  });\n});\n\n_api_register('settings()', function () {\n  return new _Api(this.context, this.context);\n});\n\n_api_register('init()', function () {\n  var ctx = this.context;\n  return ctx.length ? ctx[0].oInit : null;\n});\n\n_api_register('data()', function () {\n  return this.iterator('table', function (settings) {\n    return _pluck(settings.aoData, '_aData');\n  }).flatten();\n});\n\n_api_register('destroy()', function (remove) {\n  remove = remove || false;\n  return this.iterator('table', function (settings) {\n    var classes = settings.oClasses;\n    var table = settings.nTable;\n    var tbody = settings.nTBody;\n    var thead = settings.nTHead;\n    var tfoot = settings.nTFoot;\n    var jqTable = $(table);\n    var jqTbody = $(tbody);\n    var jqWrapper = $(settings.nTableWrapper);\n    var rows = $.map(settings.aoData, function (r) {\n      return r.nTr;\n    });\n    var i, ien; // Flag to note that the table is currently being destroyed - no action\n    // should be taken\n\n    settings.bDestroying = true; // Fire off the destroy callbacks for plug-ins etc\n\n    _fnCallbackFire(settings, \"aoDestroyCallback\", \"destroy\", [settings]); // If not being removed from the document, make all columns visible\n\n\n    if (!remove) {\n      new _Api(settings).columns().visible(true);\n    } // Blitz all `DT` namespaced events (these are internal events, the\n    // lowercase, `dt` events are user subscribed and they are responsible\n    // for removing them\n\n\n    jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n    $(window).off('.DT-' + settings.sInstance); // When scrolling we had to break the table up - restore it\n\n    if (table != thead.parentNode) {\n      jqTable.children('thead').detach();\n      jqTable.append(thead);\n    }\n\n    if (tfoot && table != tfoot.parentNode) {\n      jqTable.children('tfoot').detach();\n      jqTable.append(tfoot);\n    }\n\n    settings.aaSorting = [];\n    settings.aaSortingFixed = [];\n\n    _fnSortingClasses(settings);\n\n    $(rows).removeClass(settings.asStripeClasses.join(' '));\n    $('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone); // Add the TR elements back into the table in their original order\n\n    jqTbody.children().detach();\n    jqTbody.append(rows);\n    var orig = settings.nTableWrapper.parentNode; // Remove the DataTables generated nodes, events and classes\n\n    var removedMethod = remove ? 'remove' : 'detach';\n    jqTable[removedMethod]();\n    jqWrapper[removedMethod](); // If we need to reattach the table to the document\n\n    if (!remove && orig) {\n      // insertBefore acts like appendChild if !arg[1]\n      orig.insertBefore(table, settings.nTableReinsertBefore); // Restore the width of the original table - was read from the style property,\n      // so we can restore directly to that\n\n      jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable); // If the were originally stripe classes - then we add them back here.\n      // Note this is not fool proof (for example if not all rows had stripe\n      // classes - but it's a good effort without getting carried away\n\n      ien = settings.asDestroyStripes.length;\n\n      if (ien) {\n        jqTbody.children().each(function (i) {\n          $(this).addClass(settings.asDestroyStripes[i % ien]);\n        });\n      }\n    }\n    /* Remove the settings object from the settings array */\n\n\n    var idx = $.inArray(settings, DataTable.settings);\n\n    if (idx !== -1) {\n      DataTable.settings.splice(idx, 1);\n    }\n  });\n}); // Add the `every()` method for rows, columns and cells in a compact form\n\n\n$.each(['column', 'row', 'cell'], function (i, type) {\n  _api_register(type + 's().every()', function (fn) {\n    var opts = this.selector.opts;\n    var api = this;\n    return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {\n      // Rows and columns:\n      //  arg1 - index\n      //  arg2 - table counter\n      //  arg3 - loop counter\n      //  arg4 - undefined\n      // Cells:\n      //  arg1 - row index\n      //  arg2 - column index\n      //  arg3 - table counter\n      //  arg4 - loop counter\n      fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);\n    });\n  });\n}); // i18n method for extensions to be able to use the language object from the\n// DataTable\n\n_api_register('i18n()', function (token, def, plural) {\n  var ctx = this.context[0];\n\n  var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);\n\n  if (resolved === undefined) {\n    resolved = def;\n  }\n\n  if (plural !== undefined && $.isPlainObject(resolved)) {\n    resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;\n  }\n\n  return typeof resolved === 'string' ? resolved.replace('%d', plural) // nb: plural might be undefined,\n  : resolved;\n});\n/**\n * Version string for plug-ins to check compatibility. Allowed format is\n * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n * only for non-release builds. See https://semver.org/ for more information.\n *  @member\n *  @type string\n *  @default Version number\n */\n\n\nDataTable.version = \"1.13.7\";\n/**\n * Private data store, containing all of the settings objects that are\n * created for the tables on a given page.\n *\n * Note that the `DataTable.settings` object is aliased to\n * `jQuery.fn.dataTableExt` through which it may be accessed and\n * manipulated, or `jQuery.fn.dataTable.settings`.\n *  @member\n *  @type array\n *  @default []\n *  @private\n */\n\nDataTable.settings = [];\n/**\n * Object models container, for the various models that DataTables has\n * available to it. These models define the objects that are used to hold\n * the active state and configuration of the table.\n *  @namespace\n */\n\nDataTable.models = {};\n/**\n * Template object for the way in which DataTables holds information about\n * search information for the global filter and individual column filters.\n *  @namespace\n */\n\nDataTable.models.oSearch = {\n  /**\n   * Flag to indicate if the filtering should be case insensitive or not\n   *  @type boolean\n   *  @default true\n   */\n  \"bCaseInsensitive\": true,\n\n  /**\n   * Applied search term\n   *  @type string\n   *  @default <i>Empty string</i>\n   */\n  \"sSearch\": \"\",\n\n  /**\n   * Flag to indicate if the search term should be interpreted as a\n   * regular expression (true) or not (false) and therefore and special\n   * regex characters escaped.\n   *  @type boolean\n   *  @default false\n   */\n  \"bRegex\": false,\n\n  /**\n   * Flag to indicate if DataTables is to use its smart filtering or not.\n   *  @type boolean\n   *  @default true\n   */\n  \"bSmart\": true,\n\n  /**\n   * Flag to indicate if DataTables should only trigger a search when\n   * the return key is pressed.\n   *  @type boolean\n   *  @default false\n   */\n  \"return\": false\n};\n/**\n * Template object for the way in which DataTables holds information about\n * each individual row. This is the object format used for the settings\n * aoData array.\n *  @namespace\n */\n\nDataTable.models.oRow = {\n  /**\n   * TR element for the row\n   *  @type node\n   *  @default null\n   */\n  \"nTr\": null,\n\n  /**\n   * Array of TD elements for each row. This is null until the row has been\n   * created.\n   *  @type array nodes\n   *  @default []\n   */\n  \"anCells\": null,\n\n  /**\n   * Data object from the original data source for the row. This is either\n   * an array if using the traditional form of DataTables, or an object if\n   * using mData options. The exact type will depend on the passed in\n   * data from the data source, or will be an array if using DOM a data\n   * source.\n   *  @type array|object\n   *  @default []\n   */\n  \"_aData\": [],\n\n  /**\n   * Sorting data cache - this array is ostensibly the same length as the\n   * number of columns (although each index is generated only as it is\n   * needed), and holds the data that is used for sorting each column in the\n   * row. We do this cache generation at the start of the sort in order that\n   * the formatting of the sort data need be done only once for each cell\n   * per sort. This array should not be read from or written to by anything\n   * other than the master sorting methods.\n   *  @type array\n   *  @default null\n   *  @private\n   */\n  \"_aSortData\": null,\n\n  /**\n   * Per cell filtering data cache. As per the sort data cache, used to\n   * increase the performance of the filtering in DataTables\n   *  @type array\n   *  @default null\n   *  @private\n   */\n  \"_aFilterData\": null,\n\n  /**\n   * Filtering data cache. This is the same as the cell filtering cache, but\n   * in this case a string rather than an array. This is easily computed with\n   * a join on `_aFilterData`, but is provided as a cache so the join isn't\n   * needed on every search (memory traded for performance)\n   *  @type array\n   *  @default null\n   *  @private\n   */\n  \"_sFilterRow\": null,\n\n  /**\n   * Cache of the class name that DataTables has applied to the row, so we\n   * can quickly look at this variable rather than needing to do a DOM check\n   * on className for the nTr property.\n   *  @type string\n   *  @default <i>Empty string</i>\n   *  @private\n   */\n  \"_sRowStripe\": \"\",\n\n  /**\n   * Denote if the original data source was from the DOM, or the data source\n   * object. This is used for invalidating data, so DataTables can\n   * automatically read data from the original source, unless uninstructed\n   * otherwise.\n   *  @type string\n   *  @default null\n   *  @private\n   */\n  \"src\": null,\n\n  /**\n   * Index in the aoData array. This saves an indexOf lookup when we have the\n   * object, but want to know the index\n   *  @type integer\n   *  @default -1\n   *  @private\n   */\n  \"idx\": -1\n};\n/**\n * Template object for the column information object in DataTables. This object\n * is held in the settings aoColumns array and contains all the information that\n * DataTables needs about each individual column.\n *\n * Note that this object is related to {@link DataTable.defaults.column}\n * but this one is the internal data store for DataTables's cache of columns.\n * It should NOT be manipulated outside of DataTables. Any configuration should\n * be done through the initialisation options.\n *  @namespace\n */\n\nDataTable.models.oColumn = {\n  /**\n   * Column index. This could be worked out on-the-fly with $.inArray, but it\n   * is faster to just hold it as a variable\n   *  @type integer\n   *  @default null\n   */\n  \"idx\": null,\n\n  /**\n   * A list of the columns that sorting should occur on when this column\n   * is sorted. That this property is an array allows multi-column sorting\n   * to be defined for a column (for example first name / last name columns\n   * would benefit from this). The values are integers pointing to the\n   * columns to be sorted on (typically it will be a single integer pointing\n   * at itself, but that doesn't need to be the case).\n   *  @type array\n   */\n  \"aDataSort\": null,\n\n  /**\n   * Define the sorting directions that are applied to the column, in sequence\n   * as the column is repeatedly sorted upon - i.e. the first value is used\n   * as the sorting direction when the column if first sorted (clicked on).\n   * Sort it again (click again) and it will move on to the next index.\n   * Repeat until loop.\n   *  @type array\n   */\n  \"asSorting\": null,\n\n  /**\n   * Flag to indicate if the column is searchable, and thus should be included\n   * in the filtering or not.\n   *  @type boolean\n   */\n  \"bSearchable\": null,\n\n  /**\n   * Flag to indicate if the column is sortable or not.\n   *  @type boolean\n   */\n  \"bSortable\": null,\n\n  /**\n   * Flag to indicate if the column is currently visible in the table or not\n   *  @type boolean\n   */\n  \"bVisible\": null,\n\n  /**\n   * Store for manual type assignment using the `column.type` option. This\n   * is held in store so we can manipulate the column's `sType` property.\n   *  @type string\n   *  @default null\n   *  @private\n   */\n  \"_sManualType\": null,\n\n  /**\n   * Flag to indicate if HTML5 data attributes should be used as the data\n   * source for filtering or sorting. True is either are.\n   *  @type boolean\n   *  @default false\n   *  @private\n   */\n  \"_bAttrSrc\": false,\n\n  /**\n   * Developer definable function that is called whenever a cell is created (Ajax source,\n   * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n   * allowing you to modify the DOM element (add background colour for example) when the\n   * element is available.\n   *  @type function\n   *  @param {element} nTd The TD node that has been created\n   *  @param {*} sData The Data for the cell\n   *  @param {array|object} oData The data for the whole row\n   *  @param {int} iRow The row index for the aoData data store\n   *  @default null\n   */\n  \"fnCreatedCell\": null,\n\n  /**\n   * Function to get data from a cell in a column. You should <b>never</b>\n   * access data directly through _aData internally in DataTables - always use\n   * the method attached to this property. It allows mData to function as\n   * required. This function is automatically assigned by the column\n   * initialisation method\n   *  @type function\n   *  @param {array|object} oData The data array/object for the array\n   *    (i.e. aoData[]._aData)\n   *  @param {string} sSpecific The specific data type you want to get -\n   *    'display', 'type' 'filter' 'sort'\n   *  @returns {*} The data for the cell from the given row's data\n   *  @default null\n   */\n  \"fnGetData\": null,\n\n  /**\n   * Function to set data for a cell in the column. You should <b>never</b>\n   * set the data directly to _aData internally in DataTables - always use\n   * this method. It allows mData to function as required. This function\n   * is automatically assigned by the column initialisation method\n   *  @type function\n   *  @param {array|object} oData The data array/object for the array\n   *    (i.e. aoData[]._aData)\n   *  @param {*} sValue Value to set\n   *  @default null\n   */\n  \"fnSetData\": null,\n\n  /**\n   * Property to read the value for the cells in the column from the data\n   * source array / object. If null, then the default content is used, if a\n   * function is given then the return from the function is used.\n   *  @type function|int|string|null\n   *  @default null\n   */\n  \"mData\": null,\n\n  /**\n   * Partner property to mData which is used (only when defined) to get\n   * the data - i.e. it is basically the same as mData, but without the\n   * 'set' option, and also the data fed to it is the result from mData.\n   * This is the rendering method to match the data method of mData.\n   *  @type function|int|string|null\n   *  @default null\n   */\n  \"mRender\": null,\n\n  /**\n   * Unique header TH/TD element for this column - this is what the sorting\n   * listener is attached to (if sorting is enabled.)\n   *  @type node\n   *  @default null\n   */\n  \"nTh\": null,\n\n  /**\n   * Unique footer TH/TD element for this column (if there is one). Not used\n   * in DataTables as such, but can be used for plug-ins to reference the\n   * footer for each column.\n   *  @type node\n   *  @default null\n   */\n  \"nTf\": null,\n\n  /**\n   * The class to apply to all TD elements in the table's TBODY for the column\n   *  @type string\n   *  @default null\n   */\n  \"sClass\": null,\n\n  /**\n   * When DataTables calculates the column widths to assign to each column,\n   * it finds the longest string in each column and then constructs a\n   * temporary table and reads the widths from that. The problem with this\n   * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n   * string - thus the calculation can go wrong (doing it properly and putting\n   * it into an DOM object and measuring that is horribly(!) slow). Thus as\n   * a \"work around\" we provide this option. It will append its value to the\n   * text that is found to be the longest string for the column - i.e. padding.\n   *  @type string\n   */\n  \"sContentPadding\": null,\n\n  /**\n   * Allows a default value to be given for a column's data, and will be used\n   * whenever a null data source is encountered (this can be because mData\n   * is set to null, or because the data source itself is null).\n   *  @type string\n   *  @default null\n   */\n  \"sDefaultContent\": null,\n\n  /**\n   * Name for the column, allowing reference to the column by name as well as\n   * by index (needs a lookup to work by name).\n   *  @type string\n   */\n  \"sName\": null,\n\n  /**\n   * Custom sorting data type - defines which of the available plug-ins in\n   * afnSortData the custom sorting will use - if any is defined.\n   *  @type string\n   *  @default std\n   */\n  \"sSortDataType\": 'std',\n\n  /**\n   * Class to be applied to the header element when sorting on this column\n   *  @type string\n   *  @default null\n   */\n  \"sSortingClass\": null,\n\n  /**\n   * Class to be applied to the header element when sorting on this column -\n   * when jQuery UI theming is used.\n   *  @type string\n   *  @default null\n   */\n  \"sSortingClassJUI\": null,\n\n  /**\n   * Title of the column - what is seen in the TH element (nTh).\n   *  @type string\n   */\n  \"sTitle\": null,\n\n  /**\n   * Column sorting and filtering type\n   *  @type string\n   *  @default null\n   */\n  \"sType\": null,\n\n  /**\n   * Width of the column\n   *  @type string\n   *  @default null\n   */\n  \"sWidth\": null,\n\n  /**\n   * Width of the column when it was first \"encountered\"\n   *  @type string\n   *  @default null\n   */\n  \"sWidthOrig\": null\n};\n/*\n * Developer note: The properties of the object below are given in Hungarian\n * notation, that was used as the interface for DataTables prior to v1.10, however\n * from v1.10 onwards the primary interface is camel case. In order to avoid\n * breaking backwards compatibility utterly with this change, the Hungarian\n * version is still, internally the primary interface, but is is not documented\n * - hence the @name tags in each doc comment. This allows a Javascript function\n * to create a map from Hungarian notation to camel case (going the other direction\n * would require each property to be listed, which would add around 3K to the size\n * of DataTables, while this method is about a 0.5K hit).\n *\n * Ultimately this does pave the way for Hungarian notation to be dropped\n * completely, but that is a massive amount of work and will break current\n * installs (therefore is on-hold until v2).\n */\n\n/**\n * Initialisation options that can be given to DataTables at initialisation\n * time.\n *  @namespace\n */\n\nDataTable.defaults = {\n  /**\n   * An array of data to use for the table, passed in at initialisation which\n   * will be used in preference to any data which is already in the DOM. This is\n   * particularly useful for constructing tables purely in Javascript, for\n   * example with a custom Ajax call.\n   *  @type array\n   *  @default null\n   *\n   *  @dtopt Option\n   *  @name DataTable.defaults.data\n   *\n   *  @example\n   *    // Using a 2D array data source\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"data\": [\n   *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n   *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n   *        ],\n   *        \"columns\": [\n   *          { \"title\": \"Engine\" },\n   *          { \"title\": \"Browser\" },\n   *          { \"title\": \"Platform\" },\n   *          { \"title\": \"Version\" },\n   *          { \"title\": \"Grade\" }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using an array of objects as a data source (`data`)\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"data\": [\n   *          {\n   *            \"engine\":   \"Trident\",\n   *            \"browser\":  \"Internet Explorer 4.0\",\n   *            \"platform\": \"Win 95+\",\n   *            \"version\":  4,\n   *            \"grade\":    \"X\"\n   *          },\n   *          {\n   *            \"engine\":   \"Trident\",\n   *            \"browser\":  \"Internet Explorer 5.0\",\n   *            \"platform\": \"Win 95+\",\n   *            \"version\":  5,\n   *            \"grade\":    \"C\"\n   *          }\n   *        ],\n   *        \"columns\": [\n   *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n   *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n   *          { \"title\": \"Platform\", \"data\": \"platform\" },\n   *          { \"title\": \"Version\",  \"data\": \"version\" },\n   *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"aaData\": null,\n\n  /**\n   * If ordering is enabled, then DataTables will perform a first pass sort on\n   * initialisation. You can define which column(s) the sort is performed\n   * upon, and the sorting direction, with this variable. The `sorting` array\n   * should contain an array for each column to be sorted initially containing\n   * the column's index and a direction string ('asc' or 'desc').\n   *  @type array\n   *  @default [[0,'asc']]\n   *\n   *  @dtopt Option\n   *  @name DataTable.defaults.order\n   *\n   *  @example\n   *    // Sort by 3rd column first, and then 4th column\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"order\": [[2,'asc'], [3,'desc']]\n   *      } );\n   *    } );\n   *\n   *    // No initial sorting\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"order\": []\n   *      } );\n   *    } );\n   */\n  \"aaSorting\": [[0, 'asc']],\n\n  /**\n   * This parameter is basically identical to the `sorting` parameter, but\n   * cannot be overridden by user interaction with the table. What this means\n   * is that you could have a column (visible or hidden) which the sorting\n   * will always be forced on first - any sorting after that (from the user)\n   * will then be performed as required. This can be useful for grouping rows\n   * together.\n   *  @type array\n   *  @default null\n   *\n   *  @dtopt Option\n   *  @name DataTable.defaults.orderFixed\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"orderFixed\": [[0,'asc']]\n   *      } );\n   *    } )\n   */\n  \"aaSortingFixed\": [],\n\n  /**\n   * DataTables can be instructed to load data to display in the table from a\n   * Ajax source. This option defines how that Ajax call is made and where to.\n   *\n   * The `ajax` property has three different modes of operation, depending on\n   * how it is defined. These are:\n   *\n   * * `string` - Set the URL from where the data should be loaded from.\n   * * `object` - Define properties for `jQuery.ajax`.\n   * * `function` - Custom data get function\n   *\n   * `string`\n   * --------\n   *\n   * As a string, the `ajax` property simply defines the URL from which\n   * DataTables will load data.\n   *\n   * `object`\n   * --------\n   *\n   * As an object, the parameters in the object are passed to\n   * [jQuery.ajax](https://api.jquery.com/jQuery.ajax/) allowing fine control\n   * of the Ajax request. DataTables has a number of default parameters which\n   * you can override using this option. Please refer to the jQuery\n   * documentation for a full description of the options available, although\n   * the following parameters provide additional options in DataTables or\n   * require special consideration:\n   *\n   * * `data` - As with jQuery, `data` can be provided as an object, but it\n   *   can also be used as a function to manipulate the data DataTables sends\n   *   to the server. The function takes a single parameter, an object of\n   *   parameters with the values that DataTables has readied for sending. An\n   *   object may be returned which will be merged into the DataTables\n   *   defaults, or you can add the items to the object that was passed in and\n   *   not return anything from the function. This supersedes `fnServerParams`\n   *   from DataTables 1.9-.\n   *\n   * * `dataSrc` - By default DataTables will look for the property `data` (or\n   *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n   *   from an Ajax source or for server-side processing - this parameter\n   *   allows that property to be changed. You can use Javascript dotted\n   *   object notation to get a data source for multiple levels of nesting, or\n   *   it my be used as a function. As a function it takes a single parameter,\n   *   the JSON returned from the server, which can be manipulated as\n   *   required, with the returned value being that used by DataTables as the\n   *   data source for the table. This supersedes `sAjaxDataProp` from\n   *   DataTables 1.9-.\n   *\n   * * `success` - Should not be overridden it is used internally in\n   *   DataTables. To manipulate / transform the data returned by the server\n   *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n   *\n   * `function`\n   * ----------\n   *\n   * As a function, making the Ajax call is left up to yourself allowing\n   * complete control of the Ajax request. Indeed, if desired, a method other\n   * than Ajax could be used to obtain the required data, such as Web storage\n   * or an AIR database.\n   *\n   * The function is given four parameters and no return is required. The\n   * parameters are:\n   *\n   * 1. _object_ - Data to send to the server\n   * 2. _function_ - Callback function that must be executed when the required\n   *    data has been obtained. That data should be passed into the callback\n   *    as the only parameter\n   * 3. _object_ - DataTables settings object for the table\n   *\n   * Note that this supersedes `fnServerData` from DataTables 1.9-.\n   *\n   *  @type string|object|function\n   *  @default null\n   *\n   *  @dtopt Option\n   *  @name DataTable.defaults.ajax\n   *  @since 1.10.0\n   *\n   * @example\n   *   // Get JSON data from a file via Ajax.\n   *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n   *   $('#example').dataTable( {\n   *     \"ajax\": \"data.json\"\n   *   } );\n   *\n   * @example\n   *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n   *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n   *   $('#example').dataTable( {\n   *     \"ajax\": {\n   *       \"url\": \"data.json\",\n   *       \"dataSrc\": \"tableData\"\n   *     }\n   *   } );\n   *\n   * @example\n   *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n   *   // from a plain array rather than an array in an object\n   *   $('#example').dataTable( {\n   *     \"ajax\": {\n   *       \"url\": \"data.json\",\n   *       \"dataSrc\": \"\"\n   *     }\n   *   } );\n   *\n   * @example\n   *   // Manipulate the data returned from the server - add a link to data\n   *   // (note this can, should, be done using `render` for the column - this\n   *   // is just a simple example of how the data can be manipulated).\n   *   $('#example').dataTable( {\n   *     \"ajax\": {\n   *       \"url\": \"data.json\",\n   *       \"dataSrc\": function ( json ) {\n   *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n   *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n   *         }\n   *         return json;\n   *       }\n   *     }\n   *   } );\n   *\n   * @example\n   *   // Add data to the request\n   *   $('#example').dataTable( {\n   *     \"ajax\": {\n   *       \"url\": \"data.json\",\n   *       \"data\": function ( d ) {\n   *         return {\n   *           \"extra_search\": $('#extra').val()\n   *         };\n   *       }\n   *     }\n   *   } );\n   *\n   * @example\n   *   // Send request as POST\n   *   $('#example').dataTable( {\n   *     \"ajax\": {\n   *       \"url\": \"data.json\",\n   *       \"type\": \"POST\"\n   *     }\n   *   } );\n   *\n   * @example\n   *   // Get the data from localStorage (could interface with a form for\n   *   // adding, editing and removing rows).\n   *   $('#example').dataTable( {\n   *     \"ajax\": function (data, callback, settings) {\n   *       callback(\n   *         JSON.parse( localStorage.getItem('dataTablesData') )\n   *       );\n   *     }\n   *   } );\n   */\n  \"ajax\": null,\n\n  /**\n   * This parameter allows you to readily specify the entries in the length drop\n   * down menu that DataTables shows when pagination is enabled. It can be\n   * either a 1D array of options which will be used for both the displayed\n   * option and the value, or a 2D array which will use the array in the first\n   * position as the value, and the array in the second position as the\n   * displayed options (useful for language strings such as 'All').\n   *\n   * Note that the `pageLength` property will be automatically set to the\n   * first value given in this array, unless `pageLength` is also provided.\n   *  @type array\n   *  @default [ 10, 25, 50, 100 ]\n   *\n   *  @dtopt Option\n   *  @name DataTable.defaults.lengthMenu\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n   *      } );\n   *    } );\n   */\n  \"aLengthMenu\": [10, 25, 50, 100],\n\n  /**\n   * The `columns` option in the initialisation parameter allows you to define\n   * details about the way individual columns behave. For a full list of\n   * column options that can be set, please see\n   * {@link DataTable.defaults.column}. Note that if you use `columns` to\n   * define your columns, you must have an entry in the array for every single\n   * column that you have in your table (these can be null if you don't which\n   * to specify any options).\n   *  @member\n   *\n   *  @name DataTable.defaults.column\n   */\n  \"aoColumns\": null,\n\n  /**\n   * Very similar to `columns`, `columnDefs` allows you to target a specific\n   * column, multiple columns, or all columns, using the `targets` property of\n   * each object in the array. This allows great flexibility when creating\n   * tables, as the `columnDefs` arrays can be of any length, targeting the\n   * columns you specifically want. `columnDefs` may use any of the column\n   * options available: {@link DataTable.defaults.column}, but it _must_\n   * have `targets` defined in each object in the array. Values in the `targets`\n   * array may be:\n   *   <ul>\n   *     <li>a string - class name will be matched on the TH for the column</li>\n   *     <li>0 or a positive integer - column index counting from the left</li>\n   *     <li>a negative integer - column index counting from the right</li>\n   *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n   *   </ul>\n   *  @member\n   *\n   *  @name DataTable.defaults.columnDefs\n   */\n  \"aoColumnDefs\": null,\n\n  /**\n   * Basically the same as `search`, this parameter defines the individual column\n   * filtering state at initialisation time. The array must be of the same size\n   * as the number of columns, and each element be an object with the parameters\n   * `search` and `escapeRegex` (the latter is optional). 'null' is also\n   * accepted and the default will be used.\n   *  @type array\n   *  @default []\n   *\n   *  @dtopt Option\n   *  @name DataTable.defaults.searchCols\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"searchCols\": [\n   *          null,\n   *          { \"search\": \"My filter\" },\n   *          null,\n   *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n   *        ]\n   *      } );\n   *    } )\n   */\n  \"aoSearchCols\": [],\n\n  /**\n   * An array of CSS classes that should be applied to displayed rows. This\n   * array may be of any length, and DataTables will apply each class\n   * sequentially, looping when required.\n   *  @type array\n   *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n   *    options</i>\n   *\n   *  @dtopt Option\n   *  @name DataTable.defaults.stripeClasses\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n   *      } );\n   *    } )\n   */\n  \"asStripeClasses\": null,\n\n  /**\n   * Enable or disable automatic column width calculation. This can be disabled\n   * as an optimisation (it takes some time to calculate the widths) if the\n   * tables widths are passed in using `columns`.\n   *  @type boolean\n   *  @default true\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.autoWidth\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"autoWidth\": false\n   *      } );\n   *    } );\n   */\n  \"bAutoWidth\": true,\n\n  /**\n   * Deferred rendering can provide DataTables with a huge speed boost when you\n   * are using an Ajax or JS data source for the table. This option, when set to\n   * true, will cause DataTables to defer the creation of the table elements for\n   * each row until they are needed for a draw - saving a significant amount of\n   * time.\n   *  @type boolean\n   *  @default false\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.deferRender\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"ajax\": \"sources/arrays.txt\",\n   *        \"deferRender\": true\n   *      } );\n   *    } );\n   */\n  \"bDeferRender\": false,\n\n  /**\n   * Replace a DataTable which matches the given selector and replace it with\n   * one which has the properties of the new initialisation object passed. If no\n   * table matches the selector, then the new DataTable will be constructed as\n   * per normal.\n   *  @type boolean\n   *  @default false\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.destroy\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"srollY\": \"200px\",\n   *        \"paginate\": false\n   *      } );\n   *\n   *      // Some time later....\n   *      $('#example').dataTable( {\n   *        \"filter\": false,\n   *        \"destroy\": true\n   *      } );\n   *    } );\n   */\n  \"bDestroy\": false,\n\n  /**\n   * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n   * that it allows the end user to input multiple words (space separated) and\n   * will match a row containing those words, even if not in the order that was\n   * specified (this allow matching across multiple columns). Note that if you\n   * wish to use filtering in DataTables this must remain 'true' - to remove the\n   * default filtering input box and retain filtering abilities, please use\n   * {@link DataTable.defaults.dom}.\n   *  @type boolean\n   *  @default true\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.searching\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"searching\": false\n   *      } );\n   *    } );\n   */\n  \"bFilter\": true,\n\n  /**\n   * Enable or disable the table information display. This shows information\n   * about the data that is currently visible on the page, including information\n   * about filtered data if that action is being performed.\n   *  @type boolean\n   *  @default true\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.info\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"info\": false\n   *      } );\n   *    } );\n   */\n  \"bInfo\": true,\n\n  /**\n   * Allows the end user to select the size of a formatted page from a select\n   * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n   *  @type boolean\n   *  @default true\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.lengthChange\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"lengthChange\": false\n   *      } );\n   *    } );\n   */\n  \"bLengthChange\": true,\n\n  /**\n   * Enable or disable pagination.\n   *  @type boolean\n   *  @default true\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.paging\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"paging\": false\n   *      } );\n   *    } );\n   */\n  \"bPaginate\": true,\n\n  /**\n   * Enable or disable the display of a 'processing' indicator when the table is\n   * being processed (e.g. a sort). This is particularly useful for tables with\n   * large amounts of data where it can take a noticeable amount of time to sort\n   * the entries.\n   *  @type boolean\n   *  @default false\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.processing\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"processing\": true\n   *      } );\n   *    } );\n   */\n  \"bProcessing\": false,\n\n  /**\n   * Retrieve the DataTables object for the given selector. Note that if the\n   * table has already been initialised, this parameter will cause DataTables\n   * to simply return the object that has already been set up - it will not take\n   * account of any changes you might have made to the initialisation object\n   * passed to DataTables (setting this parameter to true is an acknowledgement\n   * that you understand this). `destroy` can be used to reinitialise a table if\n   * you need.\n   *  @type boolean\n   *  @default false\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.retrieve\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      initTable();\n   *      tableActions();\n   *    } );\n   *\n   *    function initTable ()\n   *    {\n   *      return $('#example').dataTable( {\n   *        \"scrollY\": \"200px\",\n   *        \"paginate\": false,\n   *        \"retrieve\": true\n   *      } );\n   *    }\n   *\n   *    function tableActions ()\n   *    {\n   *      var table = initTable();\n   *      // perform API operations with oTable\n   *    }\n   */\n  \"bRetrieve\": false,\n\n  /**\n   * When vertical (y) scrolling is enabled, DataTables will force the height of\n   * the table's viewport to the given height at all times (useful for layout).\n   * However, this can look odd when filtering data down to a small data set,\n   * and the footer is left \"floating\" further down. This parameter (when\n   * enabled) will cause DataTables to collapse the table's viewport down when\n   * the result set will fit within the given Y height.\n   *  @type boolean\n   *  @default false\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.scrollCollapse\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"scrollY\": \"200\",\n   *        \"scrollCollapse\": true\n   *      } );\n   *    } );\n   */\n  \"bScrollCollapse\": false,\n\n  /**\n   * Configure DataTables to use server-side processing. Note that the\n   * `ajax` parameter must also be given in order to give DataTables a\n   * source to obtain the required data for each draw.\n   *  @type boolean\n   *  @default false\n   *\n   *  @dtopt Features\n   *  @dtopt Server-side\n   *  @name DataTable.defaults.serverSide\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"serverSide\": true,\n   *        \"ajax\": \"xhr.php\"\n   *      } );\n   *    } );\n   */\n  \"bServerSide\": false,\n\n  /**\n   * Enable or disable sorting of columns. Sorting of individual columns can be\n   * disabled by the `sortable` option for each column.\n   *  @type boolean\n   *  @default true\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.ordering\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"ordering\": false\n   *      } );\n   *    } );\n   */\n  \"bSort\": true,\n\n  /**\n   * Enable or display DataTables' ability to sort multiple columns at the\n   * same time (activated by shift-click by the user).\n   *  @type boolean\n   *  @default true\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.orderMulti\n   *\n   *  @example\n   *    // Disable multiple column sorting ability\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"orderMulti\": false\n   *      } );\n   *    } );\n   */\n  \"bSortMulti\": true,\n\n  /**\n   * Allows control over whether DataTables should use the top (true) unique\n   * cell that is found for a single column, or the bottom (false - default).\n   * This is useful when using complex headers.\n   *  @type boolean\n   *  @default false\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.orderCellsTop\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"orderCellsTop\": true\n   *      } );\n   *    } );\n   */\n  \"bSortCellsTop\": false,\n\n  /**\n   * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n   * `sorting\\_3` to the columns which are currently being sorted on. This is\n   * presented as a feature switch as it can increase processing time (while\n   * classes are removed and added) so for large data sets you might want to\n   * turn this off.\n   *  @type boolean\n   *  @default true\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.orderClasses\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"orderClasses\": false\n   *      } );\n   *    } );\n   */\n  \"bSortClasses\": true,\n\n  /**\n   * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n   * used to save table display information such as pagination information,\n   * display length, filtering and sorting. As such when the end user reloads\n   * the page the display display will match what thy had previously set up.\n   *\n   * Due to the use of `localStorage` the default state saving is not supported\n   * in IE6 or 7. If state saving is required in those browsers, use\n   * `stateSaveCallback` to provide a storage solution such as cookies.\n   *  @type boolean\n   *  @default false\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.stateSave\n   *\n   *  @example\n   *    $(document).ready( function () {\n   *      $('#example').dataTable( {\n   *        \"stateSave\": true\n   *      } );\n   *    } );\n   */\n  \"bStateSave\": false,\n\n  /**\n   * This function is called when a TR element is created (and all TD child\n   * elements have been inserted), or registered if using a DOM source, allowing\n   * manipulation of the TR element (adding classes etc).\n   *  @type function\n   *  @param {node} row \"TR\" element for the current row\n   *  @param {array} data Raw data array for this row\n   *  @param {int} dataIndex The index of this row in the internal aoData array\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.createdRow\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"createdRow\": function( row, data, dataIndex ) {\n   *          // Bold the grade for all 'A' grade browsers\n   *          if ( data[4] == \"A\" )\n   *          {\n   *            $('td:eq(4)', row).html( '<b>A</b>' );\n   *          }\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnCreatedRow\": null,\n\n  /**\n   * This function is called on every 'draw' event, and allows you to\n   * dynamically modify any aspect you want about the created DOM.\n   *  @type function\n   *  @param {object} settings DataTables settings object\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.drawCallback\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"drawCallback\": function( settings ) {\n   *          alert( 'DataTables has redrawn the table' );\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnDrawCallback\": null,\n\n  /**\n   * Identical to fnHeaderCallback() but for the table footer this function\n   * allows you to modify the table footer on every 'draw' event.\n   *  @type function\n   *  @param {node} foot \"TR\" element for the footer\n   *  @param {array} data Full table data (as derived from the original HTML)\n   *  @param {int} start Index for the current display starting point in the\n   *    display array\n   *  @param {int} end Index for the current display ending point in the\n   *    display array\n   *  @param {array int} display Index array to translate the visual position\n   *    to the full data array\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.footerCallback\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n   *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n   *        }\n   *      } );\n   *    } )\n   */\n  \"fnFooterCallback\": null,\n\n  /**\n   * When rendering large numbers in the information element for the table\n   * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n   * to have a comma separator for the 'thousands' units (e.g. 1 million is\n   * rendered as \"1,000,000\") to help readability for the end user. This\n   * function will override the default method DataTables uses.\n   *  @type function\n   *  @member\n   *  @param {int} toFormat number to be formatted\n   *  @returns {string} formatted string for DataTables to show the number\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.formatNumber\n   *\n   *  @example\n   *    // Format a number using a single quote for the separator (note that\n   *    // this can also be done with the language.thousands option)\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"formatNumber\": function ( toFormat ) {\n   *          return toFormat.toString().replace(\n   *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n   *          );\n   *        };\n   *      } );\n   *    } );\n   */\n  \"fnFormatNumber\": function (toFormat) {\n    return toFormat.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.oLanguage.sThousands);\n  },\n\n  /**\n   * This function is called on every 'draw' event, and allows you to\n   * dynamically modify the header row. This can be used to calculate and\n   * display useful information about the table.\n   *  @type function\n   *  @param {node} head \"TR\" element for the header\n   *  @param {array} data Full table data (as derived from the original HTML)\n   *  @param {int} start Index for the current display starting point in the\n   *    display array\n   *  @param {int} end Index for the current display ending point in the\n   *    display array\n   *  @param {array int} display Index array to translate the visual position\n   *    to the full data array\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.headerCallback\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"fheaderCallback\": function( head, data, start, end, display ) {\n   *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n   *        }\n   *      } );\n   *    } )\n   */\n  \"fnHeaderCallback\": null,\n\n  /**\n   * The information element can be used to convey information about the current\n   * state of the table. Although the internationalisation options presented by\n   * DataTables are quite capable of dealing with most customisations, there may\n   * be times where you wish to customise the string further. This callback\n   * allows you to do exactly that.\n   *  @type function\n   *  @param {object} oSettings DataTables settings object\n   *  @param {int} start Starting position in data for the draw\n   *  @param {int} end End position in data for the draw\n   *  @param {int} max Total number of rows in the table (regardless of\n   *    filtering)\n   *  @param {int} total Total number of rows in the data set, after filtering\n   *  @param {string} pre The string that DataTables has formatted using it's\n   *    own rules\n   *  @returns {string} The string to be displayed in the information element.\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.infoCallback\n   *\n   *  @example\n   *    $('#example').dataTable( {\n   *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n   *        return start +\" to \"+ end;\n   *      }\n   *    } );\n   */\n  \"fnInfoCallback\": null,\n\n  /**\n   * Called when the table has been initialised. Normally DataTables will\n   * initialise sequentially and there will be no need for this function,\n   * however, this does not hold true when using external language information\n   * since that is obtained using an async XHR call.\n   *  @type function\n   *  @param {object} settings DataTables settings object\n   *  @param {object} json The JSON object request from the server - only\n   *    present if client-side Ajax sourced data is used\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.initComplete\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"initComplete\": function(settings, json) {\n   *          alert( 'DataTables has finished its initialisation.' );\n   *        }\n   *      } );\n   *    } )\n   */\n  \"fnInitComplete\": null,\n\n  /**\n   * Called at the very start of each table draw and can be used to cancel the\n   * draw by returning false, any other return (including undefined) results in\n   * the full draw occurring).\n   *  @type function\n   *  @param {object} settings DataTables settings object\n   *  @returns {boolean} False will cancel the draw, anything else (including no\n   *    return) will allow it to complete.\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.preDrawCallback\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"preDrawCallback\": function( settings ) {\n   *          if ( $('#test').val() == 1 ) {\n   *            return false;\n   *          }\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnPreDrawCallback\": null,\n\n  /**\n   * This function allows you to 'post process' each row after it have been\n   * generated for each table draw, but before it is rendered on screen. This\n   * function might be used for setting the row class name etc.\n   *  @type function\n   *  @param {node} row \"TR\" element for the current row\n   *  @param {array} data Raw data array for this row\n   *  @param {int} displayIndex The display index for the current table draw\n   *  @param {int} displayIndexFull The index of the data in the full list of\n   *    rows (after filtering)\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.rowCallback\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n   *          // Bold the grade for all 'A' grade browsers\n   *          if ( data[4] == \"A\" ) {\n   *            $('td:eq(4)', row).html( '<b>A</b>' );\n   *          }\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnRowCallback\": null,\n\n  /**\n   * __Deprecated__ The functionality provided by this parameter has now been\n   * superseded by that provided through `ajax`, which should be used instead.\n   *\n   * This parameter allows you to override the default function which obtains\n   * the data from the server so something more suitable for your application.\n   * For example you could use POST data, or pull information from a Gears or\n   * AIR database.\n   *  @type function\n   *  @member\n   *  @param {string} source HTTP source to obtain the data from (`ajax`)\n   *  @param {array} data A key/value pair object containing the data to send\n   *    to the server\n   *  @param {function} callback to be called on completion of the data get\n   *    process that will draw the data on the page.\n   *  @param {object} settings DataTables settings object\n   *\n   *  @dtopt Callbacks\n   *  @dtopt Server-side\n   *  @name DataTable.defaults.serverData\n   *\n   *  @deprecated 1.10. Please use `ajax` for this functionality now.\n   */\n  \"fnServerData\": null,\n\n  /**\n   * __Deprecated__ The functionality provided by this parameter has now been\n   * superseded by that provided through `ajax`, which should be used instead.\n   *\n   *  It is often useful to send extra data to the server when making an Ajax\n   * request - for example custom filtering information, and this callback\n   * function makes it trivial to send extra information to the server. The\n   * passed in parameter is the data set that has been constructed by\n   * DataTables, and you can add to this or modify it as you require.\n   *  @type function\n   *  @param {array} data Data array (array of objects which are name/value\n   *    pairs) that has been constructed by DataTables and will be sent to the\n   *    server. In the case of Ajax sourced data with server-side processing\n   *    this will be an empty array, for server-side processing there will be a\n   *    significant number of parameters!\n   *  @returns {undefined} Ensure that you modify the data array passed in,\n   *    as this is passed by reference.\n   *\n   *  @dtopt Callbacks\n   *  @dtopt Server-side\n   *  @name DataTable.defaults.serverParams\n   *\n   *  @deprecated 1.10. Please use `ajax` for this functionality now.\n   */\n  \"fnServerParams\": null,\n\n  /**\n   * Load the table state. With this function you can define from where, and how, the\n   * state of a table is loaded. By default DataTables will load from `localStorage`\n   * but you might wish to use a server-side database or cookies.\n   *  @type function\n   *  @member\n   *  @param {object} settings DataTables settings object\n   *  @param {object} callback Callback that can be executed when done. It\n   *    should be passed the loaded state object.\n   *  @return {object} The DataTables state object to be loaded\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.stateLoadCallback\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"stateSave\": true,\n   *        \"stateLoadCallback\": function (settings, callback) {\n   *          $.ajax( {\n   *            \"url\": \"/state_load\",\n   *            \"dataType\": \"json\",\n   *            \"success\": function (json) {\n   *              callback( json );\n   *            }\n   *          } );\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnStateLoadCallback\": function (settings) {\n    try {\n      return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));\n    } catch (e) {\n      return {};\n    }\n  },\n\n  /**\n   * Callback which allows modification of the saved state prior to loading that state.\n   * This callback is called when the table is loading state from the stored data, but\n   * prior to the settings object being modified by the saved state. Note that for\n   * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n   * a plug-in.\n   *  @type function\n   *  @param {object} settings DataTables settings object\n   *  @param {object} data The state object that is to be loaded\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.stateLoadParams\n   *\n   *  @example\n   *    // Remove a saved filter, so filtering is never loaded\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"stateSave\": true,\n   *        \"stateLoadParams\": function (settings, data) {\n   *          data.oSearch.sSearch = \"\";\n   *        }\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Disallow state loading by returning false\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"stateSave\": true,\n   *        \"stateLoadParams\": function (settings, data) {\n   *          return false;\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnStateLoadParams\": null,\n\n  /**\n   * Callback that is called when the state has been loaded from the state saving method\n   * and the DataTables settings object has been modified as a result of the loaded state.\n   *  @type function\n   *  @param {object} settings DataTables settings object\n   *  @param {object} data The state object that was loaded\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.stateLoaded\n   *\n   *  @example\n   *    // Show an alert with the filtering value that was saved\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"stateSave\": true,\n   *        \"stateLoaded\": function (settings, data) {\n   *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnStateLoaded\": null,\n\n  /**\n   * Save the table state. This function allows you to define where and how the state\n   * information for the table is stored By default DataTables will use `localStorage`\n   * but you might wish to use a server-side database or cookies.\n   *  @type function\n   *  @member\n   *  @param {object} settings DataTables settings object\n   *  @param {object} data The state object to be saved\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.stateSaveCallback\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"stateSave\": true,\n   *        \"stateSaveCallback\": function (settings, data) {\n   *          // Send an Ajax request to the server with the state object\n   *          $.ajax( {\n   *            \"url\": \"/state_save\",\n   *            \"data\": data,\n   *            \"dataType\": \"json\",\n   *            \"method\": \"POST\"\n   *            \"success\": function () {}\n   *          } );\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnStateSaveCallback\": function (settings, data) {\n    try {\n      (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));\n    } catch (e) {}\n  },\n\n  /**\n   * Callback which allows modification of the state to be saved. Called when the table\n   * has changed state a new state save is required. This method allows modification of\n   * the state saving object prior to actually doing the save, including addition or\n   * other state properties or modification. Note that for plug-in authors, you should\n   * use the `stateSaveParams` event to save parameters for a plug-in.\n   *  @type function\n   *  @param {object} settings DataTables settings object\n   *  @param {object} data The state object to be saved\n   *\n   *  @dtopt Callbacks\n   *  @name DataTable.defaults.stateSaveParams\n   *\n   *  @example\n   *    // Remove a saved filter, so filtering is never saved\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"stateSave\": true,\n   *        \"stateSaveParams\": function (settings, data) {\n   *          data.oSearch.sSearch = \"\";\n   *        }\n   *      } );\n   *    } );\n   */\n  \"fnStateSaveParams\": null,\n\n  /**\n   * Duration for which the saved state information is considered valid. After this period\n   * has elapsed the state will be returned to the default.\n   * Value is given in seconds.\n   *  @type int\n   *  @default 7200 <i>(2 hours)</i>\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.stateDuration\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"stateDuration\": 60*60*24; // 1 day\n   *      } );\n   *    } )\n   */\n  \"iStateDuration\": 7200,\n\n  /**\n   * When enabled DataTables will not make a request to the server for the first\n   * page draw - rather it will use the data already on the page (no sorting etc\n   * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n   * is used to indicate that deferred loading is required, but it is also used\n   * to tell DataTables how many records there are in the full table (allowing\n   * the information element and pagination to be displayed correctly). In the case\n   * where a filtering is applied to the table on initial load, this can be\n   * indicated by giving the parameter as an array, where the first element is\n   * the number of records available after filtering and the second element is the\n   * number of records without filtering (allowing the table information element\n   * to be shown correctly).\n   *  @type int | array\n   *  @default null\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.deferLoading\n   *\n   *  @example\n   *    // 57 records available in the table, no filtering applied\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"serverSide\": true,\n   *        \"ajax\": \"scripts/server_processing.php\",\n   *        \"deferLoading\": 57\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"serverSide\": true,\n   *        \"ajax\": \"scripts/server_processing.php\",\n   *        \"deferLoading\": [ 57, 100 ],\n   *        \"search\": {\n   *          \"search\": \"my_filter\"\n   *        }\n   *      } );\n   *    } );\n   */\n  \"iDeferLoading\": null,\n\n  /**\n   * Number of rows to display on a single page when using pagination. If\n   * feature enabled (`lengthChange`) then the end user will be able to override\n   * this to a custom setting using a pop-up menu.\n   *  @type int\n   *  @default 10\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.pageLength\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"pageLength\": 50\n   *      } );\n   *    } )\n   */\n  \"iDisplayLength\": 10,\n\n  /**\n   * Define the starting point for data display when using DataTables with\n   * pagination. Note that this parameter is the number of records, rather than\n   * the page number, so if you have 10 records per page and want to start on\n   * the third page, it should be \"20\".\n   *  @type int\n   *  @default 0\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.displayStart\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"displayStart\": 20\n   *      } );\n   *    } )\n   */\n  \"iDisplayStart\": 0,\n\n  /**\n   * By default DataTables allows keyboard navigation of the table (sorting, paging,\n   * and filtering) by adding a `tabindex` attribute to the required elements. This\n   * allows you to tab through the controls and press the enter key to activate them.\n   * The tabindex is default 0, meaning that the tab follows the flow of the document.\n   * You can overrule this using this parameter if you wish. Use a value of -1 to\n   * disable built-in keyboard navigation.\n   *  @type int\n   *  @default 0\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.tabIndex\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"tabIndex\": 1\n   *      } );\n   *    } );\n   */\n  \"iTabIndex\": 0,\n\n  /**\n   * Classes that DataTables assigns to the various components and features\n   * that it adds to the HTML table. This allows classes to be configured\n   * during initialisation in addition to through the static\n   * {@link DataTable.ext.oStdClasses} object).\n   *  @namespace\n   *  @name DataTable.defaults.classes\n   */\n  \"oClasses\": {},\n\n  /**\n   * All strings that DataTables uses in the user interface that it creates\n   * are defined in this object, allowing you to modified them individually or\n   * completely replace them all as required.\n   *  @namespace\n   *  @name DataTable.defaults.language\n   */\n  \"oLanguage\": {\n    /**\n     * Strings that are used for WAI-ARIA labels and controls only (these are not\n     * actually visible on the page, but will be read by screenreaders, and thus\n     * must be internationalised as well).\n     *  @namespace\n     *  @name DataTable.defaults.language.aria\n     */\n    \"oAria\": {\n      /**\n       * ARIA label that is added to the table headers when the column may be\n       * sorted ascending by activing the column (click or return when focused).\n       * Note that the column header is prefixed to this string.\n       *  @type string\n       *  @default : activate to sort column ascending\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.aria.sortAscending\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"aria\": {\n       *            \"sortAscending\": \" - click/return to sort ascending\"\n       *          }\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sSortAscending\": \": activate to sort column ascending\",\n\n      /**\n       * ARIA label that is added to the table headers when the column may be\n       * sorted descending by activing the column (click or return when focused).\n       * Note that the column header is prefixed to this string.\n       *  @type string\n       *  @default : activate to sort column ascending\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.aria.sortDescending\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"aria\": {\n       *            \"sortDescending\": \" - click/return to sort descending\"\n       *          }\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sSortDescending\": \": activate to sort column descending\"\n    },\n\n    /**\n     * Pagination string used by DataTables for the built-in pagination\n     * control types.\n     *  @namespace\n     *  @name DataTable.defaults.language.paginate\n     */\n    \"oPaginate\": {\n      /**\n       * Text to use when using the 'full_numbers' type of pagination for the\n       * button to take the user to the first page.\n       *  @type string\n       *  @default First\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.paginate.first\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"paginate\": {\n       *            \"first\": \"First page\"\n       *          }\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sFirst\": \"First\",\n\n      /**\n       * Text to use when using the 'full_numbers' type of pagination for the\n       * button to take the user to the last page.\n       *  @type string\n       *  @default Last\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.paginate.last\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"paginate\": {\n       *            \"last\": \"Last page\"\n       *          }\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sLast\": \"Last\",\n\n      /**\n       * Text to use for the 'next' pagination button (to take the user to the\n       * next page).\n       *  @type string\n       *  @default Next\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.paginate.next\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"paginate\": {\n       *            \"next\": \"Next page\"\n       *          }\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sNext\": \"Next\",\n\n      /**\n       * Text to use for the 'previous' pagination button (to take the user to\n       * the previous page).\n       *  @type string\n       *  @default Previous\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.paginate.previous\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"paginate\": {\n       *            \"previous\": \"Previous page\"\n       *          }\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sPrevious\": \"Previous\"\n    },\n\n    /**\n     * This string is shown in preference to `zeroRecords` when the table is\n     * empty of data (regardless of filtering). Note that this is an optional\n     * parameter - if it is not given, the value of `zeroRecords` will be used\n     * instead (either the default or given value).\n     *  @type string\n     *  @default No data available in table\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.emptyTable\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"emptyTable\": \"No data available in table\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sEmptyTable\": \"No data available in table\",\n\n    /**\n     * This string gives information to the end user about the information\n     * that is current on display on the page. The following tokens can be\n     * used in the string and will be dynamically replaced as the table\n     * display updates. This tokens can be placed anywhere in the string, or\n     * removed as needed by the language requires:\n     *\n     * * `\\_START\\_` - Display index of the first record on the current page\n     * * `\\_END\\_` - Display index of the last record on the current page\n     * * `\\_TOTAL\\_` - Number of records in the table after filtering\n     * * `\\_MAX\\_` - Number of records in the table without filtering\n     * * `\\_PAGE\\_` - Current page number\n     * * `\\_PAGES\\_` - Total number of pages of data in the table\n     *\n     *  @type string\n     *  @default Showing _START_ to _END_ of _TOTAL_ entries\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.info\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\n    /**\n     * Display information string for when the table is empty. Typically the\n     * format of this string should match `info`.\n     *  @type string\n     *  @default Showing 0 to 0 of 0 entries\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.infoEmpty\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"infoEmpty\": \"No entries to show\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\n    /**\n     * When a user filters the information in a table, this string is appended\n     * to the information (`info`) to give an idea of how strong the filtering\n     * is. The variable _MAX_ is dynamically updated.\n     *  @type string\n     *  @default (filtered from _MAX_ total entries)\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.infoFiltered\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\n    /**\n     * If can be useful to append extra information to the info string at times,\n     * and this variable does exactly that. This information will be appended to\n     * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n     * being used) at all times.\n     *  @type string\n     *  @default <i>Empty string</i>\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.infoPostFix\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"infoPostFix\": \"All records shown are derived from real information.\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sInfoPostFix\": \"\",\n\n    /**\n     * This decimal place operator is a little different from the other\n     * language options since DataTables doesn't output floating point\n     * numbers, so it won't ever use this for display of a number. Rather,\n     * what this parameter does is modify the sort methods of the table so\n     * that numbers which are in a format which has a character other than\n     * a period (`.`) as a decimal place will be sorted numerically.\n     *\n     * Note that numbers with different decimal places cannot be shown in\n     * the same table and still be sortable, the table must be consistent.\n     * However, multiple different tables on the page can use different\n     * decimal place characters.\n     *  @type string\n     *  @default \n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.decimal\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"decimal\": \",\"\n     *          \"thousands\": \".\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sDecimal\": \"\",\n\n    /**\n     * DataTables has a build in number formatter (`formatNumber`) which is\n     * used to format large numbers that are used in the table information.\n     * By default a comma is used, but this can be trivially changed to any\n     * character you wish with this parameter.\n     *  @type string\n     *  @default ,\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.thousands\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"thousands\": \"'\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sThousands\": \",\",\n\n    /**\n     * Detail the action that will be taken when the drop down menu for the\n     * pagination length option is changed. The '_MENU_' variable is replaced\n     * with a default select list of 10, 25, 50 and 100, and can be replaced\n     * with a custom select box if required.\n     *  @type string\n     *  @default Show _MENU_ entries\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.lengthMenu\n     *\n     *  @example\n     *    // Language change only\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"lengthMenu\": \"Display _MENU_ records\"\n     *        }\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Language and options change\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"lengthMenu\": 'Display <select>'+\n     *            '<option value=\"10\">10</option>'+\n     *            '<option value=\"20\">20</option>'+\n     *            '<option value=\"30\">30</option>'+\n     *            '<option value=\"40\">40</option>'+\n     *            '<option value=\"50\">50</option>'+\n     *            '<option value=\"-1\">All</option>'+\n     *            '</select> records'\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sLengthMenu\": \"Show _MENU_ entries\",\n\n    /**\n     * When using Ajax sourced data and during the first draw when DataTables is\n     * gathering the data, this message is shown in an empty row in the table to\n     * indicate to the end user the the data is being loaded. Note that this\n     * parameter is not used when loading data by server-side processing, just\n     * Ajax sourced data with client-side processing.\n     *  @type string\n     *  @default Loading...\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.loadingRecords\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"loadingRecords\": \"Please wait - loading...\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sLoadingRecords\": \"Loading...\",\n\n    /**\n     * Text which is displayed when the table is processing a user action\n     * (usually a sort command or similar).\n     *  @type string\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.processing\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"processing\": \"DataTables is currently busy\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sProcessing\": \"\",\n\n    /**\n     * Details the actions that will be taken when the user types into the\n     * filtering input text box. The variable \"_INPUT_\", if used in the string,\n     * is replaced with the HTML text box for the filtering input allowing\n     * control over where it appears in the string. If \"_INPUT_\" is not given\n     * then the input box is appended to the string automatically.\n     *  @type string\n     *  @default Search:\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.search\n     *\n     *  @example\n     *    // Input text box will be appended at the end automatically\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"search\": \"Filter records:\"\n     *        }\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Specify where the filter should appear\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"search\": \"Apply filter _INPUT_ to table\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sSearch\": \"Search:\",\n\n    /**\n     * Assign a `placeholder` attribute to the search `input` element\n     *  @type string\n     *  @default \n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.searchPlaceholder\n     */\n    \"sSearchPlaceholder\": \"\",\n\n    /**\n     * All of the language information can be stored in a file on the\n     * server-side, which DataTables will look up if this parameter is passed.\n     * It must store the URL of the language file, which is in a JSON format,\n     * and the object has the same properties as the oLanguage object in the\n     * initialiser object (i.e. the above parameters). Please refer to one of\n     * the example language files to see how this works in action.\n     *  @type string\n     *  @default <i>Empty string - i.e. disabled</i>\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.url\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"url\": \"https://www.sprymedia.co.uk/dataTables/lang.txt\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sUrl\": \"\",\n\n    /**\n     * Text shown inside the table records when the is no information to be\n     * displayed after filtering. `emptyTable` is shown when there is simply no\n     * information in the table at all (regardless of filtering).\n     *  @type string\n     *  @default No matching records found\n     *\n     *  @dtopt Language\n     *  @name DataTable.defaults.language.zeroRecords\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"language\": {\n     *          \"zeroRecords\": \"No records to display\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"sZeroRecords\": \"No matching records found\"\n  },\n\n  /**\n   * This parameter allows you to have define the global filtering state at\n   * initialisation time. As an object the `search` parameter must be\n   * defined, but all other parameters are optional. When `regex` is true,\n   * the search string will be treated as a regular expression, when false\n   * (default) it will be treated as a straight string. When `smart`\n   * DataTables will use it's smart filtering methods (to word match at\n   * any point in the data), when false this will not be done.\n   *  @namespace\n   *  @extends DataTable.models.oSearch\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.search\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"search\": {\"search\": \"Initial search\"}\n   *      } );\n   *    } )\n   */\n  \"oSearch\": $.extend({}, DataTable.models.oSearch),\n\n  /**\n   * __Deprecated__ The functionality provided by this parameter has now been\n   * superseded by that provided through `ajax`, which should be used instead.\n   *\n   * By default DataTables will look for the property `data` (or `aaData` for\n   * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n   * source or for server-side processing - this parameter allows that\n   * property to be changed. You can use Javascript dotted object notation to\n   * get a data source for multiple levels of nesting.\n   *  @type string\n   *  @default data\n   *\n   *  @dtopt Options\n   *  @dtopt Server-side\n   *  @name DataTable.defaults.ajaxDataProp\n   *\n   *  @deprecated 1.10. Please use `ajax` for this functionality now.\n   */\n  \"sAjaxDataProp\": \"data\",\n\n  /**\n   * __Deprecated__ The functionality provided by this parameter has now been\n   * superseded by that provided through `ajax`, which should be used instead.\n   *\n   * You can instruct DataTables to load data from an external\n   * source using this parameter (use aData if you want to pass data in you\n   * already have). Simply provide a url a JSON object can be obtained from.\n   *  @type string\n   *  @default null\n   *\n   *  @dtopt Options\n   *  @dtopt Server-side\n   *  @name DataTable.defaults.ajaxSource\n   *\n   *  @deprecated 1.10. Please use `ajax` for this functionality now.\n   */\n  \"sAjaxSource\": null,\n\n  /**\n   * This initialisation variable allows you to specify exactly where in the\n   * DOM you want DataTables to inject the various controls it adds to the page\n   * (for example you might want the pagination controls at the top of the\n   * table). DIV elements (with or without a custom class) can also be added to\n   * aid styling. The follow syntax is used:\n   *   <ul>\n   *     <li>The following options are allowed:\n   *       <ul>\n   *         <li>'l' - Length changing</li>\n   *         <li>'f' - Filtering input</li>\n   *         <li>'t' - The table!</li>\n   *         <li>'i' - Information</li>\n   *         <li>'p' - Pagination</li>\n   *         <li>'r' - pRocessing</li>\n   *       </ul>\n   *     </li>\n   *     <li>The following constants are allowed:\n   *       <ul>\n   *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n   *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n   *       </ul>\n   *     </li>\n   *     <li>The following syntax is expected:\n   *       <ul>\n   *         <li>'&lt;' and '&gt;' - div elements</li>\n   *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n   *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n   *       </ul>\n   *     </li>\n   *     <li>Examples:\n   *       <ul>\n   *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n   *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n   *       </ul>\n   *     </li>\n   *   </ul>\n   *  @type string\n   *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n   *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.dom\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n   *      } );\n   *    } );\n   */\n  \"sDom\": \"lfrtip\",\n\n  /**\n   * Search delay option. This will throttle full table searches that use the\n   * DataTables provided search input element (it does not effect calls to\n   * `dt-api search()`, providing a delay before the search is made.\n   *  @type integer\n   *  @default 0\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.searchDelay\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"searchDelay\": 200\n   *      } );\n   *    } )\n   */\n  \"searchDelay\": null,\n\n  /**\n   * DataTables features six different built-in options for the buttons to\n   * display for pagination control:\n   *\n   * * `numbers` - Page number buttons only\n   * * `simple` - 'Previous' and 'Next' buttons only\n   * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n   * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n   * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n   * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n   *  \n   * Further methods can be added using {@link DataTable.ext.oPagination}.\n   *  @type string\n   *  @default simple_numbers\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.pagingType\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"pagingType\": \"full_numbers\"\n   *      } );\n   *    } )\n   */\n  \"sPaginationType\": \"simple_numbers\",\n\n  /**\n   * Enable horizontal scrolling. When a table is too wide to fit into a\n   * certain layout, or you have a large number of columns in the table, you\n   * can enable x-scrolling to show the table in a viewport, which can be\n   * scrolled. This property can be `true` which will allow the table to\n   * scroll horizontally when needed, or any CSS unit, or a number (in which\n   * case it will be treated as a pixel measurement). Setting as simply `true`\n   * is recommended.\n   *  @type boolean|string\n   *  @default <i>blank string - i.e. disabled</i>\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.scrollX\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"scrollX\": true,\n   *        \"scrollCollapse\": true\n   *      } );\n   *    } );\n   */\n  \"sScrollX\": \"\",\n\n  /**\n   * This property can be used to force a DataTable to use more width than it\n   * might otherwise do when x-scrolling is enabled. For example if you have a\n   * table which requires to be well spaced, this parameter is useful for\n   * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n   * any CSS unit, or a number (in which case it will be treated as a pixel\n   * measurement).\n   *  @type string\n   *  @default <i>blank string - i.e. disabled</i>\n   *\n   *  @dtopt Options\n   *  @name DataTable.defaults.scrollXInner\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"scrollX\": \"100%\",\n   *        \"scrollXInner\": \"110%\"\n   *      } );\n   *    } );\n   */\n  \"sScrollXInner\": \"\",\n\n  /**\n   * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n   * to the given height, and enable scrolling for any data which overflows the\n   * current viewport. This can be used as an alternative to paging to display\n   * a lot of data in a small area (although paging and scrolling can both be\n   * enabled at the same time). This property can be any CSS unit, or a number\n   * (in which case it will be treated as a pixel measurement).\n   *  @type string\n   *  @default <i>blank string - i.e. disabled</i>\n   *\n   *  @dtopt Features\n   *  @name DataTable.defaults.scrollY\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"scrollY\": \"200px\",\n   *        \"paginate\": false\n   *      } );\n   *    } );\n   */\n  \"sScrollY\": \"\",\n\n  /**\n   * __Deprecated__ The functionality provided by this parameter has now been\n   * superseded by that provided through `ajax`, which should be used instead.\n   *\n   * Set the HTTP method that is used to make the Ajax call for server-side\n   * processing or Ajax sourced data.\n   *  @type string\n   *  @default GET\n   *\n   *  @dtopt Options\n   *  @dtopt Server-side\n   *  @name DataTable.defaults.serverMethod\n   *\n   *  @deprecated 1.10. Please use `ajax` for this functionality now.\n   */\n  \"sServerMethod\": \"GET\",\n\n  /**\n   * DataTables makes use of renderers when displaying HTML elements for\n   * a table. These renderers can be added or modified by plug-ins to\n   * generate suitable mark-up for a site. For example the Bootstrap\n   * integration plug-in for DataTables uses a paging button renderer to\n   * display pagination buttons in the mark-up required by Bootstrap.\n   *\n   * For further information about the renderers available see\n   * DataTable.ext.renderer\n   *  @type string|object\n   *  @default null\n   *\n   *  @name DataTable.defaults.renderer\n   *\n   */\n  \"renderer\": null,\n\n  /**\n   * Set the data property name that DataTables should use to get a row's id\n   * to set as the `id` property in the node.\n   *  @type string\n   *  @default DT_RowId\n   *\n   *  @name DataTable.defaults.rowId\n   */\n  \"rowId\": \"DT_RowId\"\n};\n\n_fnHungarianMap(DataTable.defaults);\n/*\n * Developer note - See note in model.defaults.js about the use of Hungarian\n * notation and camel case.\n */\n\n/**\n * Column options that can be given to DataTables at initialisation time.\n *  @namespace\n */\n\n\nDataTable.defaults.column = {\n  /**\n   * Define which column(s) an order will occur on for this column. This\n   * allows a column's ordering to take multiple columns into account when\n   * doing a sort or use the data from a different column. For example first\n   * name / last name columns make sense to do a multi-column sort over the\n   * two columns.\n   *  @type array|int\n   *  @default null <i>Takes the value of the column index automatically</i>\n   *\n   *  @name DataTable.defaults.column.orderData\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n   *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n   *          { \"orderData\": 2, \"targets\": [ 2 ] }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"orderData\": [ 0, 1 ] },\n   *          { \"orderData\": [ 1, 0 ] },\n   *          { \"orderData\": 2 },\n   *          null,\n   *          null\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"aDataSort\": null,\n  \"iDataSort\": -1,\n\n  /**\n   * You can control the default ordering direction, and even alter the\n   * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n   * using this parameter.\n   *  @type array\n   *  @default [ 'asc', 'desc' ]\n   *\n   *  @name DataTable.defaults.column.orderSequence\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n   *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n   *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          null,\n   *          { \"orderSequence\": [ \"asc\" ] },\n   *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n   *          { \"orderSequence\": [ \"desc\" ] },\n   *          null\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"asSorting\": ['asc', 'desc'],\n\n  /**\n   * Enable or disable filtering on the data in this column.\n   *  @type boolean\n   *  @default true\n   *\n   *  @name DataTable.defaults.column.searchable\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"searchable\": false, \"targets\": [ 0 ] }\n   *        ] } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"searchable\": false },\n   *          null,\n   *          null,\n   *          null,\n   *          null\n   *        ] } );\n   *    } );\n   */\n  \"bSearchable\": true,\n\n  /**\n   * Enable or disable ordering on this column.\n   *  @type boolean\n   *  @default true\n   *\n   *  @name DataTable.defaults.column.orderable\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"orderable\": false, \"targets\": [ 0 ] }\n   *        ] } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"orderable\": false },\n   *          null,\n   *          null,\n   *          null,\n   *          null\n   *        ] } );\n   *    } );\n   */\n  \"bSortable\": true,\n\n  /**\n   * Enable or disable the display of this column.\n   *  @type boolean\n   *  @default true\n   *\n   *  @name DataTable.defaults.column.visible\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"visible\": false, \"targets\": [ 0 ] }\n   *        ] } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"visible\": false },\n   *          null,\n   *          null,\n   *          null,\n   *          null\n   *        ] } );\n   *    } );\n   */\n  \"bVisible\": true,\n\n  /**\n   * Developer definable function that is called whenever a cell is created (Ajax source,\n   * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n   * allowing you to modify the DOM element (add background colour for example) when the\n   * element is available.\n   *  @type function\n   *  @param {element} td The TD node that has been created\n   *  @param {*} cellData The Data for the cell\n   *  @param {array|object} rowData The data for the whole row\n   *  @param {int} row The row index for the aoData data store\n   *  @param {int} col The column index for aoColumns\n   *\n   *  @name DataTable.defaults.column.createdCell\n   *  @dtopt Columns\n   *\n   *  @example\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [ {\n   *          \"targets\": [3],\n   *          \"createdCell\": function (td, cellData, rowData, row, col) {\n   *            if ( cellData == \"1.7\" ) {\n   *              $(td).css('color', 'blue')\n   *            }\n   *          }\n   *        } ]\n   *      });\n   *    } );\n   */\n  \"fnCreatedCell\": null,\n\n  /**\n   * This parameter has been replaced by `data` in DataTables to ensure naming\n   * consistency. `dataProp` can still be used, as there is backwards\n   * compatibility in DataTables for this option, but it is strongly\n   * recommended that you use `data` in preference to `dataProp`.\n   *  @name DataTable.defaults.column.dataProp\n   */\n\n  /**\n   * This property can be used to read data from any data source property,\n   * including deeply nested objects / properties. `data` can be given in a\n   * number of different ways which effect its behaviour:\n   *\n   * * `integer` - treated as an array index for the data source. This is the\n   *   default that DataTables uses (incrementally increased for each column).\n   * * `string` - read an object property from the data source. There are\n   *   three 'special' options that can be used in the string to alter how\n   *   DataTables reads the data from the source object:\n   *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n   *      Javascript to read from nested objects, so to can the options\n   *      specified in `data`. For example: `browser.version` or\n   *      `browser.name`. If your object parameter name contains a period, use\n   *      `\\\\` to escape it - i.e. `first\\\\.name`.\n   *    * `[]` - Array notation. DataTables can automatically combine data\n   *      from and array source, joining the data with the characters provided\n   *      between the two brackets. For example: `name[, ]` would provide a\n   *      comma-space separated list from the source array. If no characters\n   *      are provided between the brackets, the original array source is\n   *      returned.\n   *    * `()` - Function notation. Adding `()` to the end of a parameter will\n   *      execute a function of the name given. For example: `browser()` for a\n   *      simple function on the data source, `browser.version()` for a\n   *      function in a nested property or even `browser().version` to get an\n   *      object property if the function called returns an object. Note that\n   *      function notation is recommended for use in `render` rather than\n   *      `data` as it is much simpler to use as a renderer.\n   * * `null` - use the original data source for the row rather than plucking\n   *   data directly from it. This action has effects on two other\n   *   initialisation options:\n   *    * `defaultContent` - When null is given as the `data` option and\n   *      `defaultContent` is specified for the column, the value defined by\n   *      `defaultContent` will be used for the cell.\n   *    * `render` - When null is used for the `data` option and the `render`\n   *      option is specified for the column, the whole data source for the\n   *      row is used for the renderer.\n   * * `function` - the function given will be executed whenever DataTables\n   *   needs to set or get the data for a cell in the column. The function\n   *   takes three parameters:\n   *    * Parameters:\n   *      * `{array|object}` The data source for the row\n   *      * `{string}` The type call data requested - this will be 'set' when\n   *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n   *        when gathering data. Note that when `undefined` is given for the\n   *        type DataTables expects to get the raw data for the object back<\n   *      * `{*}` Data to set when the second parameter is 'set'.\n   *    * Return:\n   *      * The return value from the function is not required when 'set' is\n   *        the type of call, but otherwise the return is what will be used\n   *        for the data requested.\n   *\n   * Note that `data` is a getter and setter option. If you just require\n   * formatting of data for output, you will likely want to use `render` which\n   * is simply a getter and thus simpler to use.\n   *\n   * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n   * name change reflects the flexibility of this property and is consistent\n   * with the naming of mRender. If 'mDataProp' is given, then it will still\n   * be used by DataTables, as it automatically maps the old name to the new\n   * if required.\n   *\n   *  @type string|int|function|null\n   *  @default null <i>Use automatically calculated column index</i>\n   *\n   *  @name DataTable.defaults.column.data\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Read table data from objects\n   *    // JSON structure for each row:\n   *    //   {\n   *    //      \"engine\": {value},\n   *    //      \"browser\": {value},\n   *    //      \"platform\": {value},\n   *    //      \"version\": {value},\n   *    //      \"grade\": {value}\n   *    //   }\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"ajaxSource\": \"sources/objects.txt\",\n   *        \"columns\": [\n   *          { \"data\": \"engine\" },\n   *          { \"data\": \"browser\" },\n   *          { \"data\": \"platform\" },\n   *          { \"data\": \"version\" },\n   *          { \"data\": \"grade\" }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Read information from deeply nested objects\n   *    // JSON structure for each row:\n   *    //   {\n   *    //      \"engine\": {value},\n   *    //      \"browser\": {value},\n   *    //      \"platform\": {\n   *    //         \"inner\": {value}\n   *    //      },\n   *    //      \"details\": [\n   *    //         {value}, {value}\n   *    //      ]\n   *    //   }\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"ajaxSource\": \"sources/deep.txt\",\n   *        \"columns\": [\n   *          { \"data\": \"engine\" },\n   *          { \"data\": \"browser\" },\n   *          { \"data\": \"platform.inner\" },\n   *          { \"data\": \"details.0\" },\n   *          { \"data\": \"details.1\" }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `data` as a function to provide different information for\n   *    // sorting, filtering and display. In this case, currency (price)\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [ {\n   *          \"targets\": [ 0 ],\n   *          \"data\": function ( source, type, val ) {\n   *            if (type === 'set') {\n   *              source.price = val;\n   *              // Store the computed display and filter values for efficiency\n   *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n   *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n   *              return;\n   *            }\n   *            else if (type === 'display') {\n   *              return source.price_display;\n   *            }\n   *            else if (type === 'filter') {\n   *              return source.price_filter;\n   *            }\n   *            // 'sort', 'type' and undefined all just use the integer\n   *            return source.price;\n   *          }\n   *        } ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using default content\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [ {\n   *          \"targets\": [ 0 ],\n   *          \"data\": null,\n   *          \"defaultContent\": \"Click to edit\"\n   *        } ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using array notation - outputting a list from an array\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [ {\n   *          \"targets\": [ 0 ],\n   *          \"data\": \"name[, ]\"\n   *        } ]\n   *      } );\n   *    } );\n   *\n   */\n  \"mData\": null,\n\n  /**\n   * This property is the rendering partner to `data` and it is suggested that\n   * when you want to manipulate data for display (including filtering,\n   * sorting etc) without altering the underlying data for the table, use this\n   * property. `render` can be considered to be the the read only companion to\n   * `data` which is read / write (then as such more complex). Like `data`\n   * this option can be given in a number of different ways to effect its\n   * behaviour:\n   *\n   * * `integer` - treated as an array index for the data source. This is the\n   *   default that DataTables uses (incrementally increased for each column).\n   * * `string` - read an object property from the data source. There are\n   *   three 'special' options that can be used in the string to alter how\n   *   DataTables reads the data from the source object:\n   *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n   *      Javascript to read from nested objects, so to can the options\n   *      specified in `data`. For example: `browser.version` or\n   *      `browser.name`. If your object parameter name contains a period, use\n   *      `\\\\` to escape it - i.e. `first\\\\.name`.\n   *    * `[]` - Array notation. DataTables can automatically combine data\n   *      from and array source, joining the data with the characters provided\n   *      between the two brackets. For example: `name[, ]` would provide a\n   *      comma-space separated list from the source array. If no characters\n   *      are provided between the brackets, the original array source is\n   *      returned.\n   *    * `()` - Function notation. Adding `()` to the end of a parameter will\n   *      execute a function of the name given. For example: `browser()` for a\n   *      simple function on the data source, `browser.version()` for a\n   *      function in a nested property or even `browser().version` to get an\n   *      object property if the function called returns an object.\n   * * `object` - use different data for the different data types requested by\n   *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n   *   of the object is the data type the property refers to and the value can\n   *   defined using an integer, string or function using the same rules as\n   *   `render` normally does. Note that an `_` option _must_ be specified.\n   *   This is the default value to use if you haven't specified a value for\n   *   the data type requested by DataTables.\n   * * `function` - the function given will be executed whenever DataTables\n   *   needs to set or get the data for a cell in the column. The function\n   *   takes three parameters:\n   *    * Parameters:\n   *      * {array|object} The data source for the row (based on `data`)\n   *      * {string} The type call data requested - this will be 'filter',\n   *        'display', 'type' or 'sort'.\n   *      * {array|object} The full data source for the row (not based on\n   *        `data`)\n   *    * Return:\n   *      * The return value from the function is what will be used for the\n   *        data requested.\n   *\n   *  @type string|int|function|object|null\n   *  @default null Use the data source value.\n   *\n   *  @name DataTable.defaults.column.render\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Create a comma separated list from an array of objects\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"ajaxSource\": \"sources/deep.txt\",\n   *        \"columns\": [\n   *          { \"data\": \"engine\" },\n   *          { \"data\": \"browser\" },\n   *          {\n   *            \"data\": \"platform\",\n   *            \"render\": \"[, ].name\"\n   *          }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Execute a function to obtain data\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [ {\n   *          \"targets\": [ 0 ],\n   *          \"data\": null, // Use the full data source object for the renderer's source\n   *          \"render\": \"browserName()\"\n   *        } ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // As an object, extracting different data for the different types\n   *    // This would be used with a data source such as:\n   *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n   *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n   *    // (which has both forms) is used for filtering for if a user inputs either format, while\n   *    // the formatted phone number is the one that is shown in the table.\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [ {\n   *          \"targets\": [ 0 ],\n   *          \"data\": null, // Use the full data source object for the renderer's source\n   *          \"render\": {\n   *            \"_\": \"phone\",\n   *            \"filter\": \"phone_filter\",\n   *            \"display\": \"phone_display\"\n   *          }\n   *        } ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Use as a function to create a link from the data source\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [ {\n   *          \"targets\": [ 0 ],\n   *          \"data\": \"download_link\",\n   *          \"render\": function ( data, type, full ) {\n   *            return '<a href=\"'+data+'\">Download</a>';\n   *          }\n   *        } ]\n   *      } );\n   *    } );\n   */\n  \"mRender\": null,\n\n  /**\n   * Change the cell type created for the column - either TD cells or TH cells. This\n   * can be useful as TH cells have semantic meaning in the table body, allowing them\n   * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n   *  @type string\n   *  @default td\n   *\n   *  @name DataTable.defaults.column.cellType\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Make the first column use TH cells\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [ {\n   *          \"targets\": [ 0 ],\n   *          \"cellType\": \"th\"\n   *        } ]\n   *      } );\n   *    } );\n   */\n  \"sCellType\": \"td\",\n\n  /**\n   * Class to give to each cell in this column.\n   *  @type string\n   *  @default <i>Empty string</i>\n   *\n   *  @name DataTable.defaults.column.class\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"class\": \"my_class\" },\n   *          null,\n   *          null,\n   *          null,\n   *          null\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"sClass\": \"\",\n\n  /**\n   * When DataTables calculates the column widths to assign to each column,\n   * it finds the longest string in each column and then constructs a\n   * temporary table and reads the widths from that. The problem with this\n   * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n   * string - thus the calculation can go wrong (doing it properly and putting\n   * it into an DOM object and measuring that is horribly(!) slow). Thus as\n   * a \"work around\" we provide this option. It will append its value to the\n   * text that is found to be the longest string for the column - i.e. padding.\n   * Generally you shouldn't need this!\n   *  @type string\n   *  @default <i>Empty string<i>\n   *\n   *  @name DataTable.defaults.column.contentPadding\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          null,\n   *          null,\n   *          null,\n   *          {\n   *            \"contentPadding\": \"mmm\"\n   *          }\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"sContentPadding\": \"\",\n\n  /**\n   * Allows a default value to be given for a column's data, and will be used\n   * whenever a null data source is encountered (this can be because `data`\n   * is set to null, or because the data source itself is null).\n   *  @type string\n   *  @default null\n   *\n   *  @name DataTable.defaults.column.defaultContent\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          {\n   *            \"data\": null,\n   *            \"defaultContent\": \"Edit\",\n   *            \"targets\": [ -1 ]\n   *          }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          null,\n   *          null,\n   *          null,\n   *          {\n   *            \"data\": null,\n   *            \"defaultContent\": \"Edit\"\n   *          }\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"sDefaultContent\": null,\n\n  /**\n   * This parameter is only used in DataTables' server-side processing. It can\n   * be exceptionally useful to know what columns are being displayed on the\n   * client side, and to map these to database fields. When defined, the names\n   * also allow DataTables to reorder information from the server if it comes\n   * back in an unexpected order (i.e. if you switch your columns around on the\n   * client-side, your server-side code does not also need updating).\n   *  @type string\n   *  @default <i>Empty string</i>\n   *\n   *  @name DataTable.defaults.column.name\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n   *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n   *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n   *          { \"name\": \"version\", \"targets\": [ 3 ] },\n   *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"name\": \"engine\" },\n   *          { \"name\": \"browser\" },\n   *          { \"name\": \"platform\" },\n   *          { \"name\": \"version\" },\n   *          { \"name\": \"grade\" }\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"sName\": \"\",\n\n  /**\n   * Defines a data source type for the ordering which can be used to read\n   * real-time information from the table (updating the internally cached\n   * version) prior to ordering. This allows ordering to occur on user\n   * editable elements such as form inputs.\n   *  @type string\n   *  @default std\n   *\n   *  @name DataTable.defaults.column.orderDataType\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n   *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n   *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n   *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          null,\n   *          null,\n   *          { \"orderDataType\": \"dom-text\" },\n   *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n   *          { \"orderDataType\": \"dom-select\" },\n   *          { \"orderDataType\": \"dom-checkbox\" }\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"sSortDataType\": \"std\",\n\n  /**\n   * The title of this column.\n   *  @type string\n   *  @default null <i>Derived from the 'TH' value for this column in the\n   *    original HTML table.</i>\n   *\n   *  @name DataTable.defaults.column.title\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"title\": \"My column title\" },\n   *          null,\n   *          null,\n   *          null,\n   *          null\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"sTitle\": null,\n\n  /**\n   * The type allows you to specify how the data for this column will be\n   * ordered. Four types (string, numeric, date and html (which will strip\n   * HTML tags before ordering)) are currently available. Note that only date\n   * formats understood by Javascript's Date() object will be accepted as type\n   * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n   * 'numeric', 'date' or 'html' (by default). Further types can be adding\n   * through plug-ins.\n   *  @type string\n   *  @default null <i>Auto-detected from raw data</i>\n   *\n   *  @name DataTable.defaults.column.type\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"type\": \"html\", \"targets\": [ 0 ] }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"type\": \"html\" },\n   *          null,\n   *          null,\n   *          null,\n   *          null\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"sType\": null,\n\n  /**\n   * Defining the width of the column, this parameter may take any CSS value\n   * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n   * been given a specific width through this interface ensuring that the table\n   * remains readable.\n   *  @type string\n   *  @default null <i>Automatic</i>\n   *\n   *  @name DataTable.defaults.column.width\n   *  @dtopt Columns\n   *\n   *  @example\n   *    // Using `columnDefs`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columnDefs\": [\n   *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n   *        ]\n   *      } );\n   *    } );\n   *\n   *  @example\n   *    // Using `columns`\n   *    $(document).ready( function() {\n   *      $('#example').dataTable( {\n   *        \"columns\": [\n   *          { \"width\": \"20%\" },\n   *          null,\n   *          null,\n   *          null,\n   *          null\n   *        ]\n   *      } );\n   *    } );\n   */\n  \"sWidth\": null\n};\n\n_fnHungarianMap(DataTable.defaults.column);\n/**\n * DataTables settings object - this holds all the information needed for a\n * given table, including configuration, data and current application of the\n * table options. DataTables does not have a single instance for each DataTable\n * with the settings attached to that instance, but rather instances of the\n * DataTable \"class\" are created on-the-fly as needed (typically by a\n * $().dataTable() call) and the settings object is then applied to that\n * instance.\n *\n * Note that this object is related to {@link DataTable.defaults} but this\n * one is the internal data store for DataTables's cache of columns. It should\n * NOT be manipulated outside of DataTables. Any configuration should be done\n * through the initialisation options.\n *  @namespace\n *  @todo Really should attach the settings object to individual instances so we\n *    don't need to create new instances on each $().dataTable() call (if the\n *    table already exists). It would also save passing oSettings around and\n *    into every single function. However, this is a very significant\n *    architecture change for DataTables and will almost certainly break\n *    backwards compatibility with older installations. This is something that\n *    will be done in 2.0.\n */\n\n\nDataTable.models.oSettings = {\n  /**\n   * Primary features of DataTables and their enablement state.\n   *  @namespace\n   */\n  \"oFeatures\": {\n    /**\n     * Flag to say if DataTables should automatically try to calculate the\n     * optimum table and columns widths (true) or not (false).\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bAutoWidth\": null,\n\n    /**\n     * Delay the creation of TR and TD elements until they are actually\n     * needed by a driven page draw. This can give a significant speed\n     * increase for Ajax source and Javascript source data, but makes no\n     * difference at all for DOM and server-side processing tables.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bDeferRender\": null,\n\n    /**\n     * Enable filtering on the table or not. Note that if this is disabled\n     * then there is no filtering at all on the table, including fnFilter.\n     * To just remove the filtering input use sDom and remove the 'f' option.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bFilter\": null,\n\n    /**\n     * Table information element (the 'Showing x of y records' div) enable\n     * flag.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bInfo\": null,\n\n    /**\n     * Present a user control allowing the end user to change the page size\n     * when pagination is enabled.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bLengthChange\": null,\n\n    /**\n     * Pagination enabled or not. Note that if this is disabled then length\n     * changing must also be disabled.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bPaginate\": null,\n\n    /**\n     * Processing indicator enable flag whenever DataTables is enacting a\n     * user request - typically an Ajax request for server-side processing.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bProcessing\": null,\n\n    /**\n     * Server-side processing enabled flag - when enabled DataTables will\n     * get all data from the server for every draw - there is no filtering,\n     * sorting or paging done on the client-side.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bServerSide\": null,\n\n    /**\n     * Sorting enablement flag.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bSort\": null,\n\n    /**\n     * Multi-column sorting\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bSortMulti\": null,\n\n    /**\n     * Apply a class to the columns which are being sorted to provide a\n     * visual highlight or not. This can slow things down when enabled since\n     * there is a lot of DOM interaction.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bSortClasses\": null,\n\n    /**\n     * State saving enablement flag.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bStateSave\": null\n  },\n\n  /**\n   * Scrolling settings for a table.\n   *  @namespace\n   */\n  \"oScroll\": {\n    /**\n     * When the table is shorter in height than sScrollY, collapse the\n     * table container down to the height of the table (when true).\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bCollapse\": null,\n\n    /**\n     * Width of the scrollbar for the web-browser's platform. Calculated\n     * during table initialisation.\n     *  @type int\n     *  @default 0\n     */\n    \"iBarWidth\": 0,\n\n    /**\n     * Viewport width for horizontal scrolling. Horizontal scrolling is\n     * disabled if an empty string.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     */\n    \"sX\": null,\n\n    /**\n     * Width to expand the table to when using x-scrolling. Typically you\n     * should not need to use this.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @deprecated\n     */\n    \"sXInner\": null,\n\n    /**\n     * Viewport height for vertical scrolling. Vertical scrolling is disabled\n     * if an empty string.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     */\n    \"sY\": null\n  },\n\n  /**\n   * Language information for the table.\n   *  @namespace\n   *  @extends DataTable.defaults.oLanguage\n   */\n  \"oLanguage\": {\n    /**\n     * Information callback function. See\n     * {@link DataTable.defaults.fnInfoCallback}\n     *  @type function\n     *  @default null\n     */\n    \"fnInfoCallback\": null\n  },\n\n  /**\n   * Browser support parameters\n   *  @namespace\n   */\n  \"oBrowser\": {\n    /**\n     * Indicate if the browser incorrectly calculates width:100% inside a\n     * scrolling element (IE6/7)\n     *  @type boolean\n     *  @default false\n     */\n    \"bScrollOversize\": false,\n\n    /**\n     * Determine if the vertical scrollbar is on the right or left of the\n     * scrolling container - needed for rtl language layout, although not\n     * all browsers move the scrollbar (Safari).\n     *  @type boolean\n     *  @default false\n     */\n    \"bScrollbarLeft\": false,\n\n    /**\n     * Flag for if `getBoundingClientRect` is fully supported or not\n     *  @type boolean\n     *  @default false\n     */\n    \"bBounding\": false,\n\n    /**\n     * Browser scrollbar width\n     *  @type integer\n     *  @default 0\n     */\n    \"barWidth\": 0\n  },\n  \"ajax\": null,\n\n  /**\n   * Array referencing the nodes which are used for the features. The\n   * parameters of this object match what is allowed by sDom - i.e.\n   *   <ul>\n   *     <li>'l' - Length changing</li>\n   *     <li>'f' - Filtering input</li>\n   *     <li>'t' - The table!</li>\n   *     <li>'i' - Information</li>\n   *     <li>'p' - Pagination</li>\n   *     <li>'r' - pRocessing</li>\n   *   </ul>\n   *  @type array\n   *  @default []\n   */\n  \"aanFeatures\": [],\n\n  /**\n   * Store data information - see {@link DataTable.models.oRow} for detailed\n   * information.\n   *  @type array\n   *  @default []\n   */\n  \"aoData\": [],\n\n  /**\n   * Array of indexes which are in the current display (after filtering etc)\n   *  @type array\n   *  @default []\n   */\n  \"aiDisplay\": [],\n\n  /**\n   * Array of indexes for display - no filtering\n   *  @type array\n   *  @default []\n   */\n  \"aiDisplayMaster\": [],\n\n  /**\n   * Map of row ids to data indexes\n   *  @type object\n   *  @default {}\n   */\n  \"aIds\": {},\n\n  /**\n   * Store information about each column that is in use\n   *  @type array\n   *  @default []\n   */\n  \"aoColumns\": [],\n\n  /**\n   * Store information about the table's header\n   *  @type array\n   *  @default []\n   */\n  \"aoHeader\": [],\n\n  /**\n   * Store information about the table's footer\n   *  @type array\n   *  @default []\n   */\n  \"aoFooter\": [],\n\n  /**\n   * Store the applied global search information in case we want to force a\n   * research or compare the old search to a new one.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @namespace\n   *  @extends DataTable.models.oSearch\n   */\n  \"oPreviousSearch\": {},\n\n  /**\n   * Store the applied search for each column - see\n   * {@link DataTable.models.oSearch} for the format that is used for the\n   * filtering information for each column.\n   *  @type array\n   *  @default []\n   */\n  \"aoPreSearchCols\": [],\n\n  /**\n   * Sorting that is applied to the table. Note that the inner arrays are\n   * used in the following manner:\n   * <ul>\n   *   <li>Index 0 - column number</li>\n   *   <li>Index 1 - current sorting direction</li>\n   * </ul>\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type array\n   *  @todo These inner arrays should really be objects\n   */\n  \"aaSorting\": null,\n\n  /**\n   * Sorting that is always applied to the table (i.e. prefixed in front of\n   * aaSorting).\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type array\n   *  @default []\n   */\n  \"aaSortingFixed\": [],\n\n  /**\n   * Classes to use for the striping of a table.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type array\n   *  @default []\n   */\n  \"asStripeClasses\": null,\n\n  /**\n   * If restoring a table - we should restore its striping classes as well\n   *  @type array\n   *  @default []\n   */\n  \"asDestroyStripes\": [],\n\n  /**\n   * If restoring a table - we should restore its width\n   *  @type int\n   *  @default 0\n   */\n  \"sDestroyWidth\": 0,\n\n  /**\n   * Callback functions array for every time a row is inserted (i.e. on a draw).\n   *  @type array\n   *  @default []\n   */\n  \"aoRowCallback\": [],\n\n  /**\n   * Callback functions for the header on each draw.\n   *  @type array\n   *  @default []\n   */\n  \"aoHeaderCallback\": [],\n\n  /**\n   * Callback function for the footer on each draw.\n   *  @type array\n   *  @default []\n   */\n  \"aoFooterCallback\": [],\n\n  /**\n   * Array of callback functions for draw callback functions\n   *  @type array\n   *  @default []\n   */\n  \"aoDrawCallback\": [],\n\n  /**\n   * Array of callback functions for row created function\n   *  @type array\n   *  @default []\n   */\n  \"aoRowCreatedCallback\": [],\n\n  /**\n   * Callback functions for just before the table is redrawn. A return of\n   * false will be used to cancel the draw.\n   *  @type array\n   *  @default []\n   */\n  \"aoPreDrawCallback\": [],\n\n  /**\n   * Callback functions for when the table has been initialised.\n   *  @type array\n   *  @default []\n   */\n  \"aoInitComplete\": [],\n\n  /**\n   * Callbacks for modifying the settings to be stored for state saving, prior to\n   * saving state.\n   *  @type array\n   *  @default []\n   */\n  \"aoStateSaveParams\": [],\n\n  /**\n   * Callbacks for modifying the settings that have been stored for state saving\n   * prior to using the stored values to restore the state.\n   *  @type array\n   *  @default []\n   */\n  \"aoStateLoadParams\": [],\n\n  /**\n   * Callbacks for operating on the settings object once the saved state has been\n   * loaded\n   *  @type array\n   *  @default []\n   */\n  \"aoStateLoaded\": [],\n\n  /**\n   * Cache the table ID for quick access\n   *  @type string\n   *  @default <i>Empty string</i>\n   */\n  \"sTableId\": \"\",\n\n  /**\n   * The TABLE node for the main table\n   *  @type node\n   *  @default null\n   */\n  \"nTable\": null,\n\n  /**\n   * Permanent ref to the thead element\n   *  @type node\n   *  @default null\n   */\n  \"nTHead\": null,\n\n  /**\n   * Permanent ref to the tfoot element - if it exists\n   *  @type node\n   *  @default null\n   */\n  \"nTFoot\": null,\n\n  /**\n   * Permanent ref to the tbody element\n   *  @type node\n   *  @default null\n   */\n  \"nTBody\": null,\n\n  /**\n   * Cache the wrapper node (contains all DataTables controlled elements)\n   *  @type node\n   *  @default null\n   */\n  \"nTableWrapper\": null,\n\n  /**\n   * Indicate if when using server-side processing the loading of data\n   * should be deferred until the second draw.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type boolean\n   *  @default false\n   */\n  \"bDeferLoading\": false,\n\n  /**\n   * Indicate if all required information has been read in\n   *  @type boolean\n   *  @default false\n   */\n  \"bInitialised\": false,\n\n  /**\n   * Information about open rows. Each object in the array has the parameters\n   * 'nTr' and 'nParent'\n   *  @type array\n   *  @default []\n   */\n  \"aoOpenRows\": [],\n\n  /**\n   * Dictate the positioning of DataTables' control elements - see\n   * {@link DataTable.model.oInit.sDom}.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type string\n   *  @default null\n   */\n  \"sDom\": null,\n\n  /**\n   * Search delay (in mS)\n   *  @type integer\n   *  @default null\n   */\n  \"searchDelay\": null,\n\n  /**\n   * Which type of pagination should be used.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type string\n   *  @default two_button\n   */\n  \"sPaginationType\": \"two_button\",\n\n  /**\n   * The state duration (for `stateSave`) in seconds.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type int\n   *  @default 0\n   */\n  \"iStateDuration\": 0,\n\n  /**\n   * Array of callback functions for state saving. Each array element is an\n   * object with the following parameters:\n   *   <ul>\n   *     <li>function:fn - function to call. Takes two parameters, oSettings\n   *       and the JSON string to save that has been thus far created. Returns\n   *       a JSON string to be inserted into a json object\n   *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n   *     <li>string:sName - name of callback</li>\n   *   </ul>\n   *  @type array\n   *  @default []\n   */\n  \"aoStateSave\": [],\n\n  /**\n   * Array of callback functions for state loading. Each array element is an\n   * object with the following parameters:\n   *   <ul>\n   *     <li>function:fn - function to call. Takes two parameters, oSettings\n   *       and the object stored. May return false to cancel state loading</li>\n   *     <li>string:sName - name of callback</li>\n   *   </ul>\n   *  @type array\n   *  @default []\n   */\n  \"aoStateLoad\": [],\n\n  /**\n   * State that was saved. Useful for back reference\n   *  @type object\n   *  @default null\n   */\n  \"oSavedState\": null,\n\n  /**\n   * State that was loaded. Useful for back reference\n   *  @type object\n   *  @default null\n   */\n  \"oLoadedState\": null,\n\n  /**\n   * Source url for AJAX data for the table.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type string\n   *  @default null\n   */\n  \"sAjaxSource\": null,\n\n  /**\n   * Property from a given object from which to read the table data from. This\n   * can be an empty string (when not server-side processing), in which case\n   * it is  assumed an an array is given directly.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type string\n   */\n  \"sAjaxDataProp\": null,\n\n  /**\n   * The last jQuery XHR object that was used for server-side data gathering.\n   * This can be used for working with the XHR information in one of the\n   * callbacks\n   *  @type object\n   *  @default null\n   */\n  \"jqXHR\": null,\n\n  /**\n   * JSON returned from the server in the last Ajax request\n   *  @type object\n   *  @default undefined\n   */\n  \"json\": undefined,\n\n  /**\n   * Data submitted as part of the last Ajax request\n   *  @type object\n   *  @default undefined\n   */\n  \"oAjaxData\": undefined,\n\n  /**\n   * Function to get the server-side data.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type function\n   */\n  \"fnServerData\": null,\n\n  /**\n   * Functions which are called prior to sending an Ajax request so extra\n   * parameters can easily be sent to the server\n   *  @type array\n   *  @default []\n   */\n  \"aoServerParams\": [],\n\n  /**\n   * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n   * required).\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type string\n   */\n  \"sServerMethod\": null,\n\n  /**\n   * Format numbers for display.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type function\n   */\n  \"fnFormatNumber\": null,\n\n  /**\n   * List of options that can be used for the user selectable length menu.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type array\n   *  @default []\n   */\n  \"aLengthMenu\": null,\n\n  /**\n   * Counter for the draws that the table does. Also used as a tracker for\n   * server-side processing\n   *  @type int\n   *  @default 0\n   */\n  \"iDraw\": 0,\n\n  /**\n   * Indicate if a redraw is being done - useful for Ajax\n   *  @type boolean\n   *  @default false\n   */\n  \"bDrawing\": false,\n\n  /**\n   * Draw index (iDraw) of the last error when parsing the returned data\n   *  @type int\n   *  @default -1\n   */\n  \"iDrawError\": -1,\n\n  /**\n   * Paging display length\n   *  @type int\n   *  @default 10\n   */\n  \"_iDisplayLength\": 10,\n\n  /**\n   * Paging start point - aiDisplay index\n   *  @type int\n   *  @default 0\n   */\n  \"_iDisplayStart\": 0,\n\n  /**\n   * Server-side processing - number of records in the result set\n   * (i.e. before filtering), Use fnRecordsTotal rather than\n   * this property to get the value of the number of records, regardless of\n   * the server-side processing setting.\n   *  @type int\n   *  @default 0\n   *  @private\n   */\n  \"_iRecordsTotal\": 0,\n\n  /**\n   * Server-side processing - number of records in the current display set\n   * (i.e. after filtering). Use fnRecordsDisplay rather than\n   * this property to get the value of the number of records, regardless of\n   * the server-side processing setting.\n   *  @type boolean\n   *  @default 0\n   *  @private\n   */\n  \"_iRecordsDisplay\": 0,\n\n  /**\n   * The classes to use for the table\n   *  @type object\n   *  @default {}\n   */\n  \"oClasses\": {},\n\n  /**\n   * Flag attached to the settings object so you can check in the draw\n   * callback if filtering has been done in the draw. Deprecated in favour of\n   * events.\n   *  @type boolean\n   *  @default false\n   *  @deprecated\n   */\n  \"bFiltered\": false,\n\n  /**\n   * Flag attached to the settings object so you can check in the draw\n   * callback if sorting has been done in the draw. Deprecated in favour of\n   * events.\n   *  @type boolean\n   *  @default false\n   *  @deprecated\n   */\n  \"bSorted\": false,\n\n  /**\n   * Indicate that if multiple rows are in the header and there is more than\n   * one unique cell per column, if the top one (true) or bottom one (false)\n   * should be used for sorting / title by DataTables.\n   * Note that this parameter will be set by the initialisation routine. To\n   * set a default use {@link DataTable.defaults}.\n   *  @type boolean\n   */\n  \"bSortCellsTop\": null,\n\n  /**\n   * Initialisation object that is used for the table\n   *  @type object\n   *  @default null\n   */\n  \"oInit\": null,\n\n  /**\n   * Destroy callback functions - for plug-ins to attach themselves to the\n   * destroy so they can clean up markup and events.\n   *  @type array\n   *  @default []\n   */\n  \"aoDestroyCallback\": [],\n\n  /**\n   * Get the number of records in the current record set, before filtering\n   *  @type function\n   */\n  \"fnRecordsTotal\": function () {\n    return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;\n  },\n\n  /**\n   * Get the number of records in the current record set, after filtering\n   *  @type function\n   */\n  \"fnRecordsDisplay\": function () {\n    return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;\n  },\n\n  /**\n   * Get the display end point - aiDisplay index\n   *  @type function\n   */\n  \"fnDisplayEnd\": function () {\n    var len = this._iDisplayLength,\n        start = this._iDisplayStart,\n        calc = start + len,\n        records = this.aiDisplay.length,\n        features = this.oFeatures,\n        paginate = features.bPaginate;\n\n    if (features.bServerSide) {\n      return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);\n    } else {\n      return !paginate || calc > records || len === -1 ? records : calc;\n    }\n  },\n\n  /**\n   * The DataTables object for this table\n   *  @type object\n   *  @default null\n   */\n  \"oInstance\": null,\n\n  /**\n   * Unique identifier for each instance of the DataTables object. If there\n   * is an ID on the table node, then it takes that value, otherwise an\n   * incrementing internal counter is used.\n   *  @type string\n   *  @default null\n   */\n  \"sInstance\": null,\n\n  /**\n   * tabindex attribute value that is added to DataTables control elements, allowing\n   * keyboard navigation of the table and its controls.\n   */\n  \"iTabIndex\": 0,\n\n  /**\n   * DIV container for the footer scrolling table if scrolling\n   */\n  \"nScrollHead\": null,\n\n  /**\n   * DIV container for the footer scrolling table if scrolling\n   */\n  \"nScrollFoot\": null,\n\n  /**\n   * Last applied sort\n   *  @type array\n   *  @default []\n   */\n  \"aLastSort\": [],\n\n  /**\n   * Stored plug-in instances\n   *  @type object\n   *  @default {}\n   */\n  \"oPlugins\": {},\n\n  /**\n   * Function used to get a row's id from the row's data\n   *  @type function\n   *  @default null\n   */\n  \"rowIdFn\": null,\n\n  /**\n   * Data location where to store a row's id\n   *  @type string\n   *  @default null\n   */\n  \"rowId\": null\n};\n/**\n * Extension object for DataTables that is used to provide all extension\n * options.\n *\n * Note that the `DataTable.ext` object is available through\n * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n *  @namespace\n *  @extends DataTable.models.ext\n */\n\n/**\n * DataTables extensions\n * \n * This namespace acts as a collection area for plug-ins that can be used to\n * extend DataTables capabilities. Indeed many of the build in methods\n * use this method to provide their own capabilities (sorting methods for\n * example).\n *\n * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n * reasons\n *\n *  @namespace\n */\n\nDataTable.ext = _ext = {\n  /**\n   * Buttons. For use with the Buttons extension for DataTables. This is\n   * defined here so other extensions can define buttons regardless of load\n   * order. It is _not_ used by DataTables core.\n   *\n   *  @type object\n   *  @default {}\n   */\n  buttons: {},\n\n  /**\n   * Element class names\n   *\n   *  @type object\n   *  @default {}\n   */\n  classes: {},\n\n  /**\n   * DataTables build type (expanded by the download builder)\n   *\n   *  @type string\n   */\n  builder: \"-source-\",\n\n  /**\n   * Error reporting.\n   * \n   * How should DataTables report an error. Can take the value 'alert',\n   * 'throw', 'none' or a function.\n   *\n   *  @type string|function\n   *  @default alert\n   */\n  errMode: \"alert\",\n\n  /**\n   * Feature plug-ins.\n   * \n   * This is an array of objects which describe the feature plug-ins that are\n   * available to DataTables. These feature plug-ins are then available for\n   * use through the `dom` initialisation option.\n   * \n   * Each feature plug-in is described by an object which must have the\n   * following properties:\n   * \n   * * `fnInit` - function that is used to initialise the plug-in,\n   * * `cFeature` - a character so the feature can be enabled by the `dom`\n   *   instillation option. This is case sensitive.\n   *\n   * The `fnInit` function has the following input parameters:\n   *\n   * 1. `{object}` DataTables settings object: see\n   *    {@link DataTable.models.oSettings}\n   *\n   * And the following return is expected:\n   * \n   * * {node|null} The element which contains your feature. Note that the\n   *   return may also be void if your plug-in does not require to inject any\n   *   DOM elements into DataTables control (`dom`) - for example this might\n   *   be useful when developing a plug-in which allows table control via\n   *   keyboard entry\n   *\n   *  @type array\n   *\n   *  @example\n   *    $.fn.dataTable.ext.features.push( {\n   *      \"fnInit\": function( oSettings ) {\n   *        return new TableTools( { \"oDTSettings\": oSettings } );\n   *      },\n   *      \"cFeature\": \"T\"\n   *    } );\n   */\n  feature: [],\n\n  /**\n   * Row searching.\n   * \n   * This method of searching is complimentary to the default type based\n   * searching, and a lot more comprehensive as it allows you complete control\n   * over the searching logic. Each element in this array is a function\n   * (parameters described below) that is called for every row in the table,\n   * and your logic decides if it should be included in the searching data set\n   * or not.\n   *\n   * Searching functions have the following input parameters:\n   *\n   * 1. `{object}` DataTables settings object: see\n   *    {@link DataTable.models.oSettings}\n   * 2. `{array|object}` Data for the row to be processed (same as the\n   *    original format that was passed in as the data source, or an array\n   *    from a DOM data source\n   * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n   *    can be useful to retrieve the `TR` element if you need DOM interaction.\n   *\n   * And the following return is expected:\n   *\n   * * {boolean} Include the row in the searched result set (true) or not\n   *   (false)\n   *\n   * Note that as with the main search ability in DataTables, technically this\n   * is \"filtering\", since it is subtractive. However, for consistency in\n   * naming we call it searching here.\n   *\n   *  @type array\n   *  @default []\n   *\n   *  @example\n   *    // The following example shows custom search being applied to the\n   *    // fourth column (i.e. the data[3] index) based on two input values\n   *    // from the end-user, matching the data in a certain range.\n   *    $.fn.dataTable.ext.search.push(\n   *      function( settings, data, dataIndex ) {\n   *        var min = document.getElementById('min').value * 1;\n   *        var max = document.getElementById('max').value * 1;\n   *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n   *\n   *        if ( min == \"\" && max == \"\" ) {\n   *          return true;\n   *        }\n   *        else if ( min == \"\" && version < max ) {\n   *          return true;\n   *        }\n   *        else if ( min < version && \"\" == max ) {\n   *          return true;\n   *        }\n   *        else if ( min < version && version < max ) {\n   *          return true;\n   *        }\n   *        return false;\n   *      }\n   *    );\n   */\n  search: [],\n\n  /**\n   * Selector extensions\n   *\n   * The `selector` option can be used to extend the options available for the\n   * selector modifier options (`selector-modifier` object data type) that\n   * each of the three built in selector types offer (row, column and cell +\n   * their plural counterparts). For example the Select extension uses this\n   * mechanism to provide an option to select only rows, columns and cells\n   * that have been marked as selected by the end user (`{selected: true}`),\n   * which can be used in conjunction with the existing built in selector\n   * options.\n   *\n   * Each property is an array to which functions can be pushed. The functions\n   * take three attributes:\n   *\n   * * Settings object for the host table\n   * * Options object (`selector-modifier` object type)\n   * * Array of selected item indexes\n   *\n   * The return is an array of the resulting item indexes after the custom\n   * selector has been applied.\n   *\n   *  @type object\n   */\n  selector: {\n    cell: [],\n    column: [],\n    row: []\n  },\n\n  /**\n   * Internal functions, exposed for used in plug-ins.\n   * \n   * Please note that you should not need to use the internal methods for\n   * anything other than a plug-in (and even then, try to avoid if possible).\n   * The internal function may change between releases.\n   *\n   *  @type object\n   *  @default {}\n   */\n  internal: {},\n\n  /**\n   * Legacy configuration options. Enable and disable legacy options that\n   * are available in DataTables.\n   *\n   *  @type object\n   */\n  legacy: {\n    /**\n     * Enable / disable DataTables 1.9 compatible server-side processing\n     * requests\n     *\n     *  @type boolean\n     *  @default null\n     */\n    ajax: null\n  },\n\n  /**\n   * Pagination plug-in methods.\n   * \n   * Each entry in this object is a function and defines which buttons should\n   * be shown by the pagination rendering method that is used for the table:\n   * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n   * buttons are displayed in the document, while the functions here tell it\n   * what buttons to display. This is done by returning an array of button\n   * descriptions (what each button will do).\n   *\n   * Pagination types (the four built in options and any additional plug-in\n   * options defined here) can be used through the `paginationType`\n   * initialisation parameter.\n   *\n   * The functions defined take two parameters:\n   *\n   * 1. `{int} page` The current page index\n   * 2. `{int} pages` The number of pages in the table\n   *\n   * Each function is expected to return an array where each element of the\n   * array can be one of:\n   *\n   * * `first` - Jump to first page when activated\n   * * `last` - Jump to last page when activated\n   * * `previous` - Show previous page when activated\n   * * `next` - Show next page when activated\n   * * `{int}` - Show page of the index given\n   * * `{array}` - A nested array containing the above elements to add a\n   *   containing 'DIV' element (might be useful for styling).\n   *\n   * Note that DataTables v1.9- used this object slightly differently whereby\n   * an object with two functions would be defined for each plug-in. That\n   * ability is still supported by DataTables 1.10+ to provide backwards\n   * compatibility, but this option of use is now decremented and no longer\n   * documented in DataTables 1.10+.\n   *\n   *  @type object\n   *  @default {}\n   *\n   *  @example\n   *    // Show previous, next and current page buttons only\n   *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n   *      return [ 'previous', page, 'next' ];\n   *    };\n   */\n  pager: {},\n  renderer: {\n    pageButton: {},\n    header: {}\n  },\n\n  /**\n   * Ordering plug-ins - custom data source\n   * \n   * The extension options for ordering of data available here is complimentary\n   * to the default type based ordering that DataTables typically uses. It\n   * allows much greater control over the the data that is being used to\n   * order a column, but is necessarily therefore more complex.\n   * \n   * This type of ordering is useful if you want to do ordering based on data\n   * live from the DOM (for example the contents of an 'input' element) rather\n   * than just the static string that DataTables knows of.\n   * \n   * The way these plug-ins work is that you create an array of the values you\n   * wish to be ordering for the column in question and then return that\n   * array. The data in the array much be in the index order of the rows in\n   * the table (not the currently ordering order!). Which order data gathering\n   * function is run here depends on the `dt-init columns.orderDataType`\n   * parameter that is used for the column (if any).\n   *\n   * The functions defined take two parameters:\n   *\n   * 1. `{object}` DataTables settings object: see\n   *    {@link DataTable.models.oSettings}\n   * 2. `{int}` Target column index\n   *\n   * Each function is expected to return an array:\n   *\n   * * `{array}` Data for the column to be ordering upon\n   *\n   *  @type array\n   *\n   *  @example\n   *    // Ordering using `input` node values\n   *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n   *    {\n   *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n   *        return $('input', td).val();\n   *      } );\n   *    }\n   */\n  order: {},\n\n  /**\n   * Type based plug-ins.\n   *\n   * Each column in DataTables has a type assigned to it, either by automatic\n   * detection or by direct assignment using the `type` option for the column.\n   * The type of a column will effect how it is ordering and search (plug-ins\n   * can also make use of the column type if required).\n   *\n   * @namespace\n   */\n  type: {\n    /**\n     * Type detection functions.\n     *\n     * The functions defined in this object are used to automatically detect\n     * a column's type, making initialisation of DataTables super easy, even\n     * when complex data is in the table.\n     *\n     * The functions defined take two parameters:\n     *\n        *  1. `{*}` Data from the column cell to be analysed\n        *  2. `{settings}` DataTables settings object. This can be used to\n        *     perform context specific type detection - for example detection\n        *     based on language settings such as using a comma for a decimal\n        *     place. Generally speaking the options from the settings will not\n        *     be required\n     *\n     * Each function is expected to return:\n     *\n     * * `{string|null}` Data type detected, or null if unknown (and thus\n     *   pass it on to the other type detection functions.\n     *\n     *  @type array\n     *\n     *  @example\n     *    // Currency type detection plug-in:\n     *    $.fn.dataTable.ext.type.detect.push(\n     *      function ( data, settings ) {\n     *        // Check the numeric part\n     *        if ( ! data.substring(1).match(/[0-9]/) ) {\n     *          return null;\n     *        }\n     *\n     *        // Check prefixed by currency\n     *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n     *          return 'currency';\n     *        }\n     *        return null;\n     *      }\n     *    );\n     */\n    detect: [],\n\n    /**\n     * Type based search formatting.\n     *\n     * The type based searching functions can be used to pre-format the\n     * data to be search on. For example, it can be used to strip HTML\n     * tags or to de-format telephone numbers for numeric only searching.\n     *\n     * Note that is a search is not defined for a column of a given type,\n     * no search formatting will be performed.\n     * \n     * Pre-processing of searching data plug-ins - When you assign the sType\n     * for a column (or have it automatically detected for you by DataTables\n     * or a type detection plug-in), you will typically be using this for\n     * custom sorting, but it can also be used to provide custom searching\n     * by allowing you to pre-processing the data and returning the data in\n     * the format that should be searched upon. This is done by adding\n     * functions this object with a parameter name which matches the sType\n     * for that target column. This is the corollary of <i>afnSortData</i>\n     * for searching data.\n     *\n     * The functions defined take a single parameter:\n     *\n        *  1. `{*}` Data from the column cell to be prepared for searching\n     *\n     * Each function is expected to return:\n     *\n     * * `{string|null}` Formatted string that will be used for the searching.\n     *\n     *  @type object\n     *  @default {}\n     *\n     *  @example\n     *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n     *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n     *    }\n     */\n    search: {},\n\n    /**\n     * Type based ordering.\n     *\n     * The column type tells DataTables what ordering to apply to the table\n     * when a column is sorted upon. The order for each type that is defined,\n     * is defined by the functions available in this object.\n     *\n     * Each ordering option can be described by three properties added to\n     * this object:\n     *\n     * * `{type}-pre` - Pre-formatting function\n     * * `{type}-asc` - Ascending order function\n     * * `{type}-desc` - Descending order function\n     *\n     * All three can be used together, only `{type}-pre` or only\n     * `{type}-asc` and `{type}-desc` together. It is generally recommended\n     * that only `{type}-pre` is used, as this provides the optimal\n     * implementation in terms of speed, although the others are provided\n     * for compatibility with existing Javascript sort functions.\n     *\n     * `{type}-pre`: Functions defined take a single parameter:\n     *\n        *  1. `{*}` Data from the column cell to be prepared for ordering\n     *\n     * And return:\n     *\n     * * `{*}` Data to be sorted upon\n     *\n     * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n     * functions, taking two parameters:\n     *\n        *  1. `{*}` Data to compare to the second parameter\n        *  2. `{*}` Data to compare to the first parameter\n     *\n     * And returning:\n     *\n     * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n     *   than the second parameter, ===0 if the two parameters are equal and\n     *   >0 if the first parameter should be sorted height than the second\n     *   parameter.\n     * \n     *  @type object\n     *  @default {}\n     *\n     *  @example\n     *    // Numeric ordering of formatted numbers with a pre-formatter\n     *    $.extend( $.fn.dataTable.ext.type.order, {\n     *      \"string-pre\": function(x) {\n     *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n     *        return parseFloat( a );\n     *      }\n     *    } );\n     *\n     *  @example\n     *    // Case-sensitive string ordering, with no pre-formatting method\n     *    $.extend( $.fn.dataTable.ext.order, {\n     *      \"string-case-asc\": function(x,y) {\n     *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n     *      },\n     *      \"string-case-desc\": function(x,y) {\n     *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n     *      }\n     *    } );\n     */\n    order: {}\n  },\n\n  /**\n   * Unique DataTables instance counter\n   *\n   * @type int\n   * @private\n   */\n  _unique: 0,\n  //\n  // Depreciated\n  // The following properties are retained for backwards compatibility only.\n  // The should not be used in new projects and will be removed in a future\n  // version\n  //\n\n  /**\n   * Version check function.\n   *  @type function\n   *  @depreciated Since 1.10\n   */\n  fnVersionCheck: DataTable.fnVersionCheck,\n\n  /**\n   * Index for what 'this' index API functions should use\n   *  @type int\n   *  @deprecated Since v1.10\n   */\n  iApiIndex: 0,\n\n  /**\n   * jQuery UI class container\n   *  @type object\n   *  @deprecated Since v1.10\n   */\n  oJUIClasses: {},\n\n  /**\n   * Software version\n   *  @type string\n   *  @deprecated Since v1.10\n   */\n  sVersion: DataTable.version\n}; //\n// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n//\n\n$.extend(_ext, {\n  afnFiltering: _ext.search,\n  aTypes: _ext.type.detect,\n  ofnSearch: _ext.type.search,\n  oSort: _ext.type.order,\n  afnSortData: _ext.order,\n  aoFeatures: _ext.feature,\n  oApi: _ext.internal,\n  oStdClasses: _ext.classes,\n  oPagination: _ext.pager\n});\n$.extend(DataTable.ext.classes, {\n  \"sTable\": \"dataTable\",\n  \"sNoFooter\": \"no-footer\",\n\n  /* Paging buttons */\n  \"sPageButton\": \"paginate_button\",\n  \"sPageButtonActive\": \"current\",\n  \"sPageButtonDisabled\": \"disabled\",\n\n  /* Striping classes */\n  \"sStripeOdd\": \"odd\",\n  \"sStripeEven\": \"even\",\n\n  /* Empty row */\n  \"sRowEmpty\": \"dataTables_empty\",\n\n  /* Features */\n  \"sWrapper\": \"dataTables_wrapper\",\n  \"sFilter\": \"dataTables_filter\",\n  \"sInfo\": \"dataTables_info\",\n  \"sPaging\": \"dataTables_paginate paging_\",\n\n  /* Note that the type is postfixed */\n  \"sLength\": \"dataTables_length\",\n  \"sProcessing\": \"dataTables_processing\",\n\n  /* Sorting */\n  \"sSortAsc\": \"sorting_asc\",\n  \"sSortDesc\": \"sorting_desc\",\n  \"sSortable\": \"sorting\",\n\n  /* Sortable in both directions */\n  \"sSortableAsc\": \"sorting_desc_disabled\",\n  \"sSortableDesc\": \"sorting_asc_disabled\",\n  \"sSortableNone\": \"sorting_disabled\",\n  \"sSortColumn\": \"sorting_\",\n\n  /* Note that an int is postfixed for the sorting order */\n\n  /* Filtering */\n  \"sFilterInput\": \"\",\n\n  /* Page length */\n  \"sLengthSelect\": \"\",\n\n  /* Scrolling */\n  \"sScrollWrapper\": \"dataTables_scroll\",\n  \"sScrollHead\": \"dataTables_scrollHead\",\n  \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n  \"sScrollBody\": \"dataTables_scrollBody\",\n  \"sScrollFoot\": \"dataTables_scrollFoot\",\n  \"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\n  /* Misc */\n  \"sHeaderTH\": \"\",\n  \"sFooterTH\": \"\",\n  // Deprecated\n  \"sSortJUIAsc\": \"\",\n  \"sSortJUIDesc\": \"\",\n  \"sSortJUI\": \"\",\n  \"sSortJUIAscAllowed\": \"\",\n  \"sSortJUIDescAllowed\": \"\",\n  \"sSortJUIWrapper\": \"\",\n  \"sSortIcon\": \"\",\n  \"sJUIHeader\": \"\",\n  \"sJUIFooter\": \"\"\n});\nvar extPagination = DataTable.ext.pager;\n\nfunction _numbers(page, pages) {\n  var numbers = [],\n      buttons = extPagination.numbers_length,\n      half = Math.floor(buttons / 2),\n      i = 1;\n\n  if (pages <= buttons) {\n    numbers = _range(0, pages);\n  } else if (page <= half) {\n    numbers = _range(0, buttons - 2);\n    numbers.push('ellipsis');\n    numbers.push(pages - 1);\n  } else if (page >= pages - 1 - half) {\n    numbers = _range(pages - (buttons - 2), pages);\n    numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6\n\n    numbers.splice(0, 0, 0);\n  } else {\n    numbers = _range(page - half + 2, page + half - 1);\n    numbers.push('ellipsis');\n    numbers.push(pages - 1);\n    numbers.splice(0, 0, 'ellipsis');\n    numbers.splice(0, 0, 0);\n  }\n\n  numbers.DT_el = 'span';\n  return numbers;\n}\n\n$.extend(extPagination, {\n  simple: function (page, pages) {\n    return ['previous', 'next'];\n  },\n  full: function (page, pages) {\n    return ['first', 'previous', 'next', 'last'];\n  },\n  numbers: function (page, pages) {\n    return [_numbers(page, pages)];\n  },\n  simple_numbers: function (page, pages) {\n    return ['previous', _numbers(page, pages), 'next'];\n  },\n  full_numbers: function (page, pages) {\n    return ['first', 'previous', _numbers(page, pages), 'next', 'last'];\n  },\n  first_last_numbers: function (page, pages) {\n    return ['first', _numbers(page, pages), 'last'];\n  },\n  // For testing and plug-ins to use\n  _numbers: _numbers,\n  // Number of number buttons (including ellipsis) to show. _Must be odd!_\n  numbers_length: 7\n});\n$.extend(true, DataTable.ext.renderer, {\n  pageButton: {\n    _: function (settings, host, idx, buttons, page, pages) {\n      var classes = settings.oClasses;\n      var lang = settings.oLanguage.oPaginate;\n      var aria = settings.oLanguage.oAria.paginate || {};\n      var btnDisplay, btnClass;\n\n      var attach = function (container, buttons) {\n        var i, ien, node, button;\n        var disabledClass = classes.sPageButtonDisabled;\n\n        var clickHandler = function (e) {\n          _fnPageChange(settings, e.data.action, true);\n        };\n\n        for (i = 0, ien = buttons.length; i < ien; i++) {\n          button = buttons[i];\n\n          if (Array.isArray(button)) {\n            var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);\n            attach(inner, button);\n          } else {\n            var disabled = false;\n            btnDisplay = null;\n            btnClass = button;\n\n            switch (button) {\n              case 'ellipsis':\n                container.append('<span class=\"ellipsis\">&#x2026;</span>');\n                break;\n\n              case 'first':\n                btnDisplay = lang.sFirst;\n\n                if (page === 0) {\n                  disabled = true;\n                }\n\n                break;\n\n              case 'previous':\n                btnDisplay = lang.sPrevious;\n\n                if (page === 0) {\n                  disabled = true;\n                }\n\n                break;\n\n              case 'next':\n                btnDisplay = lang.sNext;\n\n                if (pages === 0 || page === pages - 1) {\n                  disabled = true;\n                }\n\n                break;\n\n              case 'last':\n                btnDisplay = lang.sLast;\n\n                if (pages === 0 || page === pages - 1) {\n                  disabled = true;\n                }\n\n                break;\n\n              default:\n                btnDisplay = settings.fnFormatNumber(button + 1);\n                btnClass = page === button ? classes.sPageButtonActive : '';\n                break;\n            }\n\n            if (btnDisplay !== null) {\n              var tag = settings.oInit.pagingTag || 'a';\n\n              if (disabled) {\n                btnClass += ' ' + disabledClass;\n              }\n\n              node = $('<' + tag + '>', {\n                'class': classes.sPageButton + ' ' + btnClass,\n                'aria-controls': settings.sTableId,\n                'aria-disabled': disabled ? 'true' : null,\n                'aria-label': aria[button],\n                'role': 'link',\n                'aria-current': btnClass === classes.sPageButtonActive ? 'page' : null,\n                'data-dt-idx': button,\n                'tabindex': disabled ? -1 : settings.iTabIndex,\n                'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null\n              }).html(btnDisplay).appendTo(container);\n\n              _fnBindAction(node, {\n                action: button\n              }, clickHandler);\n            }\n          }\n        }\n      }; // IE9 throws an 'unknown error' if document.activeElement is used\n      // inside an iframe or frame. Try / catch the error. Not good for\n      // accessibility, but neither are frames.\n\n\n      var activeEl;\n\n      try {\n        // Because this approach is destroying and recreating the paging\n        // elements, focus is lost on the select button which is bad for\n        // accessibility. So we want to restore focus once the draw has\n        // completed\n        activeEl = $(host).find(document.activeElement).data('dt-idx');\n      } catch (e) {}\n\n      attach($(host).empty(), buttons);\n\n      if (activeEl !== undefined) {\n        $(host).find('[data-dt-idx=' + activeEl + ']').trigger('focus');\n      }\n    }\n  }\n}); // Built in type detection. See model.ext.aTypes for information about\n// what is required from this methods.\n\n$.extend(DataTable.ext.type.detect, [// Plain numbers - first since V8 detects some plain numbers as dates\n// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\nfunction (d, settings) {\n  var decimal = settings.oLanguage.sDecimal;\n  return _isNumber(d, decimal) ? 'num' + decimal : null;\n}, // Dates (only those recognised by the browser's Date.parse)\nfunction (d, settings) {\n  // V8 tries _very_ hard to make a string passed into `Date.parse()`\n  // valid, so we need to use a regex to restrict date formats. Use a\n  // plug-in for anything other than ISO8601 style strings\n  if (d && !(d instanceof Date) && !_re_date.test(d)) {\n    return null;\n  }\n\n  var parsed = Date.parse(d);\n  return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;\n}, // Formatted numbers\nfunction (d, settings) {\n  var decimal = settings.oLanguage.sDecimal;\n  return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;\n}, // HTML numeric\nfunction (d, settings) {\n  var decimal = settings.oLanguage.sDecimal;\n  return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;\n}, // HTML numeric, formatted\nfunction (d, settings) {\n  var decimal = settings.oLanguage.sDecimal;\n  return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;\n}, // HTML (this is strict checking - there must be html)\nfunction (d, settings) {\n  return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;\n}]); // Filter formatting functions. See model.ext.ofnSearch for information about\n// what is required from these methods.\n// \n// Note that additional search methods are added for the html numbers and\n// html formatted numbers by `_addNumericSort()` when we know what the decimal\n// place is\n\n$.extend(DataTable.ext.type.search, {\n  html: function (data) {\n    return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, \" \").replace(_re_html, \"\") : '';\n  },\n  string: function (data) {\n    return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, \" \") : data;\n  }\n});\n\nvar __numericReplace = function (d, decimalPlace, re1, re2) {\n  if (d !== 0 && (!d || d === '-')) {\n    return -Infinity;\n  }\n\n  var type = typeof d;\n\n  if (type === 'number' || type === 'bigint') {\n    return d;\n  } // If a decimal place other than `.` is used, it needs to be given to the\n  // function so we can detect it and replace with a `.` which is the only\n  // decimal place Javascript recognises - it is not locale aware.\n\n\n  if (decimalPlace) {\n    d = _numToDecimal(d, decimalPlace);\n  }\n\n  if (d.replace) {\n    if (re1) {\n      d = d.replace(re1, '');\n    }\n\n    if (re2) {\n      d = d.replace(re2, '');\n    }\n  }\n\n  return d * 1;\n}; // Add the numeric 'deformatting' functions for sorting and search. This is done\n// in a function to provide an easy ability for the language options to add\n// additional methods if a non-period decimal place is used.\n\n\nfunction _addNumericSort(decimalPlace) {\n  $.each({\n    // Plain numbers\n    \"num\": function (d) {\n      return __numericReplace(d, decimalPlace);\n    },\n    // Formatted numbers\n    \"num-fmt\": function (d) {\n      return __numericReplace(d, decimalPlace, _re_formatted_numeric);\n    },\n    // HTML numeric\n    \"html-num\": function (d) {\n      return __numericReplace(d, decimalPlace, _re_html);\n    },\n    // HTML numeric, formatted\n    \"html-num-fmt\": function (d) {\n      return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);\n    }\n  }, function (key, fn) {\n    // Add the ordering method\n    _ext.type.order[key + decimalPlace + '-pre'] = fn; // For HTML types add a search formatter that will strip the HTML\n\n    if (key.match(/^html\\-/)) {\n      _ext.type.search[key + decimalPlace] = _ext.type.search.html;\n    }\n  });\n} // Default sort methods\n\n\n$.extend(_ext.type.order, {\n  // Dates\n  \"date-pre\": function (d) {\n    var ts = Date.parse(d);\n    return isNaN(ts) ? -Infinity : ts;\n  },\n  // html\n  \"html-pre\": function (a) {\n    return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, \"\").toLowerCase() : a + '';\n  },\n  // string\n  \"string-pre\": function (a) {\n    // This is a little complex, but faster than always calling toString,\n    // https://jsperf.com/tostring-v-check\n    return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();\n  },\n  // string-asc and -desc are retained only for compatibility with the old\n  // sort methods\n  \"string-asc\": function (x, y) {\n    return x < y ? -1 : x > y ? 1 : 0;\n  },\n  \"string-desc\": function (x, y) {\n    return x < y ? 1 : x > y ? -1 : 0;\n  }\n}); // Numeric sorting types - order doesn't matter here\n\n_addNumericSort('');\n\n$.extend(true, DataTable.ext.renderer, {\n  header: {\n    _: function (settings, cell, column, classes) {\n      // No additional mark-up required\n      // Attach a sort listener to update on sort - note that using the\n      // `DT` namespace will allow the event to be removed automatically\n      // on destroy, while the `dt` namespaced event is the one we are\n      // listening for\n      $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {\n        if (settings !== ctx) {\n          // need to check this this is the host\n          return; // table, not a nested one\n        }\n\n        var colIdx = column.idx;\n        cell.removeClass(classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);\n      });\n    },\n    jqueryui: function (settings, cell, column, classes) {\n      $('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell); // Attach a sort listener to update on sort\n\n      $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {\n        if (settings !== ctx) {\n          return;\n        }\n\n        var colIdx = column.idx;\n        cell.removeClass(classes.sSortAsc + \" \" + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);\n        cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + \" \" + classes.sSortJUIDesc + \" \" + classes.sSortJUI + \" \" + classes.sSortJUIAscAllowed + \" \" + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);\n      });\n    }\n  }\n});\n/*\n * Public helper functions. These aren't used internally by DataTables, or\n * called by any of the options passed into DataTables, but they can be used\n * externally by developers working with DataTables. They are helper functions\n * to make working with DataTables a little bit easier.\n */\n\nvar __htmlEscapeEntities = function (d) {\n  if (Array.isArray(d)) {\n    d = d.join(',');\n  }\n\n  return typeof d === 'string' ? d.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') : d;\n}; // Common logic for moment, luxon or a date action\n\n\nfunction __mld(dt, momentFn, luxonFn, dateFn, arg1) {\n  if (window.moment) {\n    return dt[momentFn](arg1);\n  } else if (window.luxon) {\n    return dt[luxonFn](arg1);\n  }\n\n  return dateFn ? dt[dateFn](arg1) : dt;\n}\n\nvar __mlWarning = false;\n\nfunction __mldObj(d, format, locale) {\n  var dt;\n\n  if (window.moment) {\n    dt = window.moment.utc(d, format, locale, true);\n\n    if (!dt.isValid()) {\n      return null;\n    }\n  } else if (window.luxon) {\n    dt = format && typeof d === 'string' ? window.luxon.DateTime.fromFormat(d, format) : window.luxon.DateTime.fromISO(d);\n\n    if (!dt.isValid) {\n      return null;\n    }\n\n    dt.setLocale(locale);\n  } else if (!format) {\n    // No format given, must be ISO\n    dt = new Date(d);\n  } else {\n    if (!__mlWarning) {\n      alert('DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17');\n    }\n\n    __mlWarning = true;\n  }\n\n  return dt;\n} // Wrapper for date, datetime and time which all operate the same way with the exception of\n// the output string for auto locale support\n\n\nfunction __mlHelper(localeString) {\n  return function (from, to, locale, def) {\n    // Luxon and Moment support\n    // Argument shifting\n    if (arguments.length === 0) {\n      locale = 'en';\n      to = null; // means toLocaleString\n\n      from = null; // means iso8601\n    } else if (arguments.length === 1) {\n      locale = 'en';\n      to = from;\n      from = null;\n    } else if (arguments.length === 2) {\n      locale = to;\n      to = from;\n      from = null;\n    }\n\n    var typeName = 'datetime-' + to; // Add type detection and sorting specific to this date format - we need to be able to identify\n    // date type columns as such, rather than as numbers in extensions. Hence the need for this.\n\n    if (!DataTable.ext.type.order[typeName]) {\n      // The renderer will give the value to type detect as the type!\n      DataTable.ext.type.detect.unshift(function (d) {\n        return d === typeName ? typeName : false;\n      }); // The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a\n      // `valueOf` which gives milliseconds epoch\n\n      DataTable.ext.type.order[typeName + '-asc'] = function (a, b) {\n        var x = a.valueOf();\n        var y = b.valueOf();\n        return x === y ? 0 : x < y ? -1 : 1;\n      };\n\n      DataTable.ext.type.order[typeName + '-desc'] = function (a, b) {\n        var x = a.valueOf();\n        var y = b.valueOf();\n        return x === y ? 0 : x > y ? -1 : 1;\n      };\n    }\n\n    return function (d, type) {\n      // Allow for a default value\n      if (d === null || d === undefined) {\n        if (def === '--now') {\n          // We treat everything as UTC further down, so no changes are\n          // made, as such need to get the local date / time as if it were\n          // UTC\n          var local = new Date();\n          d = new Date(Date.UTC(local.getFullYear(), local.getMonth(), local.getDate(), local.getHours(), local.getMinutes(), local.getSeconds()));\n        } else {\n          d = '';\n        }\n      }\n\n      if (type === 'type') {\n        // Typing uses the type name for fast matching\n        return typeName;\n      }\n\n      if (d === '') {\n        return type !== 'sort' ? '' : __mldObj('0000-01-01 00:00:00', null, locale);\n      } // Shortcut. If `from` and `to` are the same, we are using the renderer to\n      // format for ordering, not display - its already in the display format.\n\n\n      if (to !== null && from === to && type !== 'sort' && type !== 'type' && !(d instanceof Date)) {\n        return d;\n      }\n\n      var dt = __mldObj(d, from, locale);\n\n      if (dt === null) {\n        return d;\n      }\n\n      if (type === 'sort') {\n        return dt;\n      }\n\n      var formatted = to === null ? __mld(dt, 'toDate', 'toJSDate', '')[localeString]() : __mld(dt, 'format', 'toFormat', 'toISOString', to); // XSS protection\n\n      return type === 'display' ? __htmlEscapeEntities(formatted) : formatted;\n    };\n  };\n} // Based on locale, determine standard number formatting\n// Fallback for legacy browsers is US English\n\n\nvar __thousands = ',';\nvar __decimal = '.';\n\nif (window.Intl !== undefined) {\n  try {\n    var num = new Intl.NumberFormat().formatToParts(100000.1);\n\n    for (var i = 0; i < num.length; i++) {\n      if (num[i].type === 'group') {\n        __thousands = num[i].value;\n      } else if (num[i].type === 'decimal') {\n        __decimal = num[i].value;\n      }\n    }\n  } catch (e) {// noop\n  }\n} // Formatted date time detection - use by declaring the formats you are going to use\n\n\nDataTable.datetime = function (format, locale) {\n  var typeName = 'datetime-detect-' + format;\n\n  if (!locale) {\n    locale = 'en';\n  }\n\n  if (!DataTable.ext.type.order[typeName]) {\n    DataTable.ext.type.detect.unshift(function (d) {\n      var dt = __mldObj(d, format, locale);\n\n      return d === '' || dt ? typeName : false;\n    });\n\n    DataTable.ext.type.order[typeName + '-pre'] = function (d) {\n      return __mldObj(d, format, locale) || 0;\n    };\n  }\n};\n/**\n * Helpers for `columns.render`.\n *\n * The options defined here can be used with the `columns.render` initialisation\n * option to provide a display renderer. The following functions are defined:\n *\n * * `number` - Will format numeric data (defined by `columns.data`) for\n *   display, retaining the original unformatted data for sorting and filtering.\n *   It takes 5 parameters:\n *   * `string` - Thousands grouping separator\n *   * `string` - Decimal point indicator\n *   * `integer` - Number of decimal points to show\n *   * `string` (optional) - Prefix.\n *   * `string` (optional) - Postfix (/suffix).\n * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n *   parameters.\n *\n * @example\n *   // Column definition using the number renderer\n *   {\n *     data: \"salary\",\n *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n *   }\n *\n * @namespace\n */\n\n\nDataTable.render = {\n  date: __mlHelper('toLocaleDateString'),\n  datetime: __mlHelper('toLocaleString'),\n  time: __mlHelper('toLocaleTimeString'),\n  number: function (thousands, decimal, precision, prefix, postfix) {\n    // Auto locale detection\n    if (thousands === null || thousands === undefined) {\n      thousands = __thousands;\n    }\n\n    if (decimal === null || decimal === undefined) {\n      decimal = __decimal;\n    }\n\n    return {\n      display: function (d) {\n        if (typeof d !== 'number' && typeof d !== 'string') {\n          return d;\n        }\n\n        if (d === '' || d === null) {\n          return d;\n        }\n\n        var negative = d < 0 ? '-' : '';\n        var flo = parseFloat(d); // If NaN then there isn't much formatting that we can do - just\n        // return immediately, escaping any HTML (this was supposed to\n        // be a number after all)\n\n        if (isNaN(flo)) {\n          return __htmlEscapeEntities(d);\n        }\n\n        flo = flo.toFixed(precision);\n        d = Math.abs(flo);\n        var intPart = parseInt(d, 10);\n        var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : ''; // If zero, then can't have a negative prefix\n\n        if (intPart === 0 && parseFloat(floatPart) === 0) {\n          negative = '';\n        }\n\n        return negative + (prefix || '') + intPart.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands) + floatPart + (postfix || '');\n      }\n    };\n  },\n  text: function () {\n    return {\n      display: __htmlEscapeEntities,\n      filter: __htmlEscapeEntities\n    };\n  }\n};\n/*\n * This is really a good bit rubbish this method of exposing the internal methods\n * publicly... - To be fixed in 2.0 using methods on the prototype\n */\n\n/**\n * Create a wrapper function for exporting an internal functions to an external API.\n *  @param {string} fn API function name\n *  @returns {function} wrapped function\n *  @memberof DataTable#internal\n */\n\nfunction _fnExternApiFunc(fn) {\n  return function () {\n    var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));\n    return DataTable.ext.internal[fn].apply(this, args);\n  };\n}\n/**\n * Reference to internal functions for use by plug-in developers. Note that\n * these methods are references to internal functions and are considered to be\n * private. If you use these methods, be aware that they are liable to change\n * between versions.\n *  @namespace\n */\n\n\n$.extend(DataTable.ext.internal, {\n  _fnExternApiFunc: _fnExternApiFunc,\n  _fnBuildAjax: _fnBuildAjax,\n  _fnAjaxUpdate: _fnAjaxUpdate,\n  _fnAjaxParameters: _fnAjaxParameters,\n  _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n  _fnAjaxDataSrc: _fnAjaxDataSrc,\n  _fnAddColumn: _fnAddColumn,\n  _fnColumnOptions: _fnColumnOptions,\n  _fnAdjustColumnSizing: _fnAdjustColumnSizing,\n  _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n  _fnColumnIndexToVisible: _fnColumnIndexToVisible,\n  _fnVisbleColumns: _fnVisbleColumns,\n  _fnGetColumns: _fnGetColumns,\n  _fnColumnTypes: _fnColumnTypes,\n  _fnApplyColumnDefs: _fnApplyColumnDefs,\n  _fnHungarianMap: _fnHungarianMap,\n  _fnCamelToHungarian: _fnCamelToHungarian,\n  _fnLanguageCompat: _fnLanguageCompat,\n  _fnBrowserDetect: _fnBrowserDetect,\n  _fnAddData: _fnAddData,\n  _fnAddTr: _fnAddTr,\n  _fnNodeToDataIndex: _fnNodeToDataIndex,\n  _fnNodeToColumnIndex: _fnNodeToColumnIndex,\n  _fnGetCellData: _fnGetCellData,\n  _fnSetCellData: _fnSetCellData,\n  _fnSplitObjNotation: _fnSplitObjNotation,\n  _fnGetObjectDataFn: _fnGetObjectDataFn,\n  _fnSetObjectDataFn: _fnSetObjectDataFn,\n  _fnGetDataMaster: _fnGetDataMaster,\n  _fnClearTable: _fnClearTable,\n  _fnDeleteIndex: _fnDeleteIndex,\n  _fnInvalidate: _fnInvalidate,\n  _fnGetRowElements: _fnGetRowElements,\n  _fnCreateTr: _fnCreateTr,\n  _fnBuildHead: _fnBuildHead,\n  _fnDrawHead: _fnDrawHead,\n  _fnDraw: _fnDraw,\n  _fnReDraw: _fnReDraw,\n  _fnAddOptionsHtml: _fnAddOptionsHtml,\n  _fnDetectHeader: _fnDetectHeader,\n  _fnGetUniqueThs: _fnGetUniqueThs,\n  _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n  _fnFilterComplete: _fnFilterComplete,\n  _fnFilterCustom: _fnFilterCustom,\n  _fnFilterColumn: _fnFilterColumn,\n  _fnFilter: _fnFilter,\n  _fnFilterCreateSearch: _fnFilterCreateSearch,\n  _fnEscapeRegex: _fnEscapeRegex,\n  _fnFilterData: _fnFilterData,\n  _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n  _fnUpdateInfo: _fnUpdateInfo,\n  _fnInfoMacros: _fnInfoMacros,\n  _fnInitialise: _fnInitialise,\n  _fnInitComplete: _fnInitComplete,\n  _fnLengthChange: _fnLengthChange,\n  _fnFeatureHtmlLength: _fnFeatureHtmlLength,\n  _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n  _fnPageChange: _fnPageChange,\n  _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n  _fnProcessingDisplay: _fnProcessingDisplay,\n  _fnFeatureHtmlTable: _fnFeatureHtmlTable,\n  _fnScrollDraw: _fnScrollDraw,\n  _fnApplyToChildren: _fnApplyToChildren,\n  _fnCalculateColumnWidths: _fnCalculateColumnWidths,\n  _fnThrottle: _fnThrottle,\n  _fnConvertToWidth: _fnConvertToWidth,\n  _fnGetWidestNode: _fnGetWidestNode,\n  _fnGetMaxLenString: _fnGetMaxLenString,\n  _fnStringToCss: _fnStringToCss,\n  _fnSortFlatten: _fnSortFlatten,\n  _fnSort: _fnSort,\n  _fnSortAria: _fnSortAria,\n  _fnSortListener: _fnSortListener,\n  _fnSortAttachListener: _fnSortAttachListener,\n  _fnSortingClasses: _fnSortingClasses,\n  _fnSortData: _fnSortData,\n  _fnSaveState: _fnSaveState,\n  _fnLoadState: _fnLoadState,\n  _fnImplementState: _fnImplementState,\n  _fnSettingsFromNode: _fnSettingsFromNode,\n  _fnLog: _fnLog,\n  _fnMap: _fnMap,\n  _fnBindAction: _fnBindAction,\n  _fnCallbackReg: _fnCallbackReg,\n  _fnCallbackFire: _fnCallbackFire,\n  _fnLengthOverflow: _fnLengthOverflow,\n  _fnRenderer: _fnRenderer,\n  _fnDataSource: _fnDataSource,\n  _fnRowAttributes: _fnRowAttributes,\n  _fnExtend: _fnExtend,\n  _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n  // in 1.10, so this dead-end function is\n  // added to prevent errors\n\n}); // jQuery access\n\n$.fn.dataTable = DataTable; // Provide access to the host jQuery object (circular reference)\n\nDataTable.$ = $; // Legacy aliases\n\n$.fn.dataTableSettings = DataTable.settings;\n$.fn.dataTableExt = DataTable.ext; // With a capital `D` we return a DataTables API instance rather than a\n// jQuery object\n\n$.fn.DataTable = function (opts) {\n  return $(this).dataTable(opts).api();\n}; // All properties that are available to $.fn.dataTable should also be\n// available on $.fn.DataTable\n\n\n$.each(DataTable, function (prop, val) {\n  $.fn.DataTable[prop] = val;\n});\nexport default DataTable;","map":{"version":3,"sources":["/home/mohamedhabaieb/IsammSpring/Project_Software_Chasers/GestionDeTachesFront/node_modules/datatables.net/js/jquery.dataTables.mjs"],"names":["jQuery","$","DataTable","selector","options","factory","sSelector","oOpts","api","_","rows","data","traditional","_Api","_fnSettingsFromNode","_ext","iApiIndex","fnAddData","redraw","Array","isArray","isPlainObject","add","row","undefined","draw","flatten","toArray","fnAdjustColumnSizing","bRedraw","columns","adjust","settings","scroll","oScroll","sX","sY","_fnScrollDraw","fnClearTable","clear","fnClose","nTr","child","hide","fnDeleteRow","target","callback","aoData","remove","call","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","iColumn","bRegex","bSmart","bShowGlobal","bCaseInsensitive","search","column","fnGetData","src","col","type","nodeName","toLowerCase","cell","fnGetNodes","iRow","node","nodes","fnGetPosition","toUpperCase","index","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","sClass","show","fnPageChange","mAction","page","fnSetColumnVis","iCol","bShow","visible","fnSettings","fnSort","aaSort","order","fnSortListener","nNode","fnCallback","listener","fnUpdate","mData","mRow","bAction","fnVersionCheck","_that","emptyInit","len","length","oApi","internal","fn","ext","_fnExternApiFunc","each","o","oInit","_fnExtend","i","iLen","j","jLen","k","kLen","sId","getAttribute","bInitHandedOff","defaults","$this","_fnLog","_fnCompatOpts","_fnCompatCols","_fnCamelToHungarian","extend","allSettings","s","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","sTableId","id","splice","_unique","oSettings","models","style","width","push","dataTable","_fnLanguageCompat","oLanguage","aLengthMenu","iDisplayLength","_fnMap","oFeatures","_fnCallbackReg","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","classes","addClass","sTable","iInitDisplayStart","iDisplayStart","_iDisplayStart","iDeferLoading","bDeferLoading","tmp","_iRecordsDisplay","_iRecordsTotal","sUrl","ajax","dataType","url","success","json","_fnCallbackFire","_fnInitialise","error","asStripeClasses","sStripeOdd","sStripeEven","stripeClasses","rowOne","children","find","eq","inArray","map","el","hasClass","removeClass","join","asDestroyStripes","slice","anThs","aoColumnsInit","nThead","getElementsByTagName","_fnDetectHeader","aoHeader","_fnGetUniqueThs","aoColumns","_fnAddColumn","_fnApplyColumnDefs","aoColumnDefs","oDef","_fnColumnOptions","a","name","sort","filter","_isArrayHost","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSort","bSorted","aSort","_fnSortFlatten","sortedColumns","val","dir","_fnSortAria","_fnDataSource","bDeferRender","captions","_captionSide","css","thead","appendTo","tbody","insertAfter","nTBody","tfoot","sNoFooter","aoFooter","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","bInitialised","_fnSaveState","bStateSave","_fnLoadState","_api_register","_api_registerPlural","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","RegExp","_re_formatted_numeric","_empty","d","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","replace","_isNumber","formatted","strType","parseFloat","_isHtml","_htmlNumeric","html","_stripHtml","_pluck","prop","prop2","out","ien","_pluck_order","_range","start","end","_removeEmpty","_areAllUnique","sorted","last","again","_flatten","_includes","indexOf","arg","Object","prototype","toString","includes","String","trim","util","throttle","freq","frequency","timer","that","now","Date","args","arguments","clearTimeout","setTimeout","apply","escapeRegex","set","source","meta","setData","_fnSplitObjNotation","b","aLast","arrayNotation","funcNotation","innerSrc","Error","match","__reArray","__reFn","get","key","t","fetchData","substring","_fnHungarianMap","hungarian","newKey","_hungarianMap","user","force","hungarianKey","charAt","lang","defaultDecimal","sDecimal","_addNumericSort","zeroRecords","sZeroRecords","sEmptyTable","sLoadingRecords","sInfoThousands","sThousands","decimal","_fnCompatMap","knew","old","init","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","dataSort","aDataSort","__browser","browser","n","position","top","left","window","scrollLeft","height","overflow","append","outer","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","Math","round","offset","bBounding","getBoundingClientRect","oBrowser","iBarWidth","_fnReduce","inc","value","isSet","hasOwnProperty","nTh","oDefaults","oCol","oColumn","document","createElement","sTitle","innerHTML","idx","aoPreSearchCols","oOptions","th","sWidthOrig","attr","mDataProp","sType","_sManualType","className","origClass","iDataSort","ariaTitle","mDataSrc","mRender","attrTest","_bAttrSrc","_setter","rowData","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSortable","sSortableNone","bAsc","bDesc","sSortingClass","sSortingClassJUI","sSortableAsc","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","bVisible","sParam","_fnColumnTypes","types","detect","jen","ken","detectedType","cache","_fnGetCellData","aoColDefs","aoCols","def","aTargets","targets","aDataIn","anTds","oData","oRow","_aData","nTd","sThisType","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","_fnNodeToDataIndex","_DT_RowIndex","_fnNodeToColumnIndex","anCells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","fomatters","_fnSetCellData","str","_fnGetDataMaster","_fnClearTable","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","childNodes","removeChild","firstChild","_aSortData","_aFilterData","cols","_fnRowAttributes","tds","td","contents","objectRead","setter","cellProcess","nextSibling","rowNode","nTrIn","create","sCellType","_DT_CellIndex","appendChild","fnCreatedCell","tr","DT_RowClass","split","__rowc","concat","DT_RowAttr","DT_RowData","_fnBuildHead","createHeader","iTabIndex","_fnSortAttachListener","_fnRenderer","sHeaderTH","sFooterTH","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","aoLocal","aApplied","iColumns","iRowspan","iColspan","_fnDraw","ajaxComplete","_fnStart","aPreDraw","_fnProcessingDisplay","anRows","iRowCount","iStripes","oLang","bServerSide","iDisplayEnd","fnDisplayEnd","bDrawing","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","sRowEmpty","body","detach","bFiltered","_fnReDraw","holdPosition","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","table","holding","insertBefore","insert","sWrapper","nHolding","nTableWrapper","nTableReinsertBefore","aDom","sDom","featureNode","cOption","nNewNode","cNext","sAttr","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nTrs","nCell","l","iColShifted","bUnique","fnShiftCol","nHeader","aReturn","unique","bSortCellsTop","fnRecordsDisplay","_fnBuildAjax","rbracket","ajaxData","instance","status","jqXHR","_fnAjaxDataSrc","sError","newData","baseAjax","sServerMethod","xhr","thrown","ret","readyState","oAjaxData","fnServerData","sAjaxSource","drawHold","_fnAjaxParameters","_fnAjaxUpdateDraw","columnCount","preSearch","preColSearch","dataProp","columnSearch","displayStart","displayLength","_iDisplayLength","param","sSearch","regex","sName","searchable","bSearchable","orderable","legacy","compat","modern","recordsTotal","recordsFiltered","_bInitComplete","_fnInitComplete","write","dataSrc","sAjaxDataProp","tableId","language","previousSearch","input","sFilterInput","f","sFilter","searchFn","event","searchDelay","jqFilter","sSearchPlaceholder","on","_fnThrottle","e","keyCode","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","merge","searchStr","smart","caseInsensitive","display","rpSearch","_fnFilterCreateSearch","test","prevSearch","displayMaster","invalidated","filtered","_fnFilterData","_sFilterRow","word","m","__filter_div","__filter_div_textContent","textContent","filterData","wasInvalidated","innerText","_fnSearchToCamel","obj","_fnSearchToHung","tid","sInfo","aoDrawCallback","_fnUpdateInfo","max","total","sInfoEmpty","sInfoFiltered","sInfoPostFix","_fnInfoMacros","fnInfoCallback","formatter","fnFormatNumber","all","ceil","iAjaxStart","deferLoading","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","d2","lengths","select","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","sPaging","p","visRecords","pages","buttons","_fnPageChange","action","records","floor","changed","r","sProcessing","scrollY","caption","captionSide","headerClone","cloneNode","footerClone","footer","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooter","divFooterInner","divFooterTable","header","tableEl","tableStyle","ie67","dtHeaderCells","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","headerWidths","footerWidths","headerContent","footerContent","correction","sanityWidth","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","clone","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","getComputedStyle","nToSize","iOuterWidth","bScrolling","padding","trigger","scrollTop","an1","an2","nNode1","nNode2","nodeType","__re_html_remove","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","columnIdx","styleWidth","sizes","_fnConvertToWidth","tmpTable","margin","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","sInstance","widths","els","results","_fnGetMaxLenString","maxIdx","aiOrig","srcCol","fixed","aaSortingFixed","fixedObj","nestedSort","pre","post","_idx","sDataType","oExtSort","oSort","formatters","sortCol","_fnSortData","x","y","dataA","dataB","label","nextSort","oAria","removeAttribute","setAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customSort","sSortDataType","customData","_bLoadingState","state","time","oSavedState","fnStateSaveCallback","loaded","_fnImplementState","fnStateLoadCallback","Api","abStateLoad","duration","iStateDuration","oLoadedState","level","msg","tn","sErrMode","errMode","alert","console","log","mappedName","extender","breakRefs","which","preventDefault","sStore","callbackArr","eventName","reverse","Event","parents","result","renderer","host","__apiStruct","__arrayProto","_toSettings","mixed","jq","tables","context","ctxSettings","opts","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","unshift","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","heir","method","registerPlural","pluralName","singularName","__table_selector","paging","info","__reload","one","abort","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","displayFilteredMap","__row_selector","run","sel","selInt","cellIdx","closest","rowObj","hash","thatIdx","loopRow","loopCells","newRows","modRows","namespace","stateSaveParamsEvent","destroyEvent","idFn","ids","_detailsShow","childRows","off","every","__details_add","klass","addRow","created","colSpan","_details","__details_state","__details_remove","__details_display","__details_events","drawEvent","colvisEvent","_emp","_child_obj","_child_mth","__re_column_selector","__columnData","r1","r2","__column_selector","names","visColumns","jqResult","__setColumnVis","calc","__cell_selector","allCells","fnSelector","rowSelector","columnSelector","internalOpts","cellsNoOpts","selected","caseInsen","use","module","DateTime","root","is","jquery","versionCheck","version","aThis","aThat","iThis","iThat","isDataTable","fnIsDataTable","head","foot","fnTables","camelToHungarian","jqRows","jqTable","jqTbody","jqWrapper","orig","removedMethod","sDestroyWidth","arg1","arg2","arg3","arg4","token","plural","resolved","toFormat","JSON","parse","sessionStorage","localStorage","getItem","location","pathname","setItem","stringify","paginate","min","builder","pageButton","oJUIClasses","sVersion","afnFiltering","aTypes","ofnSearch","afnSortData","oStdClasses","oPagination","extPagination","_numbers","numbers","numbers_length","half","DT_el","simple","full","simple_numbers","full_numbers","first_last_numbers","oPaginate","aria","btnDisplay","btnClass","attach","container","button","disabledClass","sPageButtonDisabled","clickHandler","disabled","sFirst","sPrevious","sNext","sLast","sPageButtonActive","tag","pagingTag","sPageButton","activeEl","empty","parsed","string","__numericReplace","decimalPlace","re1","re2","Infinity","ts","sSortAsc","sSortDesc","jqueryui","sSortJUIWrapper","sSortIcon","sSortJUIAsc","sSortJUIDesc","__htmlEscapeEntities","__mld","dt","momentFn","luxonFn","dateFn","moment","luxon","__mlWarning","__mldObj","format","locale","utc","isValid","fromFormat","fromISO","setLocale","__mlHelper","localeString","from","to","typeName","valueOf","local","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","__thousands","__decimal","Intl","NumberFormat","formatToParts","datetime","render","date","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","text","_fnCalculateEnd","dataTableSettings","dataTableExt"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,QAAnB,C,CAEA;AACA;;AACA,IAAIC,CAAC,GAAGD,MAAR;;AAGA,IAAIE,SAAS,GAAG,UAAWC,QAAX,EAAqBC,OAArB,EAChB;AACC;AACA;AACA,MAAIF,SAAS,CAACG,OAAV,CAAkBF,QAAlB,EAA4BC,OAA5B,CAAJ,EAA0C;AACzC,WAAOF,SAAP;AACA,GALF,CAOC;;;AACA,MAAI,gBAAgBA,SAApB,EAA+B;AAC9B,WAAOD,CAAC,CAACE,QAAD,CAAD,CAAYD,SAAZ,CAAsBE,OAAtB,CAAP;AACA,GAFD,MAGK;AACJ;AACAA,IAAAA,OAAO,GAAGD,QAAV;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,OAAKF,CAAL,GAAS,UAAWK,SAAX,EAAsBC,KAAtB,EACT;AACC,WAAO,KAAKC,GAAL,CAAS,IAAT,EAAeP,CAAf,CAAkBK,SAAlB,EAA6BC,KAA7B,CAAP;AACA,GAHD;AAMA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,OAAKE,CAAL,GAAS,UAAWH,SAAX,EAAsBC,KAAtB,EACT;AACC,WAAO,KAAKC,GAAL,CAAS,IAAT,EAAeE,IAAf,CAAqBJ,SAArB,EAAgCC,KAAhC,EAAwCI,IAAxC,EAAP;AACA,GAHD;AAMA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,OAAKH,GAAL,GAAW,UAAWI,WAAX,EACX;AACC,WAAOA,WAAW,GACjB,IAA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A;AACA;AACA;AACA;AACA;AACA;AACA;;AACAnkC,SAAS,CAAC8B,QAAV,GAAqB,EAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA9B,SAAS,CAACiJ,MAAV,GAAmB,EAAnB;AAIA;AACA;AACA;AACA;AACA;;AACAjJ,SAAS,CAACiJ,MAAV,CAAiBuO,OAAjB,GAA2B;AAC1B;AACD;AACA;AACA;AACA;AACC,sBAAoB,IANM;;AAQ1B;AACD;AACA;AACA;AACA;AACC,aAAW,EAbe;;AAe1B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,YAAU,KAtBgB;;AAwB1B;AACD;AACA;AACA;AACA;AACC,YAAU,IA7BgB;;AA+B1B;AACD;AACA;AACA;AACA;AACA;AACC,YAAU;AArCgB,CAA3B;AA2CA;AACA;AACA;AACA;AACA;AACA;;AACAxX,SAAS,CAACiJ,MAAV,CAAiBiV,IAAjB,GAAwB;AACvB;AACD;AACA;AACA;AACA;AACC,SAAO,IANgB;;AAQvB;AACD;AACA;AACA;AACA;AACA;AACC,aAAW,IAdY;;AAgBvB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,YAAU,EAzBa;;AA2BvB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,gBAAc,IAvCS;;AAyCvB;AACD;AACA;AACA;AACA;AACA;AACA;AACC,kBAAgB,IAhDO;;AAkDvB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,IA3DQ;;AA6DvB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,EArEQ;;AAuEvB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,SAAO,IAhFgB;;AAkFvB;AACD;AACA;AACA;AACA;AACA;AACA;AACC,SAAO,CAAC;AAzFe,CAAxB;AA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAle,SAAS,CAACiJ,MAAV,CAAiB2Q,OAAjB,GAA2B;AAC1B;AACD;AACA;AACA;AACA;AACA;AACC,SAAO,IAPmB;;AAS1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IAlBa;;AAoB1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IA5Ba;;AA8B1B;AACD;AACA;AACA;AACA;AACC,iBAAe,IAnCW;;AAqC1B;AACD;AACA;AACA;AACC,eAAa,IAzCa;;AA2C1B;AACD;AACA;AACA;AACC,cAAY,IA/Cc;;AAiD1B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,kBAAgB,IAxDU;;AA0D1B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,KAjEa;;AAmE1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IA/ES;;AAiF1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IA/Fa;;AAiG1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IA5Ga;;AA8G1B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,WAAS,IArHiB;;AAuH1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,aAAW,IA/He;;AAiI1B;AACD;AACA;AACA;AACA;AACA;AACC,SAAO,IAvImB;;AAyI1B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,SAAO,IAhJmB;;AAkJ1B;AACD;AACA;AACA;AACA;AACC,YAAU,IAvJgB;;AAyJ1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,IApKO;;AAsK1B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,IA7KO;;AA+K1B;AACD;AACA;AACA;AACA;AACC,WAAS,IApLiB;;AAsL1B;AACD;AACA;AACA;AACA;AACA;AACC,mBAAiB,KA5LS;;AA8L1B;AACD;AACA;AACA;AACA;AACC,mBAAiB,IAnMS;;AAqM1B;AACD;AACA;AACA;AACA;AACA;AACC,sBAAoB,IA3MM;;AA6M1B;AACD;AACA;AACA;AACC,YAAU,IAjNgB;;AAmN1B;AACD;AACA;AACA;AACA;AACC,WAAS,IAxNiB;;AA0N1B;AACD;AACA;AACA;AACA;AACC,YAAU,IA/NgB;;AAiO1B;AACD;AACA;AACA;AACA;AACC,gBAAc;AAtOY,CAA3B;AA0OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA5Z,SAAS,CAAC4H,QAAV,GAAqB;AACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,YAAU,IA5DU;;AA+DpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,CAAC,CAAC,CAAD,EAAG,KAAH,CAAD,CA1FO;;AA6FpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,EAjHE;;AAoHpiRpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,CAAE,EAAF,EAAM,EAAN,EAAU,EAAV,EAAc,GAAd,CAxSK;;AA2SpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IAvTO;;AAyTpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,kBAAgB,IA5UI;;AA+UpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,kBAAgB,EAvWI;;AA0WpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,IA5XC;;AA+XpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,gBAAc,IAhZM;;AAmZpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,kBAAgB,KAvaI;;AA0apB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,cAAY,KAncQ;;AAscpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,aAAW,IA3dS;;AA8dpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,WAAS,IA/eW;;AAkfpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IAlgBG;;AAqgBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IAphBO;;AAuhBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,KAziBK;;AA4iBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,KA/kBO;;AAklBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,KAvmBC;;AA0mBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,KA7nBK;;AAgoBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,WAAS,IAhpBW;;AAmpBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,gBAAc,IApqBM;;AAuqBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,KAxrBG;;AA2rBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,kBAAgB,IA9sBI;;AAitBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,gBAAc,KAvuBM;;AA0uBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,kBAAgB,IAnwBI;;AAswBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,IAxxBE;;AA2xBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,sBAAoB,IApzBA;;AAuzBpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,UAAWg+B,QAAX,EAAsB;AACvC,WAAOA,QAAQ,CAACpyB,QAAT,GAAoB7B,OAApB,CACN,uBADM,EAEN,KAAKpI,SAAL,CAAeuN,UAFT,CAAP;AAIA,GAv1BmB;;AA01BpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,sBAAoB,IAp3BA;;AAu3BpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,IAl5BE;;AAq5BpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,IA36BE;;AA86BpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,uBAAqB,IAr8BD;;AAw8BpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IAl+BG;;AAq+BpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,kBAAgB,IA5/BI;;AA+/BpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,IAvhCE;;AA0hCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,yBAAuB,UAAWhV,QAAX,EAAsB;AAC5C,QAAI;AACH,aAAO+jC,IAAI,CAACC,KAAL,CACN,CAAChkC,QAAQ,CAACq5B,cAAT,KAA4B,CAAC,CAA7B,GAAiC4K,cAAjC,GAAkDC,YAAnD,EAAiEC,OAAjE,CACC,gBAAcnkC,QAAQ,CAAC01B,SAAvB,GAAiC,GAAjC,GAAqC0O,QAAQ,CAACC,QAD/C,CADM,CAAP;AAKA,KAND,CAME,OAAOva,CAAP,EAAU;AACX,aAAO,EAAP;AACA;AACD,GAlkCmB;;AAqkCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,uBAAqB,IAxmCD;;AA2mCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IAhoCG;;AAmoCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,yBAAuB,UAAW9pB,QAAX,EAAqBrB,IAArB,EAA4B;AAClD,QAAI;AACH,OAACqB,QAAQ,CAACq5B,cAAT,KAA4B,CAAC,CAA7B,GAAiC4K,cAAjC,GAAkDC,YAAnD,EAAiEI,OAAjE,CACC,gBAActkC,QAAQ,CAAC01B,SAAvB,GAAiC,GAAjC,GAAqC0O,QAAQ,CAACC,QAD/C,EAECN,IAAI,CAACQ,SAAL,CAAgB5lC,IAAhB,CAFD;AAIA,KALD,CAKE,OAAOmrB,CAAP,EAAU,CAAE;AACd,GAvqCmB;;AA0qCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,uBAAqB,IAlsCD;;AAqsCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,IAttCE;;AAytCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IAlwCG;;AAqwCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,EAtxCE;;AAyxCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,CA3yCG;;AA8yCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,CAl0CO;;AAq0CpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,cAAY,EA70CQ;;AAg1CpB;AACD;AACA;AACA;AACA;AACA;AACA;AACC,eAAa;AACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,aAAS;AACR;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,wBAAkB,qCAtBV;;AAwBR;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,yBAAmB;AA7CX,KARG;;AAwDZ;AACF;AACA;AACA;AACA;AACA;AACE,iBAAa;AACZ;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,gBAAU,OArBE;;AAwBZ;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,eAAS,MA5CG;;AA+CZ;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,eAAS,MAnEG;;AAsEZ;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,mBAAa;AA1FD,KA9DD;;AA2JZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,mBAAe,4BA/KH;;AAkLZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,aAAS,6CA/MG;;AAkNZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,kBAAc,6BApOF;;AAuOZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,qBAAiB,qCA1PL;;AA6PZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,oBAAgB,EAjRJ;;AAoRZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,gBAAY,EAhTA;;AAmTZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,kBAAc,GAvUF;;AA0UZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,mBAAe,qBAhXH;;AAmXZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,uBAAmB,YAxYP;;AA2YZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,mBAAe,EA5ZH;;AA+ZZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,eAAW,SA/bC;;AAkcZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,0BAAsB,EA1cV;;AA6cZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,YAAQ,EAneI;;AAseZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,oBAAgB;AAzfJ,GAv1CO;;AAo1DpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,aAAW7rB,CAAC,CAACmI,MAAF,CAAU,EAAV,EAAclI,SAAS,CAACiJ,MAAV,CAAiBuO,OAA/B,CAz2DS;;AA42DpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,MA93DG;;AAi4DpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,IAj5DK;;AAo5DpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,UAAQ,QAv8DY;;AA08DpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,IA39DK;;AA89DpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,gBAv/DC;;AA0/DpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,cAAY,EAhhEQ;;AAmhEpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,EAxiEG;;AA2iEpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,cAAY,EAhkEQ;;AAmkEpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,KAllEG;;AAqlEpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,cAAY,IApmEQ;;AAumEpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,WAAS;AA/mEW,CAArB;;AAknEA3B,eAAe,CAAE7V,SAAS,CAAC4H,QAAZ,CAAf;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA5H,SAAS,CAAC4H,QAAV,CAAmBhE,MAAnB,GAA4B;AAC3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IAvCc;AAwC3B,eAAa,CAAC,CAxCa;;AA2C3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,CAAE,KAAF,EAAS,MAAT,CA/Ec;;AAkF3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,IAhHY;;AAmH3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IAjJc;;AAoJ3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,cAAY,IAlLe;;AAqL3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IAlNU;;AAqvYkaAAW,IAjgBgB;;AAogB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IAzhBc;;AA4hB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,YAAU,EA5jBiB;;AA8jB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,EA7lBQ;;AAgmB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,IAxoBQ;;AA2oB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,WAAS,EAprBkB;;AAurB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,KA9tBU;;AAiuB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,YAAU,IAlwBiB;;AAqwB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,WAAS,IA3yBkB;;AA8yB3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,YAAU;AAj1BiB,CAA5B;;AAo1BAiS,eAAe,CAAE7V,SAAS,CAAC4H,QAAV,CAAmBhE,MAArB,CAAf;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA5D,SAAS,CAACiJ,MAAV,CAAiBD,SAAjB,GAA6B;AAC5B;AACD;AACA;AACA;AACC,eAAa;AAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,kBAAc,IATF;;AAWZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,oBAAgB,IApBJ;;AAsBZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,eAAW,IA9BC;;AAgCZ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,aAAS,IAvCG;;AAyCZ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,qBAAiB,IAhDL;;AAkDZ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,iBAAa,IAzDD;;AA2DZ;AACF;AACA;AACA;AACA;AACA;AACA;AACE,mBAAe,IAlEH;;AAoEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,mBAAe,IA5EH;;AA8EZ;AACF;AACA;AACA;AACA;AACA;AACE,aAAS,IApFG;;AAsFZ;AACF;AACA;AACA;AACA;AACA;AACE,kBAAc,IA5FF;;AA8FZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,oBAAgB,IAtGJ;;AAwGZ;AACF;AACA;AACA;AACA;AACA;AACE,kBAAc;AA9GF,GALe;;AAuH5B;AACD;AACA;AACA;AACC,aAAW;AACV;AACF;AACA;AACA;AACA;AACA;AACA;AACE,iBAAa,IARH;;AAUV;AACF;AACA;AACA;AACA;AACA;AACE,iBAAa,CAhBH;;AAkBV;AACF;AACA;AACA;AACA;AACA;AACA;AACE,UAAM,IAzBI;;AA2BV;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,eAAW,IAnCD;;AAqCV;AACF;AACA;AACA;AACA;AACA;AACA;AACE,UAAM;AA5CI,GA3HiB;;AA0K5B;AACD;AACA;AACA;AACA;AACC,eAAa;AACZ;AACF;AACA;AACA;AACA;AACA;AACE,sBAAkB;AAPN,GA/Ke;;AAyL5B;AACD;AACA;AACA;AACC,cAAY;AACX;AACF;AACA;AACA;AACA;AACA;AACE,uBAAmB,KAPR;;AASX;AACF;AACA;AACA;AACA;AACA;AACA;AACE,sBAAkB,KAhBP;;AAkBX;AACF;AACA;AACA;AACA;AACE,iBAAa,KAvBF;;AAyBX;AACF;AACA;AACA;AACA;AACE,gBAAY;AA9BD,GA7LgB;AA+N5B,UAAQ,IA/NoB;;AAkO5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,EAhPa;;AAkP5B;AACD;AACA;AACA;AACA;AACA;AACC,YAAU,EAxPkB;;AA0P5B;AACD;AACA;AACA;AACA;AACC,eAAa,EA/Pe;;AAiQ5B;AACD;AACA;AACA;AACA;AACC,qBAAmB,EAtQS;;AAwQ5B;AACD;AACA;AACA;AACA;AACC,UAAQ,EA7QoB;;AA+Q5B;AACD;AACA;AACA;AACA;AACC,eAAa,EApRe;;AAsR5B;AACD;AACA;AACA;AACA;AACC,cAAY,EA3RgB;;AA6R5B;AACD;AACA;AACA;AACA;AACC,cAAY,EAlSgB;;AAoS5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,EA5SS;;AA8S5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,EArTS;;AAuT5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IAnUe;;AAqU5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,EA7UU;;AA+U5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,IAtVS;;AAwV5B;AACD;AACA;AACA;AACA;AACC,sBAAoB,EA7VQ;;AA+V5B;AACD;AACA;AACA;AACA;AACC,mBAAiB,CApWW;;AAsW5B;AACD;AACA;AACA;AACA;AACC,mBAAiB,EA3WW;;AA6W5B;AACD;AACA;AACA;AACA;AACC,sBAAoB,EAlXQ;;AAoX5B;AACD;AACA;AACA;AACA;AACC,sBAAoB,EAzXQ;;AA2X5B;AACD;AACA;AACA;AACA;AACC,oBAAkB,EAhYU;;AAkY5B;AACD;AACA;AACA;AACA;AACC,0BAAwB,EAvYI;;AAyY5B;AACD;AACA;AACA;AACA;AACA;AACC,uBAAqB,EA/YO;;AAiZ5B;AACD;AACA;AACA;AACA;AACC,oBAAkB,EAtZU;;AAyZ5B;AACD;AACA;AACA;AACA;AACA;AACC,uBAAqB,EA/ZO;;AAia5B;AACD;AACA;AACA;AACA;AACA;AACC,uBAAqB,EAvaO;;AAya5B;AACD;AACA;AACA;AACA;AACA;AACC,mBAAiB,EA/aW;;AAib5B;AACD;AACA;AACA;AACA;AACC,cAAY,EAtbgB;;AAwb5B;AACD;AACA;AACA;AACA;AACC,YAAU,IA7bkB;;AA+b5B;AACD;AACA;AACA;AACA;AACC,YAAU,IApckB;;AAsc5B;AACD;AACA;AACA;AACA;AACC,YAAU,IA3ckB;;AA6c5B;AACD;AACA;AACA;AACA;AACC,YAAU,IAldkB;;AAod5B;AACD;AACA;AACA;AACA;AACC,mBAAiB,IAzdW;;AA2d5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,KAneW;;AAqe5B;AACD;AACA;AACA;AACA;AACC,kBAAgB,KA1eY;;AA4e5B;AACD;AACA;AACA;AACA;AACA;AACC,gBAAc,EAlfc;;AAof5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,UAAQ,IA5foB;;AA8f5B;AACD;AACA;AACA;AACA;AACC,iBAAe,IAngBa;;AAqgB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,qBAAmB,YA5gBS;;AA8gB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,CArhBU;;AAuhB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,EApiBa;;AAsiB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,EAjjBa;;AAmjB5B;AACD;AACA;AACA;AACA;AACC,iBAAe,IAxjBa;;AA0jB5B;AACD;AACA;AACA;AACA;AACC,kBAAgB,IA/jBY;;AAikB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,IAxkBa;;AA0kB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IAllBW;;AAolB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,WAAS,IA3lBmB;;AA6lB5B;AACD;AACA;AACA;AACA;AACC,UAAQ1H,SAlmBoB;;AAomB5B;AACD;AACA;AACA;AACA;AACC,eAAaA,SAzmBe;;AA2mB5B;AACD;AACA;AACA;AACA;AACA;AACC,kBAAgB,IAjnBY;;AAmnB5B;AACD;AACA;AACA;AACA;AACA;AACC,oBAAkB,EAznBU;;AA2nB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IAloBW;;AAooB5B;AACD;AACA;AACA;AACA;AACA;AACC,oBAAkB,IA1oBU;;AA4oB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,iBAAe,IAnpBa;;AAqpB5B;AACD;AACA;AACA;AACA;AACA;AACC,WAAS,CA3pBmB;;AA6pB5B;AACD;AACA;AACA;AACA;AACC,cAAY,KAlqBgB;;AAoqB5B;AACD;AACA;AACA;AACA;AACC,gBAAc,CAAC,CAzqBa;;AA2qB5B;AACD;AACA;AACA;AACA;AACC,qBAAmB,EAhrBS;;AAkrB5B;AACD;AACA;AACA;AACA;AACC,oBAAkB,CAvrBU;;AAyrB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,oBAAkB,CAlsBU;;AAosB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,sBAAoB,CA7sBQ;;AA+sB5B;AACD;AACA;AACA;AACA;AACC,cAAY,EAptBgB;;AAstB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,KA9tBe;;AAguB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,aAAW,KAxuBiB;;AA0uB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,mBAAiB,IAlvBW;;AAovB5B;AACD;AACA;AACA;AACA;AACC,WAAS,IAzvBmB;;AA2vB5B;AACD;AACA;AACA;AACA;AACA;AACC,uBAAqB,EAjwBO;;AAowB5B;AACD;AACA;AACA;AACC,oBAAkB,YAClB;AACC,WAAO2N,aAAa,CAAE,IAAF,CAAb,IAAyB,KAAzB,GACN,KAAK1D,cAAL,GAAsB,CADhB,GAEN,KAAK2E,eAAL,CAAqBzJ,MAFtB;AAGA,GA7wB2B;;AA+wB5B;AACD;AACA;AACA;AACC,sBAAoB,YACpB;AACC,WAAOwI,aAAa,CAAE,IAAF,CAAb,IAAyB,KAAzB,GACN,KAAK3D,gBAAL,GAAwB,CADlB,GAEN,KAAK2E,SAAL,CAAexJ,MAFhB;AAGA,GAxxB2B;;AA0xB5B;AACD;AACA;AACA;AACC,kBAAgB,YAChB;AACC,QACCD,GAAG,GAAQ,KAAKojB,eADjB;AAAA,QAECjX,KAAK,GAAM,KAAKzH,cAFjB;AAAA,QAGCg4B,IAAI,GAAOvwB,KAAK,GAAGnM,GAHpB;AAAA,QAICuqB,OAAO,GAAI,KAAK9gB,SAAL,CAAexJ,MAJ3B;AAAA,QAKC0H,QAAQ,GAAG,KAAKxE,SALjB;AAAA,QAMC28B,QAAQ,GAAGn4B,QAAQ,CAACiY,SANrB;;AAQA,QAAKjY,QAAQ,CAACmV,WAAd,EAA4B;AAC3B,aAAOgjB,QAAQ,KAAK,KAAb,IAAsB9/B,GAAG,KAAK,CAAC,CAA/B,GACNmM,KAAK,GAAGoe,OADF,GAENlY,IAAI,CAAC0tB,GAAL,CAAU5zB,KAAK,GAACnM,GAAhB,EAAqB,KAAK8E,gBAA1B,CAFD;AAGA,KAJD,MAKK;AACJ,aAAO,CAAEg7B,QAAF,IAAcpD,IAAI,GAACnS,OAAnB,IAA8BvqB,GAAG,KAAG,CAAC,CAArC,GACNuqB,OADM,GAENmS,IAFD;AAGA;AACD,GAlzB2B;;AAozB5B;AACD;AACA;AACA;AACA;AACC,eAAa,IAzzBe;;AA2zB5B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,eAAa,IAl0Be;;AAo0B5B;AACD;AACA;AACA;AACC,eAAa,CAx0Be;;AA00B5B;AACD;AACA;AACC,iBAAe,IA70Ba;;AA+0B5B;AACD;AACA;AACC,iBAAe,IAl1Ba;;AAo1B5B;AACD;AACA;AACA;AACA;AACC,eAAa,EAz1Be;;AA21B5B;AACD;AACA;AACA;AACA;AACC,cAAY,EAh2BgB;;AAk2B5B;AACD;AACA;AACA;AACA;AACC,aAAW,IAv2BiB;;AAy2B5B;AACD;AACA;AACA;AACA;AACC,WAAS;AA92BmB,CAA7B;AAi3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAljC,SAAS,CAAC6G,GAAV,GAAgBhG,IAAI,GAAG;AACtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC+vB,EAAAA,OAAO,EAAE,EATa;;AAYtB;AACD;AACA;AACA;AACA;AACA;AACC/lB,EAAAA,OAAO,EAAE,EAlBa;;AAqBtB;AACD;AACA;AACA;AACA;AACC27B,EAAAA,OAAO,EAAE,UA1Ba;;AA6BtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC/K,EAAAA,OAAO,EAAE,OAtCa;;AAyCtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC3U,EAAAA,OAAO,EAAE,EA9Ea;;AAiFtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCnjB,EAAAA,MAAM,EAAE,EA3Ic;;AA8ItB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC1D,EAAAA,QAAQ,EAAE;AACTkE,IAAAA,IAAI,EAAE,EADG;AAETP,IAAAA,MAAM,EAAE,EAFC;AAGTvC,IAAAA,GAAG,EAAE;AAHI,GAtKY;;AA6KtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCsF,EAAAA,QAAQ,EAAE,EAvLY;;AA0LtB;AACD;AACA;AACA;AACA;AACA;AACCyjB,EAAAA,MAAM,EAAE;AACP;AACF;AACA;AACA;AACA;AACA;AACA;AACE3e,IAAAA,IAAI,EAAE;AARC,GAhMc;;AA4MtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC8kB,EAAAA,KAAK,EAAE,EAzPe;AA4PtBkM,EAAAA,QAAQ,EAAE;AACTgK,IAAAA,UAAU,EAAE,EADH;AAET/S,IAAAA,MAAM,EAAE;AAFC,GA5PY;;AAkQtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC9tB,EAAAA,KAAK,EAAE,EA1Se;;AA6StB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC5B,EAAAA,IAAI,EAAE;AACL;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEoZ,IAAAA,MAAM,EAAE,EAzCH;;AA4CL;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEzZ,IAAAA,MAAM,EAAE,EAhFH;;AAmFL;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEiC,IAAAA,KAAK,EAAE;AAnJF,GAvTgB;;AA6ctB;AACD;AACA;AACA;AACA;AACA;AACCmD,EAAAA,OAAO,EAAE,CAnda;AAsdtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACD;AACA;AACA;AACA;AACC1C,EAAAA,cAAc,EAAErG,SAAS,CAACqG,cAleJ;;AAqetB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","sourcesContent":["/*! DataTables 1.13.7\n * Â©2008-2023 SpryMedia Ltd - datatables.net/license\n */\n\nimport jQuery from 'jquery';\n\n// DataTables code uses $ internally, but we want to be able to\n// reassign $ with the `use` method, so it is a regular var.\nvar $ = jQuery;\n\n\nvar DataTable = function ( selector, options )\n{\n\t// Check if called with a window or jQuery object for DOM less applications\n\t// This is for backwards compatibility\n\tif (DataTable.factory(selector, options)) {\n\t\treturn DataTable;\n\t}\n\n\t// When creating with `new`, create a new DataTable, returning the API instance\n\tif (this instanceof DataTable) {\n\t\treturn $(selector).DataTable(options);\n\t}\n\telse {\n\t\t// Argument switching\n\t\toptions = selector;\n\t}\n\n\t/**\n\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n\t * return the resulting jQuery object.\n\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n\t *    criterion (\"applied\") or all TR elements (i.e. no filter).\n\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t *    'original' whereby the original order the data was read into the table is used.\n\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t *  @returns {object} jQuery object, filtered by the given selector.\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Highlight every second row\n\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n\t *    } );\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\n\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\n\t *      oTable.fnFilter('Webkit');\n\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n\t *      oTable.fnFilter('');\n\t *    } );\n\t */\n\tthis.$ = function ( sSelector, oOpts )\n\t{\n\t\treturn this.api(true).$( sSelector, oOpts );\n\t};\n\t\n\t\n\t/**\n\t * Almost identical to $ in operation, but in this case returns the data for the matched\n\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n\t * rather than any descendants, so the data can be obtained for the row/cell. If matching\n\t * rows are found, the data returned is the original data array/object that was used to\n\t * create the row (or a generated array if from a DOM source).\n\t *\n\t * This method is often useful in-combination with $ where both functions are given the\n\t * same parameters and the array indexes will match identically.\n\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n\t *    criterion (\"applied\") or all elements (i.e. no filter).\n\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t *    'original' whereby the original order the data was read into the table is used.\n\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t *  @returns {array} Data for the matched elements. If any elements, as a result of the\n\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n\t *    entry in the array.\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Get the data from the first row in the table\n\t *      var data = oTable._('tr:first');\n\t *\n\t *      // Do something useful with the data\n\t *      alert( \"First cell is: \"+data[0] );\n\t *    } );\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Filter to 'Webkit' and get all data for\n\t *      oTable.fnFilter('Webkit');\n\t *      var data = oTable._('tr', {\"search\": \"applied\"});\n\t *\n\t *      // Do something with the data\n\t *      alert( data.length+\" rows matched the search\" );\n\t *    } );\n\t */\n\tthis._ = function ( sSelector, oOpts )\n\t{\n\t\treturn this.api(true).rows( sSelector, oOpts ).data();\n\t};\n\t\n\t\n\t/**\n\t * Create a DataTables Api instance, with the currently selected tables for\n\t * the Api's context.\n\t * @param {boolean} [traditional=false] Set the API instance's context to be\n\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n\t *   or if all tables captured in the jQuery object should be used.\n\t * @return {DataTables.Api}\n\t */\n\tthis.api = function ( traditional )\n\t{\n\t\treturn traditional ?\n\t\t\tnew _Api(\n\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )\n\t\t\t) :\n\t\t\tnew _Api( this );\n\t};\n\t\n\t\n\t/**\n\t * Add a single new row or multiple rows of data to the table. Please note\n\t * that this is suitable for client-side processing only - if you are using\n\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n\t * must add it to the data source, i.e. the server-side, through an Ajax call.\n\t *  @param {array|object} data The data to be added to the table. This can be:\n\t *    <ul>\n\t *      <li>1D array of data - add a single row with the data provided</li>\n\t *      <li>2D array of arrays - add multiple rows in a single call</li>\n\t *      <li>object - data object when using <i>mData</i></li>\n\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n\t *    </ul>\n\t *  @param {bool} [redraw=true] redraw the table or not\n\t *  @returns {array} An array of integers, representing the list of indexes in\n\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n\t *    the table.\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    // Global var for counter\n\t *    var giCount = 2;\n\t *\n\t *    $(document).ready(function() {\n\t *      $('#example').dataTable();\n\t *    } );\n\t *\n\t *    function fnClickAddRow() {\n\t *      $('#example').dataTable().fnAddData( [\n\t *        giCount+\".1\",\n\t *        giCount+\".2\",\n\t *        giCount+\".3\",\n\t *        giCount+\".4\" ]\n\t *      );\n\t *\n\t *      giCount++;\n\t *    }\n\t */\n\tthis.fnAddData = function( data, redraw )\n\t{\n\t\tvar api = this.api( true );\n\t\n\t\t/* Check if we want to add multiple rows or not */\n\t\tvar rows = Array.isArray(data) && ( Array.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\n\t\t\tapi.rows.add( data ) :\n\t\t\tapi.row.add( data );\n\t\n\t\tif ( redraw === undefined || redraw ) {\n\t\t\tapi.draw();\n\t\t}\n\t\n\t\treturn rows.flatten().toArray();\n\t};\n\t\n\t\n\t/**\n\t * This function will make DataTables recalculate the column sizes, based on the data\n\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n\t * through the sWidth parameter). This can be useful when the width of the table's\n\t * parent element changes (for example a window resize).\n\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable( {\n\t *        \"sScrollY\": \"200px\",\n\t *        \"bPaginate\": false\n\t *      } );\n\t *\n\t *      $(window).on('resize', function () {\n\t *        oTable.fnAdjustColumnSizing();\n\t *      } );\n\t *    } );\n\t */\n\tthis.fnAdjustColumnSizing = function ( bRedraw )\n\t{\n\t\tvar api = this.api( true ).columns.adjust();\n\t\tvar settings = api.settings()[0];\n\t\tvar scroll = settings.oScroll;\n\t\n\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\tapi.draw( false );\n\t\t}\n\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\n\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n\t\t\t_fnScrollDraw( settings );\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Quickly and simply clear a table\n\t *  @param {bool} [bRedraw=true] redraw the table or not\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n\t *      oTable.fnClearTable();\n\t *    } );\n\t */\n\tthis.fnClearTable = function( bRedraw )\n\t{\n\t\tvar api = this.api( true ).clear();\n\t\n\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\tapi.draw();\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * The exact opposite of 'opening' a row, this function will close any rows which\n\t * are currently 'open'.\n\t *  @param {node} nTr the table row to 'close'\n\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable;\n\t *\n\t *      // 'open' an information row when a row is clicked on\n\t *      $('#example tbody tr').click( function () {\n\t *        if ( oTable.fnIsOpen(this) ) {\n\t *          oTable.fnClose( this );\n\t *        } else {\n\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t *        }\n\t *      } );\n\t *\n\t *      oTable = $('#example').dataTable();\n\t *    } );\n\t */\n\tthis.fnClose = function( nTr )\n\t{\n\t\tthis.api( true ).row( nTr ).child.hide();\n\t};\n\t\n\t\n\t/**\n\t * Remove a row for the table\n\t *  @param {mixed} target The index of the row from aoData to be deleted, or\n\t *    the TR element you want to delete\n\t *  @param {function|null} [callBack] Callback function\n\t *  @param {bool} [redraw=true] Redraw the table or not\n\t *  @returns {array} The row that was deleted\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Immediately remove the first row\n\t *      oTable.fnDeleteRow( 0 );\n\t *    } );\n\t */\n\tthis.fnDeleteRow = function( target, callback, redraw )\n\t{\n\t\tvar api = this.api( true );\n\t\tvar rows = api.rows( target );\n\t\tvar settings = rows.settings()[0];\n\t\tvar data = settings.aoData[ rows[0][0] ];\n\t\n\t\trows.remove();\n\t\n\t\tif ( callback ) {\n\t\t\tcallback.call( this, settings, data );\n\t\t}\n\t\n\t\tif ( redraw === undefined || redraw ) {\n\t\t\tapi.draw();\n\t\t}\n\t\n\t\treturn data;\n\t};\n\t\n\t\n\t/**\n\t * Restore the table to it's original state in the DOM by removing all of DataTables\n\t * enhancements, alterations to the DOM structure of the table and event listeners.\n\t *  @param {boolean} [remove=false] Completely remove the table from the DOM\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n\t *      var oTable = $('#example').dataTable();\n\t *      oTable.fnDestroy();\n\t *    } );\n\t */\n\tthis.fnDestroy = function ( remove )\n\t{\n\t\tthis.api( true ).destroy( remove );\n\t};\n\t\n\t\n\t/**\n\t * Redraw the table\n\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n\t *      oTable.fnDraw();\n\t *    } );\n\t */\n\tthis.fnDraw = function( complete )\n\t{\n\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes\n\t\t// into account the new data, but can hold position.\n\t\tthis.api( true ).draw( complete );\n\t};\n\t\n\t\n\t/**\n\t * Filter the input based on data\n\t *  @param {string} sInput String to filter the table on\n\t *  @param {int|null} [iColumn] Column to limit filtering to\n\t *  @param {bool} [bRegex=false] Treat as regular expression or not\n\t *  @param {bool} [bSmart=true] Perform smart filtering or not\n\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Sometime later - filter...\n\t *      oTable.fnFilter( 'test string' );\n\t *    } );\n\t */\n\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\n\t{\n\t\tvar api = this.api( true );\n\t\n\t\tif ( iColumn === null || iColumn === undefined ) {\n\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t}\n\t\telse {\n\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t}\n\t\n\t\tapi.draw();\n\t};\n\t\n\t\n\t/**\n\t * Get the data for the whole table, an individual row or an individual cell based on the\n\t * provided parameters.\n\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n\t *    a TR node then the data source for the whole row will be returned. If given as a\n\t *    TD/TH cell node then iCol will be automatically calculated and the data for the\n\t *    cell returned. If given as an integer, then this is treated as the aoData internal\n\t *    data index for the row (see fnGetPosition) and the data for that row used.\n\t *  @param {int} [col] Optional column index that you want the data of.\n\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n\t *    returned. If mRow is defined, just data for that row, and is iCol is\n\t *    defined, only data for the designated cell is returned.\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    // Row data\n\t *    $(document).ready(function() {\n\t *      oTable = $('#example').dataTable();\n\t *\n\t *      oTable.$('tr').click( function () {\n\t *        var data = oTable.fnGetData( this );\n\t *        // ... do something with the array / object of data for the row\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Individual cell data\n\t *    $(document).ready(function() {\n\t *      oTable = $('#example').dataTable();\n\t *\n\t *      oTable.$('td').click( function () {\n\t *        var sData = oTable.fnGetData( this );\n\t *        alert( 'The cell clicked on had the value of '+sData );\n\t *      } );\n\t *    } );\n\t */\n\tthis.fnGetData = function( src, col )\n\t{\n\t\tvar api = this.api( true );\n\t\n\t\tif ( src !== undefined ) {\n\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';\n\t\n\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?\n\t\t\t\tapi.cell( src, col ).data() :\n\t\t\t\tapi.row( src ).data() || null;\n\t\t}\n\t\n\t\treturn api.data().toArray();\n\t};\n\t\n\t\n\t/**\n\t * Get an array of the TR nodes that are used in the table's body. Note that you will\n\t * typically want to use the '$' API method in preference to this as it is more\n\t * flexible.\n\t *  @param {int} [iRow] Optional row index for the TR element you want\n\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n\t *    in the table's body, or iRow is defined, just the TR element requested.\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Get the nodes from the table\n\t *      var nNodes = oTable.fnGetNodes( );\n\t *    } );\n\t */\n\tthis.fnGetNodes = function( iRow )\n\t{\n\t\tvar api = this.api( true );\n\t\n\t\treturn iRow !== undefined ?\n\t\t\tapi.row( iRow ).node() :\n\t\t\tapi.rows().nodes().flatten().toArray();\n\t};\n\t\n\t\n\t/**\n\t * Get the array indexes of a particular cell from it's DOM element\n\t * and column index including hidden columns\n\t *  @param {node} node this can either be a TR, TD or TH in the table's body\n\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n\t *    if given as a cell, an array of [row index, column index (visible),\n\t *    column index (all)] is given.\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      $('#example tbody td').click( function () {\n\t *        // Get the position of the current data from the node\n\t *        var aPos = oTable.fnGetPosition( this );\n\t *\n\t *        // Get the data array for this row\n\t *        var aData = oTable.fnGetData( aPos[0] );\n\t *\n\t *        // Update the data array and return the value\n\t *        aData[ aPos[1] ] = 'clicked';\n\t *        this.innerHTML = 'clicked';\n\t *      } );\n\t *\n\t *      // Init DataTables\n\t *      oTable = $('#example').dataTable();\n\t *    } );\n\t */\n\tthis.fnGetPosition = function( node )\n\t{\n\t\tvar api = this.api( true );\n\t\tvar nodeName = node.nodeName.toUpperCase();\n\t\n\t\tif ( nodeName == 'TR' ) {\n\t\t\treturn api.row( node ).index();\n\t\t}\n\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {\n\t\t\tvar cell = api.cell( node ).index();\n\t\n\t\t\treturn [\n\t\t\t\tcell.row,\n\t\t\t\tcell.columnVisible,\n\t\t\t\tcell.column\n\t\t\t];\n\t\t}\n\t\treturn null;\n\t};\n\t\n\t\n\t/**\n\t * Check to see if a row is 'open' or not.\n\t *  @param {node} nTr the table row to check\n\t *  @returns {boolean} true if the row is currently open, false otherwise\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable;\n\t *\n\t *      // 'open' an information row when a row is clicked on\n\t *      $('#example tbody tr').click( function () {\n\t *        if ( oTable.fnIsOpen(this) ) {\n\t *          oTable.fnClose( this );\n\t *        } else {\n\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t *        }\n\t *      } );\n\t *\n\t *      oTable = $('#example').dataTable();\n\t *    } );\n\t */\n\tthis.fnIsOpen = function( nTr )\n\t{\n\t\treturn this.api( true ).row( nTr ).child.isShown();\n\t};\n\t\n\t\n\t/**\n\t * This function will place a new row directly after a row which is currently\n\t * on display on the page, with the HTML contents that is passed into the\n\t * function. This can be used, for example, to ask for confirmation that a\n\t * particular record should be deleted.\n\t *  @param {node} nTr The table row to 'open'\n\t *  @param {string|node|jQuery} mHtml The HTML to put into the row\n\t *  @param {string} sClass Class to give the new TD cell\n\t *  @returns {node} The row opened. Note that if the table row passed in as the\n\t *    first parameter, is not found in the table, this method will silently\n\t *    return.\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable;\n\t *\n\t *      // 'open' an information row when a row is clicked on\n\t *      $('#example tbody tr').click( function () {\n\t *        if ( oTable.fnIsOpen(this) ) {\n\t *          oTable.fnClose( this );\n\t *        } else {\n\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t *        }\n\t *      } );\n\t *\n\t *      oTable = $('#example').dataTable();\n\t *    } );\n\t */\n\tthis.fnOpen = function( nTr, mHtml, sClass )\n\t{\n\t\treturn this.api( true )\n\t\t\t.row( nTr )\n\t\t\t.child( mHtml, sClass )\n\t\t\t.show()\n\t\t\t.child()[0];\n\t};\n\t\n\t\n\t/**\n\t * Change the pagination - provides the internal logic for pagination in a simple API\n\t * function. With this function you can have a DataTables table go to the next,\n\t * previous, first or last pages.\n\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n\t *    or page number to jump to (integer), note that page 0 is the first page.\n\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *      oTable.fnPageChange( 'next' );\n\t *    } );\n\t */\n\tthis.fnPageChange = function ( mAction, bRedraw )\n\t{\n\t\tvar api = this.api( true ).page( mAction );\n\t\n\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\tapi.draw(false);\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Show a particular column\n\t *  @param {int} iCol The column whose display should be changed\n\t *  @param {bool} bShow Show (true) or hide (false) the column\n\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Hide the second column after initialisation\n\t *      oTable.fnSetColumnVis( 1, false );\n\t *    } );\n\t */\n\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )\n\t{\n\t\tvar api = this.api( true ).column( iCol ).visible( bShow );\n\t\n\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\tapi.columns.adjust().draw();\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Get the settings for a particular table for external manipulation\n\t *  @returns {object} DataTables settings object. See\n\t *    {@link DataTable.models.oSettings}\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *      var oSettings = oTable.fnSettings();\n\t *\n\t *      // Show an example parameter from the settings\n\t *      alert( oSettings._iDisplayStart );\n\t *    } );\n\t */\n\tthis.fnSettings = function()\n\t{\n\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );\n\t};\n\t\n\t\n\t/**\n\t * Sort the table by a particular column\n\t *  @param {int} iCol the data index to sort on. Note that this will not match the\n\t *    'display index' if you have hidden data entries\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Sort immediately with columns 0 and 1\n\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n\t *    } );\n\t */\n\tthis.fnSort = function( aaSort )\n\t{\n\t\tthis.api( true ).order( aaSort ).draw();\n\t};\n\t\n\t\n\t/**\n\t * Attach a sort listener to an element for a given column\n\t *  @param {node} nNode the element to attach the sort listener to\n\t *  @param {int} iColumn the column that a click on this node will sort on\n\t *  @param {function} [fnCallback] callback function when sort is run\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *\n\t *      // Sort on column 1, when 'sorter' is clicked on\n\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n\t *    } );\n\t */\n\tthis.fnSortListener = function( nNode, iColumn, fnCallback )\n\t{\n\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );\n\t};\n\t\n\t\n\t/**\n\t * Update a table cell or row - this method will accept either a single value to\n\t * update the cell with, an array of values with one element for each column or\n\t * an object in the same format as the original data source. The function is\n\t * self-referencing in order to make the multi column updates easier.\n\t *  @param {object|array|string} mData Data to update the cell/row with\n\t *  @param {node|int} mRow TR element you want to update or the aoData index\n\t *  @param {int} [iColumn] The column to update, give as null or undefined to\n\t *    update a whole row.\n\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t *  @param {bool} [bAction=true] Perform pre-draw actions or not\n\t *  @returns {int} 0 on success, 1 on error\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n\t *    } );\n\t */\n\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\n\t{\n\t\tvar api = this.api( true );\n\t\n\t\tif ( iColumn === undefined || iColumn === null ) {\n\t\t\tapi.row( mRow ).data( mData );\n\t\t}\n\t\telse {\n\t\t\tapi.cell( mRow, iColumn ).data( mData );\n\t\t}\n\t\n\t\tif ( bAction === undefined || bAction ) {\n\t\t\tapi.columns.adjust();\n\t\t}\n\t\n\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\tapi.draw();\n\t\t}\n\t\treturn 0;\n\t};\n\t\n\t\n\t/**\n\t * Provide a common method for plug-ins to check the version of DataTables being used, in order\n\t * to ensure compatibility.\n\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n\t *    formats \"X\" and \"X.Y\" are also acceptable.\n\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n\t *    version, or false if this version of DataTales is not suitable\n\t *  @method\n\t *  @dtopt API\n\t *  @deprecated Since v1.10\n\t *\n\t *  @example\n\t *    $(document).ready(function() {\n\t *      var oTable = $('#example').dataTable();\n\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n\t *    } );\n\t */\n\tthis.fnVersionCheck = _ext.fnVersionCheck;\n\t\n\n\tvar _that = this;\n\tvar emptyInit = options === undefined;\n\tvar len = this.length;\n\n\tif ( emptyInit ) {\n\t\toptions = {};\n\t}\n\n\tthis.oApi = this.internal = _ext.internal;\n\n\t// Extend with old style plug-in API methods\n\tfor ( var fn in DataTable.ext.internal ) {\n\t\tif ( fn ) {\n\t\t\tthis[fn] = _fnExternApiFunc(fn);\n\t\t}\n\t}\n\n\tthis.each(function() {\n\t\t// For each initialisation we want to give it a clean initialisation\n\t\t// object that can be bashed around\n\t\tvar o = {};\n\t\tvar oInit = len > 1 ? // optimisation for single table case\n\t\t\t_fnExtend( o, options, true ) :\n\t\t\toptions;\n\n\t\t/*global oInit,_that,emptyInit*/\n\t\tvar i=0, iLen, j, jLen, k, kLen;\n\t\tvar sId = this.getAttribute( 'id' );\n\t\tvar bInitHandedOff = false;\n\t\tvar defaults = DataTable.defaults;\n\t\tvar $this = $(this);\n\t\t\n\t\t\n\t\t/* Sanity check */\n\t\tif ( this.nodeName.toLowerCase() != 'table' )\n\t\t{\n\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t/* Backwards compatibility for the defaults */\n\t\t_fnCompatOpts( defaults );\n\t\t_fnCompatCols( defaults.column );\n\t\t\n\t\t/* Convert the camel-case defaults to Hungarian */\n\t\t_fnCamelToHungarian( defaults, defaults, true );\n\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );\n\t\t\n\t\t/* Setting up the initialisation object */\n\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );\n\t\t\n\t\t\n\t\t\n\t\t/* Check to see if we are re-initialising a table */\n\t\tvar allSettings = DataTable.settings;\n\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tvar s = allSettings[i];\n\t\t\n\t\t\t/* Base check on table node */\n\t\t\tif (\n\t\t\t\ts.nTable == this ||\n\t\t\t\t(s.nTHead && s.nTHead.parentNode == this) ||\n\t\t\t\t(s.nTFoot && s.nTFoot.parentNode == this)\n\t\t\t) {\n\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\t\t\n\t\t\t\tif ( emptyInit || bRetrieve )\n\t\t\t\t{\n\t\t\t\t\treturn s.oInstance;\n\t\t\t\t}\n\t\t\t\telse if ( bDestroy )\n\t\t\t\t{\n\t\t\t\t\ts.oInstance.fnDestroy();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\t/* If the element we are initialising has the same ID as a table which was previously\n\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old\n\t\t\t * instance by simply deleting it. This is under the assumption that the table has been\n\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n\t\t\t */\n\t\t\tif ( s.sTableId == this.id )\n\t\t\t{\n\t\t\t\tallSettings.splice( i, 1 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* Ensure the table has an ID - required for accessibility */\n\t\tif ( sId === null || sId === \"\" )\n\t\t{\n\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);\n\t\t\tthis.id = sId;\n\t\t}\n\t\t\n\t\t/* Create the settings object for this table and set some of the default parameters */\n\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {\n\t\t\t\"sDestroyWidth\": $this[0].style.width,\n\t\t\t\"sInstance\":     sId,\n\t\t\t\"sTableId\":      sId\n\t\t} );\n\t\toSettings.nTable = this;\n\t\toSettings.oApi   = _that.internal;\n\t\toSettings.oInit  = oInit;\n\t\t\n\t\tallSettings.push( oSettings );\n\t\t\n\t\t// Need to add the instance after the instance after the settings object has been added\n\t\t// to the settings array, so we can self reference the table instance if more than one\n\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\n\t\t\n\t\t// Backwards compatibility, before we apply all the defaults\n\t\t_fnCompatOpts( oInit );\n\t\t_fnLanguageCompat( oInit.oLanguage );\n\t\t\n\t\t// If the length menu is given, but the init display length is not, use the length menu\n\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )\n\t\t{\n\t\t\toInit.iDisplayLength = Array.isArray( oInit.aLengthMenu[0] ) ?\n\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n\t\t}\n\t\t\n\t\t// Apply the defaults and init options to make a single init object will all\n\t\t// options defined from defaults and instance options.\n\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\n\t\t\n\t\t\n\t\t// Map the initialisation options onto the settings object\n\t\t_fnMap( oSettings.oFeatures, oInit, [\n\t\t\t\"bPaginate\",\n\t\t\t\"bLengthChange\",\n\t\t\t\"bFilter\",\n\t\t\t\"bSort\",\n\t\t\t\"bSortMulti\",\n\t\t\t\"bInfo\",\n\t\t\t\"bProcessing\",\n\t\t\t\"bAutoWidth\",\n\t\t\t\"bSortClasses\",\n\t\t\t\"bServerSide\",\n\t\t\t\"bDeferRender\"\n\t\t] );\n\t\t_fnMap( oSettings, oInit, [\n\t\t\t\"asStripeClasses\",\n\t\t\t\"ajax\",\n\t\t\t\"fnServerData\",\n\t\t\t\"fnFormatNumber\",\n\t\t\t\"sServerMethod\",\n\t\t\t\"aaSorting\",\n\t\t\t\"aaSortingFixed\",\n\t\t\t\"aLengthMenu\",\n\t\t\t\"sPaginationType\",\n\t\t\t\"sAjaxSource\",\n\t\t\t\"sAjaxDataProp\",\n\t\t\t\"iStateDuration\",\n\t\t\t\"sDom\",\n\t\t\t\"bSortCellsTop\",\n\t\t\t\"iTabIndex\",\n\t\t\t\"fnStateLoadCallback\",\n\t\t\t\"fnStateSaveCallback\",\n\t\t\t\"renderer\",\n\t\t\t\"searchDelay\",\n\t\t\t\"rowId\",\n\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\n\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],\n\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],\n\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ]\n\t\t] );\n\t\t_fnMap( oSettings.oScroll, oInit, [\n\t\t\t[ \"sScrollX\", \"sX\" ],\n\t\t\t[ \"sScrollXInner\", \"sXInner\" ],\n\t\t\t[ \"sScrollY\", \"sY\" ],\n\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]\n\t\t] );\n\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\n\t\t\n\t\t/* Callback functions which are array driven */\n\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\n\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\n\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\n\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\n\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\n\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\n\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\n\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\n\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\n\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\n\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\n\t\t\n\t\toSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\n\t\t\n\t\t/* Browser support detection */\n\t\t_fnBrowserDetect( oSettings );\n\t\t\n\t\tvar oClasses = oSettings.oClasses;\n\t\t\n\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\n\t\t$this.addClass( oClasses.sTable );\n\t\t\n\t\t\n\t\tif ( oSettings.iInitDisplayStart === undefined )\n\t\t{\n\t\t\t/* Display start point, taking into account the save saving */\n\t\t\toSettings.iInitDisplayStart = oInit.iDisplayStart;\n\t\t\toSettings._iDisplayStart = oInit.iDisplayStart;\n\t\t}\n\t\t\n\t\tif ( oInit.iDeferLoading !== null )\n\t\t{\n\t\t\toSettings.bDeferLoading = true;\n\t\t\tvar tmp = Array.isArray( oInit.iDeferLoading );\n\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n\t\t}\n\t\t\n\t\t/* Language definitions */\n\t\tvar oLanguage = oSettings.oLanguage;\n\t\t$.extend( true, oLanguage, oInit.oLanguage );\n\t\t\n\t\tif ( oLanguage.sUrl )\n\t\t{\n\t\t\t/* Get the language definitions from a file - because this Ajax call makes the language\n\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that\n\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n\t\t\t */\n\t\t\t$.ajax( {\n\t\t\t\tdataType: 'json',\n\t\t\t\turl: oLanguage.sUrl,\n\t\t\t\tsuccess: function ( json ) {\n\t\t\t\t\t_fnCamelToHungarian( defaults.oLanguage, json );\n\t\t\t\t\t_fnLanguageCompat( json );\n\t\t\t\t\t$.extend( true, oLanguage, json, oSettings.oInit.oLanguage );\n\t\t\n\t\t\t\t\t_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);\n\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t},\n\t\t\t\terror: function () {\n\t\t\t\t\t// Error occurred loading language file, continue on as best we can\n\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tbInitHandedOff = true;\n\t\t}\n\t\telse {\n\t\t\t_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);\n\t\t}\n\t\t\n\t\t/*\n\t\t * Stripes\n\t\t */\n\t\tif ( oInit.asStripeClasses === null )\n\t\t{\n\t\t\toSettings.asStripeClasses =[\n\t\t\t\toClasses.sStripeOdd,\n\t\t\t\toClasses.sStripeEven\n\t\t\t];\n\t\t}\n\t\t\n\t\t/* Remove row stripe classes if they are already on the table row */\n\t\tvar stripeClasses = oSettings.asStripeClasses;\n\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);\n\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {\n\t\t\treturn rowOne.hasClass(el);\n\t\t} ) ) !== -1 ) {\n\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );\n\t\t\toSettings.asDestroyStripes = stripeClasses.slice();\n\t\t}\n\t\t\n\t\t/*\n\t\t * Columns\n\t\t * See if we should load columns automatically or use defined ones\n\t\t */\n\t\tvar anThs = [];\n\t\tvar aoColumnsInit;\n\t\tvar nThead = this.getElementsByTagName('thead');\n\t\tif ( nThead.length !== 0 )\n\t\t{\n\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );\n\t\t\tanThs = _fnGetUniqueThs( oSettings );\n\t\t}\n\t\t\n\t\t/* If not given a column array, generate one with nulls */\n\t\tif ( oInit.aoColumns === null )\n\t\t{\n\t\t\taoColumnsInit = [];\n\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\taoColumnsInit.push( null );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\taoColumnsInit = oInit.aoColumns;\n\t\t}\n\t\t\n\t\t/* Add the columns */\n\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\n\t\t{\n\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );\n\t\t}\n\t\t\n\t\t/* Apply the column definitions */\n\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n\t\t\t_fnColumnOptions( oSettings, iCol, oDef );\n\t\t} );\n\t\t\n\t\t/* HTML5 attribute detection - build an mData object automatically if the\n\t\t * attributes are found\n\t\t */\n\t\tif ( rowOne.length ) {\n\t\t\tvar a = function ( cell, name ) {\n\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;\n\t\t\t};\n\t\t\n\t\t\t$( rowOne[0] ).children('th, td').each( function (i, cell) {\n\t\t\t\tvar col = oSettings.aoColumns[i];\n\t\t\n\t\t\t\tif (! col) {\n\t\t\t\t\t_fnLog( oSettings, 0, 'Incorrect column count', 18 );\n\t\t\t\t}\n\t\t\n\t\t\t\tif ( col.mData === i ) {\n\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );\n\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );\n\t\t\n\t\t\t\t\tif ( sort !== null || filter !== null ) {\n\t\t\t\t\t\tcol.mData = {\n\t\t\t\t\t\t\t_:      i+'.display',\n\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcol._isArrayHost = true;\n\t\t\n\t\t\t\t\t\t_fnColumnOptions( oSettings, i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\t\n\t\tvar features = oSettings.oFeatures;\n\t\tvar loadedInit = function () {\n\t\t\t/*\n\t\t\t * Sorting\n\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler\n\t\t\t */\n\t\t\n\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting\n\t\t\t// in case that has been altered, so the default sort reflects that option\n\t\t\tif ( oInit.aaSorting === undefined ) {\n\t\t\t\tvar sorting = oSettings.aaSorting;\n\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\n\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into\n\t\t\t * account, and also will apply sorting disabled classes if disabled\n\t\t\t */\n\t\t\t_fnSortingClasses( oSettings );\n\t\t\n\t\t\tif ( features.bSort ) {\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\t\tif ( oSettings.bSorted ) {\n\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );\n\t\t\t\t\t\tvar sortedColumns = {};\n\t\t\n\t\t\t\t\t\t$.each( aSort, function (i, val) {\n\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;\n\t\t\t\t\t\t} );\n\t\t\n\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\n\t\t\t\t\t\t_fnSortAria( oSettings );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\n\t\t\t\t\t_fnSortingClasses( oSettings );\n\t\t\t\t}\n\t\t\t}, 'sc' );\n\t\t\n\t\t\n\t\t\t/*\n\t\t\t * Final init\n\t\t\t * Cache the header, body and footer as required, creating them if needed\n\t\t\t */\n\t\t\n\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\t\t\tvar captions = $this.children('caption').each( function () {\n\t\t\t\tthis._captionSide = $(this).css('caption-side');\n\t\t\t} );\n\t\t\n\t\t\tvar thead = $this.children('thead');\n\t\t\tif ( thead.length === 0 ) {\n\t\t\t\tthead = $('<thead/>').appendTo($this);\n\t\t\t}\n\t\t\toSettings.nTHead = thead[0];\n\t\t\n\t\t\tvar tbody = $this.children('tbody');\n\t\t\tif ( tbody.length === 0 ) {\n\t\t\t\ttbody = $('<tbody/>').insertAfter(thead);\n\t\t\t}\n\t\t\toSettings.nTBody = tbody[0];\n\t\t\n\t\t\tvar tfoot = $this.children('tfoot');\n\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\n\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create\n\t\t\t\t// a tfoot element for the caption element to be appended to\n\t\t\t\ttfoot = $('<tfoot/>').appendTo($this);\n\t\t\t}\n\t\t\n\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {\n\t\t\t\t$this.addClass( oClasses.sNoFooter );\n\t\t\t}\n\t\t\telse if ( tfoot.length > 0 ) {\n\t\t\t\toSettings.nTFoot = tfoot[0];\n\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\n\t\t\t}\n\t\t\n\t\t\t/* Check if there is data passing into the constructor */\n\t\t\tif ( oInit.aaData ) {\n\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ ) {\n\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\n\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax\n\t\t\t\t * source since there is no point in reading the DOM data if we are then going\n\t\t\t\t * to replace it with Ajax data\n\t\t\t\t */\n\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\n\t\t\t}\n\t\t\n\t\t\t/* Copy the data index array */\n\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\t\t\n\t\t\t/* Initialisation complete - table can be drawn */\n\t\t\toSettings.bInitialised = true;\n\t\t\n\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the\n\t\t\t * language processor)\n\t\t\t */\n\t\t\tif ( bInitHandedOff === false ) {\n\t\t\t\t_fnInitialise( oSettings );\n\t\t\t}\n\t\t};\n\t\t\n\t\t/* Must be done after everything which can be overridden by the state saving! */\n\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\n\t\t\n\t\tif ( oInit.bStateSave )\n\t\t{\n\t\t\tfeatures.bStateSave = true;\n\t\t\t_fnLoadState( oSettings, oInit, loadedInit );\n\t\t}\n\t\telse {\n\t\t\tloadedInit();\n\t\t}\n\t\t\n\t} );\n\t_that = null;\n\treturn this;\n};\n\n\n/*\n * It is useful to have variables which are scoped locally so only the\n * DataTables functions can access them and they don't leak into global space.\n * At the same time these functions are often useful over multiple files in the\n * core and API, so we list, or at least document, all variables which are used\n * by DataTables as private variables here. This also ensures that there is no\n * clashing of variable names and that they can easily referenced for reuse.\n */\n\n\n// Defined else where\n//  _selector_run\n//  _selector_opts\n//  _selector_first\n//  _selector_row_indexes\n\nvar _ext; // DataTable.ext\nvar _Api; // DataTable.Api\nvar _api_register; // DataTable.Api.register\nvar _api_registerPlural; // DataTable.Api.registerPlural\n\nvar _re_dic = {};\nvar _re_new_lines = /[\\r\\n\\u2028]/g;\nvar _re_html = /<.*?>/g;\n\n// This is not strict ISO8601 - Date.parse() is quite lax, although\n// implementations differ between browsers.\nvar _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\n\n// Escape regular expression special characters\nvar _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\n\n// https://en.wikipedia.org/wiki/Foreign_exchange_market\n// - \\u20BD - Russian ruble.\n// - \\u20a9 - South Korean Won\n// - \\u20BA - Turkish Lira\n// - \\u20B9 - Indian Rupee\n// - R - Brazil (R$) and South Africa\n// - fr - Swiss Franc\n// - kr - Swedish krona, Norwegian krone and Danish krone\n// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n// - É - Bitcoin\n// - Î - Ethereum\n//   standards as thousands separators.\nvar _re_formatted_numeric = /['\\u00A0,$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkÉÎ]/gi;\n\n\nvar _empty = function ( d ) {\n\treturn !d || d === true || d === '-' ? true : false;\n};\n\n\nvar _intVal = function ( s ) {\n\tvar integer = parseInt( s, 10 );\n\treturn !isNaN(integer) && isFinite(s) ? integer : null;\n};\n\n// Convert from a formatted number with characters other than `.` as the\n// decimal place, to a Javascript number\nvar _numToDecimal = function ( num, decimalPoint ) {\n\t// Cache created regular expressions for speed as this function is called often\n\tif ( ! _re_dic[ decimalPoint ] ) {\n\t\t_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\n\t}\n\treturn typeof num === 'string' && decimalPoint !== '.' ?\n\t\tnum.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\n\t\tnum;\n};\n\n\nvar _isNumber = function ( d, decimalPoint, formatted ) {\n\tvar type = typeof d;\n\tvar strType = type === 'string';\n\n\tif ( type === 'number' || type === 'bigint') {\n\t\treturn true;\n\t}\n\n\t// If empty return immediately so there must be a number if it is a\n\t// formatted string (this stops the string \"k\", or \"kr\", etc being detected\n\t// as a formatted number for currency\n\tif ( _empty( d ) ) {\n\t\treturn true;\n\t}\n\n\tif ( decimalPoint && strType ) {\n\t\td = _numToDecimal( d, decimalPoint );\n\t}\n\n\tif ( formatted && strType ) {\n\t\td = d.replace( _re_formatted_numeric, '' );\n\t}\n\n\treturn !isNaN( parseFloat(d) ) && isFinite( d );\n};\n\n\n// A string without HTML in it can be considered to be HTML still\nvar _isHtml = function ( d ) {\n\treturn _empty( d ) || typeof d === 'string';\n};\n\n\nvar _htmlNumeric = function ( d, decimalPoint, formatted ) {\n\tif ( _empty( d ) ) {\n\t\treturn true;\n\t}\n\n\tvar html = _isHtml( d );\n\treturn ! html ?\n\t\tnull :\n\t\t_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\n\t\t\ttrue :\n\t\t\tnull;\n};\n\n\nvar _pluck = function ( a, prop, prop2 ) {\n\tvar out = [];\n\tvar i=0, ien=a.length;\n\n\t// Could have the test in the loop for slightly smaller code, but speed\n\t// is essential here\n\tif ( prop2 !== undefined ) {\n\t\tfor ( ; i<ien ; i++ ) {\n\t\t\tif ( a[i] && a[i][ prop ] ) {\n\t\t\t\tout.push( a[i][ prop ][ prop2 ] );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor ( ; i<ien ; i++ ) {\n\t\t\tif ( a[i] ) {\n\t\t\t\tout.push( a[i][ prop ] );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn out;\n};\n\n\n// Basically the same as _pluck, but rather than looping over `a` we use `order`\n// as the indexes to pick from `a`\nvar _pluck_order = function ( a, order, prop, prop2 )\n{\n\tvar out = [];\n\tvar i=0, ien=order.length;\n\n\t// Could have the test in the loop for slightly smaller code, but speed\n\t// is essential here\n\tif ( prop2 !== undefined ) {\n\t\tfor ( ; i<ien ; i++ ) {\n\t\t\tif ( a[ order[i] ][ prop ] ) {\n\t\t\t\tout.push( a[ order[i] ][ prop ][ prop2 ] );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor ( ; i<ien ; i++ ) {\n\t\t\tout.push( a[ order[i] ][ prop ] );\n\t\t}\n\t}\n\n\treturn out;\n};\n\n\nvar _range = function ( len, start )\n{\n\tvar out = [];\n\tvar end;\n\n\tif ( start === undefined ) {\n\t\tstart = 0;\n\t\tend = len;\n\t}\n\telse {\n\t\tend = start;\n\t\tstart = len;\n\t}\n\n\tfor ( var i=start ; i<end ; i++ ) {\n\t\tout.push( i );\n\t}\n\n\treturn out;\n};\n\n\nvar _removeEmpty = function ( a )\n{\n\tvar out = [];\n\n\tfor ( var i=0, ien=a.length ; i<ien ; i++ ) {\n\t\tif ( a[i] ) { // careful - will remove all falsy values!\n\t\t\tout.push( a[i] );\n\t\t}\n\t}\n\n\treturn out;\n};\n\n\nvar _stripHtml = function ( d ) {\n\treturn d\n\t\t.replace( _re_html, '' ) // Complete tags\n\t\t.replace(/<script/i, ''); // Safety for incomplete script tag\n};\n\n\n/**\n * Determine if all values in the array are unique. This means we can short\n * cut the _unique method at the cost of a single loop. A sorted array is used\n * to easily check the values.\n *\n * @param  {array} src Source array\n * @return {boolean} true if all unique, false otherwise\n * @ignore\n */\nvar _areAllUnique = function ( src ) {\n\tif ( src.length < 2 ) {\n\t\treturn true;\n\t}\n\n\tvar sorted = src.slice().sort();\n\tvar last = sorted[0];\n\n\tfor ( var i=1, ien=sorted.length ; i<ien ; i++ ) {\n\t\tif ( sorted[i] === last ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlast = sorted[i];\n\t}\n\n\treturn true;\n};\n\n\n/**\n * Find the unique elements in a source array.\n *\n * @param  {array} src Source array\n * @return {array} Array of unique items\n * @ignore\n */\nvar _unique = function ( src )\n{\n\tif ( _areAllUnique( src ) ) {\n\t\treturn src.slice();\n\t}\n\n\t// A faster unique method is to use object keys to identify used values,\n\t// but this doesn't work with arrays or objects, which we must also\n\t// consider. See jsperf.com/compare-array-unique-versions/4 for more\n\t// information.\n\tvar\n\t\tout = [],\n\t\tval,\n\t\ti, ien=src.length,\n\t\tj, k=0;\n\n\tagain: for ( i=0 ; i<ien ; i++ ) {\n\t\tval = src[i];\n\n\t\tfor ( j=0 ; j<k ; j++ ) {\n\t\t\tif ( out[j] === val ) {\n\t\t\t\tcontinue again;\n\t\t\t}\n\t\t}\n\n\t\tout.push( val );\n\t\tk++;\n\t}\n\n\treturn out;\n};\n\n// Surprisingly this is faster than [].concat.apply\n// https://jsperf.com/flatten-an-array-loop-vs-reduce/2\nvar _flatten = function (out, val) {\n\tif (Array.isArray(val)) {\n\t\tfor (var i=0 ; i<val.length ; i++) {\n\t\t\t_flatten(out, val[i]);\n\t\t}\n\t}\n\telse {\n\t\tout.push(val);\n\t}\n  \n\treturn out;\n}\n\nvar _includes = function (search, start) {\n\tif (start === undefined) {\n\t\tstart = 0;\n\t}\n\n\treturn this.indexOf(search, start) !== -1;\t\n};\n\n// Array.isArray polyfill.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\nif (! Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\nif (! Array.prototype.includes) {\n\tArray.prototype.includes = _includes;\n}\n\n// .trim() polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\nif (!String.prototype.trim) {\n  String.prototype.trim = function () {\n    return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n  };\n}\n\nif (! String.prototype.includes) {\n\tString.prototype.includes = _includes;\n}\n\n/**\n * DataTables utility methods\n * \n * This namespace provides helper methods that DataTables uses internally to\n * create a DataTable, but which are not exclusively used only for DataTables.\n * These methods can be used by extension authors to save the duplication of\n * code.\n *\n *  @namespace\n */\nDataTable.util = {\n\t/**\n\t * Throttle the calls to a function. Arguments and context are maintained\n\t * for the throttled function.\n\t *\n\t * @param {function} fn Function to be called\n\t * @param {integer} freq Call frequency in mS\n\t * @return {function} Wrapped function\n\t */\n\tthrottle: function ( fn, freq ) {\n\t\tvar\n\t\t\tfrequency = freq !== undefined ? freq : 200,\n\t\t\tlast,\n\t\t\ttimer;\n\n\t\treturn function () {\n\t\t\tvar\n\t\t\t\tthat = this,\n\t\t\t\tnow  = +new Date(),\n\t\t\t\targs = arguments;\n\n\t\t\tif ( last && now < last + frequency ) {\n\t\t\t\tclearTimeout( timer );\n\n\t\t\t\ttimer = setTimeout( function () {\n\t\t\t\t\tlast = undefined;\n\t\t\t\t\tfn.apply( that, args );\n\t\t\t\t}, frequency );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlast = now;\n\t\t\t\tfn.apply( that, args );\n\t\t\t}\n\t\t};\n\t},\n\n\n\t/**\n\t * Escape a string such that it can be used in a regular expression\n\t *\n\t *  @param {string} val string to escape\n\t *  @returns {string} escaped string\n\t */\n\tescapeRegex: function ( val ) {\n\t\treturn val.replace( _re_escape_regex, '\\\\$1' );\n\t},\n\n\t/**\n\t * Create a function that will write to a nested object or array\n\t * @param {*} source JSON notation string\n\t * @returns Write function\n\t */\n\tset: function ( source ) {\n\t\tif ( $.isPlainObject( source ) ) {\n\t\t\t/* Unlike get, only the underscore (global) option is used for for\n\t\t\t * setting data since we don't know the type here. This is why an object\n\t\t\t * option is not documented for `mData` (which is read/write), but it is\n\t\t\t * for `mRender` which is read only.\n\t\t\t */\n\t\t\treturn DataTable.util.set( source._ );\n\t\t}\n\t\telse if ( source === null ) {\n\t\t\t// Nothing to do when the data source is null\n\t\t\treturn function () {};\n\t\t}\n\t\telse if ( typeof source === 'function' ) {\n\t\t\treturn function (data, val, meta) {\n\t\t\t\tsource( data, 'set', val, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||\n\t\t\t\t  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )\n\t\t{\n\t\t\t// Like the get, we need to get data from a nested object\n\t\t\tvar setData = function (data, val, src) {\n\t\t\t\tvar a = _fnSplitObjNotation( src ), b;\n\t\t\t\tvar aLast = a[a.length-1];\n\t\t\t\tvar arrayNotation, funcNotation, o, innerSrc;\n\t\n\t\t\t\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ ) {\n\t\t\t\t\t// Protect against prototype pollution\n\t\t\t\t\tif (a[i] === '__proto__' || a[i] === 'constructor') {\n\t\t\t\t\t\tthrow new Error('Cannot set prototype values');\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Check if we are dealing with an array notation request\n\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\t\n\t\t\t\t\tif ( arrayNotation ) {\n\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\t\t\t\t\tdata[ a[i] ] = [];\n\t\n\t\t\t\t\t\t// Get the remainder of the nested object to set so we can recurse\n\t\t\t\t\t\tb = a.slice();\n\t\t\t\t\t\tb.splice( 0, i+1 );\n\t\t\t\t\t\tinnerSrc = b.join('.');\n\t\n\t\t\t\t\t\t// Traverse each entry in the array setting the properties requested\n\t\t\t\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\t\t\t\tfor ( var j=0, jLen=val.length ; j<jLen ; j++ ) {\n\t\t\t\t\t\t\t\to = {};\n\t\t\t\t\t\t\t\tsetData( o, val[j], innerSrc );\n\t\t\t\t\t\t\t\tdata[ a[i] ].push( o );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// We've been asked to save data to an array, but it\n\t\t\t\t\t\t\t// isn't array data to be saved. Best that can be done\n\t\t\t\t\t\t\t// is to just save the value.\n\t\t\t\t\t\t\tdata[ a[i] ] = val;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// The inner call to setData has already traversed through the remainder\n\t\t\t\t\t\t// of the source and has set the data, thus we can exit here\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( funcNotation ) {\n\t\t\t\t\t\t// Function call\n\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\tdata = data[ a[i] ]( val );\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If the nested object doesn't currently exist - since we are\n\t\t\t\t\t// trying to set the value - create it\n\t\t\t\t\tif ( data[ a[i] ] === null || data[ a[i] ] === undefined ) {\n\t\t\t\t\t\tdata[ a[i] ] = {};\n\t\t\t\t\t}\n\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t}\n\t\n\t\t\t\t// Last item in the input - i.e, the actual set\n\t\t\t\tif ( aLast.match(__reFn ) ) {\n\t\t\t\t\t// Function call\n\t\t\t\t\tdata = data[ aLast.replace(__reFn, '') ]( val );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// If array notation is used, we just want to strip it and use the property name\n\t\t\t\t\t// and assign the value. If it isn't used, then we get the result we want anyway\n\t\t\t\t\tdata[ aLast.replace(__reArray, '') ] = val;\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\treturn setData( data, val, source );\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\t// Array or flat object mapping\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\tdata[source] = val;\n\t\t\t};\n\t\t}\n\t},\n\n\t/**\n\t * Create a function that will read nested objects from arrays, based on JSON notation\n\t * @param {*} source JSON notation string\n\t * @returns Value read\n\t */\n\tget: function ( source ) {\n\t\tif ( $.isPlainObject( source ) ) {\n\t\t\t// Build an object of get functions, and wrap them in a single call\n\t\t\tvar o = {};\n\t\t\t$.each( source, function (key, val) {\n\t\t\t\tif ( val ) {\n\t\t\t\t\to[key] = DataTable.util.get( val );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\tvar t = o[type] || o._;\n\t\t\t\treturn t !== undefined ?\n\t\t\t\t\tt(data, type, row, meta) :\n\t\t\t\t\tdata;\n\t\t\t};\n\t\t}\n\t\telse if ( source === null ) {\n\t\t\t// Give an empty string for rendering / sorting etc\n\t\t\treturn function (data) { // type, row and meta also passed, but not used\n\t\t\t\treturn data;\n\t\t\t};\n\t\t}\n\t\telse if ( typeof source === 'function' ) {\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\treturn source( data, type, row, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||\n\t\t\t\t  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* If there is a . in the source string then the data source is in a\n\t\t\t * nested object so we loop over the data for each level to get the next\n\t\t\t * level down. On each loop we test for undefined, and if found immediately\n\t\t\t * return. This allows entire objects to be missing and sDefaultContent to\n\t\t\t * be used if defined, rather than throwing an error\n\t\t\t */\n\t\t\tvar fetchData = function (data, type, src) {\n\t\t\t\tvar arrayNotation, funcNotation, out, innerSrc;\n\t\n\t\t\t\tif ( src !== \"\" ) {\n\t\t\t\t\tvar a = _fnSplitObjNotation( src );\n\t\n\t\t\t\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ ) {\n\t\t\t\t\t\t// Check if we are dealing with special notation\n\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\t\n\t\t\t\t\t\tif ( arrayNotation ) {\n\t\t\t\t\t\t\t// Array notation\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\n\t\t\t\t\t\t\t// Condition allows simply [] to be passed in\n\t\t\t\t\t\t\tif ( a[i] !== \"\" ) {\n\t\t\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout = [];\n\t\n\t\t\t\t\t\t\t// Get the remainder of the nested object to get\n\t\t\t\t\t\t\ta.splice( 0, i+1 );\n\t\t\t\t\t\t\tinnerSrc = a.join('.');\n\t\n\t\t\t\t\t\t\t// Traverse each entry in the array getting the properties requested\n\t\t\t\t\t\t\tif ( Array.isArray( data ) ) {\n\t\t\t\t\t\t\t\tfor ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\n\t\t\t\t\t\t\t\t\tout.push( fetchData( data[j], type, innerSrc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// If a string is given in between the array notation indicators, that\n\t\t\t\t\t\t\t// is used to join the strings together, otherwise an array is returned\n\t\t\t\t\t\t\tvar join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\n\t\t\t\t\t\t\tdata = (join===\"\") ? out : out.join(join);\n\t\n\t\t\t\t\t\t\t// The inner call to fetchData has already traversed through the remainder\n\t\t\t\t\t\t\t// of the source requested, so we exit from the loop\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( funcNotation ) {\n\t\t\t\t\t\t\t// Function call\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\t\tdata = data[ a[i] ]();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (data === null || data[ a[i] ] === null) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( data === undefined || data[ a[i] ] === undefined ) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\t\t};\n\t\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn fetchData( data, type, source );\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\t// Array or flat object mapping\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn data[source];\n\t\t\t};\n\t\t}\n\t}\n};\n\n\n\n/**\n * Create a mapping object that allows camel case parameters to be looked up\n * for their Hungarian counterparts. The mapping is stored in a private\n * parameter called `_hungarianMap` which can be accessed on the source object.\n *  @param {object} o\n *  @memberof DataTable#oApi\n */\nfunction _fnHungarianMap ( o )\n{\n\tvar\n\t\thungarian = 'a aa ai ao as b fn i m o s ',\n\t\tmatch,\n\t\tnewKey,\n\t\tmap = {};\n\n\t$.each( o, function (key, val) {\n\t\tmatch = key.match(/^([^A-Z]+?)([A-Z])/);\n\n\t\tif ( match && hungarian.indexOf(match[1]+' ') !== -1 )\n\t\t{\n\t\t\tnewKey = key.replace( match[0], match[2].toLowerCase() );\n\t\t\tmap[ newKey ] = key;\n\n\t\t\tif ( match[1] === 'o' )\n\t\t\t{\n\t\t\t\t_fnHungarianMap( o[key] );\n\t\t\t}\n\t\t}\n\t} );\n\n\to._hungarianMap = map;\n}\n\n\n/**\n * Convert from camel case parameters to Hungarian, based on a Hungarian map\n * created by _fnHungarianMap.\n *  @param {object} src The model object which holds all parameters that can be\n *    mapped.\n *  @param {object} user The object to convert from camel case to Hungarian.\n *  @param {boolean} force When set to `true`, properties which already have a\n *    Hungarian value in the `user` object will be overwritten. Otherwise they\n *    won't be.\n *  @memberof DataTable#oApi\n */\nfunction _fnCamelToHungarian ( src, user, force )\n{\n\tif ( ! src._hungarianMap ) {\n\t\t_fnHungarianMap( src );\n\t}\n\n\tvar hungarianKey;\n\n\t$.each( user, function (key, val) {\n\t\thungarianKey = src._hungarianMap[ key ];\n\n\t\tif ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\n\t\t{\n\t\t\t// For objects, we need to buzz down into the object to copy parameters\n\t\t\tif ( hungarianKey.charAt(0) === 'o' )\n\t\t\t{\n\t\t\t\t// Copy the camelCase options over to the hungarian\n\t\t\t\tif ( ! user[ hungarianKey ] ) {\n\t\t\t\t\tuser[ hungarianKey ] = {};\n\t\t\t\t}\n\t\t\t\t$.extend( true, user[hungarianKey], user[key] );\n\n\t\t\t\t_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tuser[hungarianKey] = user[ key ];\n\t\t\t}\n\t\t}\n\t} );\n}\n\n\n/**\n * Language compatibility - when certain options are given, and others aren't, we\n * need to duplicate the values over, in order to provide backwards compatibility\n * with older language files.\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnLanguageCompat( lang )\n{\n\t// Note the use of the Hungarian notation for the parameters in this method as\n\t// this is called after the mapping of camelCase to Hungarian\n\tvar defaults = DataTable.defaults.oLanguage;\n\n\t// Default mapping\n\tvar defaultDecimal = defaults.sDecimal;\n\tif ( defaultDecimal ) {\n\t\t_addNumericSort( defaultDecimal );\n\t}\n\n\tif ( lang ) {\n\t\tvar zeroRecords = lang.sZeroRecords;\n\n\t\t// Backwards compatibility - if there is no sEmptyTable given, then use the same as\n\t\t// sZeroRecords - assuming that is given.\n\t\tif ( ! lang.sEmptyTable && zeroRecords &&\n\t\t\tdefaults.sEmptyTable === \"No data available in table\" )\n\t\t{\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\n\t\t}\n\n\t\t// Likewise with loading records\n\t\tif ( ! lang.sLoadingRecords && zeroRecords &&\n\t\t\tdefaults.sLoadingRecords === \"Loading...\" )\n\t\t{\n\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\n\t\t}\n\n\t\t// Old parameter name of the thousands separator mapped onto the new\n\t\tif ( lang.sInfoThousands ) {\n\t\t\tlang.sThousands = lang.sInfoThousands;\n\t\t}\n\n\t\tvar decimal = lang.sDecimal;\n\t\tif ( decimal && defaultDecimal !== decimal ) {\n\t\t\t_addNumericSort( decimal );\n\t\t}\n\t}\n}\n\n\n/**\n * Map one parameter onto another\n *  @param {object} o Object to map\n *  @param {*} knew The new parameter name\n *  @param {*} old The old parameter name\n */\nvar _fnCompatMap = function ( o, knew, old ) {\n\tif ( o[ knew ] !== undefined ) {\n\t\to[ old ] = o[ knew ];\n\t}\n};\n\n\n/**\n * Provide backwards compatibility for the main DT options. Note that the new\n * options are mapped onto the old parameters, so this is an external interface\n * change only.\n *  @param {object} init Object to map\n */\nfunction _fnCompatOpts ( init )\n{\n\t_fnCompatMap( init, 'ordering',      'bSort' );\n\t_fnCompatMap( init, 'orderMulti',    'bSortMulti' );\n\t_fnCompatMap( init, 'orderClasses',  'bSortClasses' );\n\t_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\n\t_fnCompatMap( init, 'order',         'aaSorting' );\n\t_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\n\t_fnCompatMap( init, 'paging',        'bPaginate' );\n\t_fnCompatMap( init, 'pagingType',    'sPaginationType' );\n\t_fnCompatMap( init, 'pageLength',    'iDisplayLength' );\n\t_fnCompatMap( init, 'searching',     'bFilter' );\n\n\t// Boolean initialisation of x-scrolling\n\tif ( typeof init.sScrollX === 'boolean' ) {\n\t\tinit.sScrollX = init.sScrollX ? '100%' : '';\n\t}\n\tif ( typeof init.scrollX === 'boolean' ) {\n\t\tinit.scrollX = init.scrollX ? '100%' : '';\n\t}\n\n\t// Column search objects are in an array, so it needs to be converted\n\t// element by element\n\tvar searchCols = init.aoSearchCols;\n\n\tif ( searchCols ) {\n\t\tfor ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\n\t\t\tif ( searchCols[i] ) {\n\t\t\t\t_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * Provide backwards compatibility for column options. Note that the new options\n * are mapped onto the old parameters, so this is an external interface change\n * only.\n *  @param {object} init Object to map\n */\nfunction _fnCompatCols ( init )\n{\n\t_fnCompatMap( init, 'orderable',     'bSortable' );\n\t_fnCompatMap( init, 'orderData',     'aDataSort' );\n\t_fnCompatMap( init, 'orderSequence', 'asSorting' );\n\t_fnCompatMap( init, 'orderDataType', 'sortDataType' );\n\n\t// orderData can be given as an integer\n\tvar dataSort = init.aDataSort;\n\tif ( typeof dataSort === 'number' && ! Array.isArray( dataSort ) ) {\n\t\tinit.aDataSort = [ dataSort ];\n\t}\n}\n\n\n/**\n * Browser feature detection for capabilities, quirks\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnBrowserDetect( settings )\n{\n\t// We don't need to do this every time DataTables is constructed, the values\n\t// calculated are specific to the browser and OS configuration which we\n\t// don't expect to change between initialisations\n\tif ( ! DataTable.__browser ) {\n\t\tvar browser = {};\n\t\tDataTable.__browser = browser;\n\n\t\t// Scrolling feature / quirks detection\n\t\tvar n = $('<div/>')\n\t\t\t.css( {\n\t\t\t\tposition: 'fixed',\n\t\t\t\ttop: 0,\n\t\t\t\tleft: $(window).scrollLeft()*-1, // allow for scrolling\n\t\t\t\theight: 1,\n\t\t\t\twidth: 1,\n\t\t\t\toverflow: 'hidden'\n\t\t\t} )\n\t\t\t.append(\n\t\t\t\t$('<div/>')\n\t\t\t\t\t.css( {\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 1,\n\t\t\t\t\t\tleft: 1,\n\t\t\t\t\t\twidth: 100,\n\t\t\t\t\t\toverflow: 'scroll'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$('<div/>')\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\theight: 10\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t.appendTo( 'body' );\n\n\t\tvar outer = n.children();\n\t\tvar inner = outer.children();\n\n\t\t// Numbers below, in order, are:\n\t\t// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n\t\t//\n\t\t// IE6 XP:                           100 100 100  83\n\t\t// IE7 Vista:                        100 100 100  83\n\t\t// IE 8+ Windows:                     83  83 100  83\n\t\t// Evergreen Windows:                 83  83 100  83\n\t\t// Evergreen Mac with scrollbars:     85  85 100  85\n\t\t// Evergreen Mac without scrollbars: 100 100 100 100\n\n\t\t// Get scrollbar width\n\t\tbrowser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n\n\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to\n\t\t// include the width of the scrollbar, while other browsers ensure the inner\n\t\t// element is contained without forcing scrolling\n\t\tbrowser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\n\n\t\t// In rtl text layout, some browsers (most, but not all) will place the\n\t\t// scrollbar on the left, rather than the right.\n\t\tbrowser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\n\n\t\t// IE8- don't provide height and width for getBoundingClientRect\n\t\tbrowser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n\n\t\tn.remove();\n\t}\n\n\t$.extend( settings.oBrowser, DataTable.__browser );\n\tsettings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n}\n\n\n/**\n * Array.prototype reduce[Right] method, used for browsers which don't support\n * JS 1.6. Done this way to reduce code size, since we iterate either way\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnReduce ( that, fn, init, start, end, inc )\n{\n\tvar\n\t\ti = start,\n\t\tvalue,\n\t\tisSet = false;\n\n\tif ( init !== undefined ) {\n\t\tvalue = init;\n\t\tisSet = true;\n\t}\n\n\twhile ( i !== end ) {\n\t\tif ( ! that.hasOwnProperty(i) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalue = isSet ?\n\t\t\tfn( value, that[i], i, that ) :\n\t\t\tthat[i];\n\n\t\tisSet = true;\n\t\ti += inc;\n\t}\n\n\treturn value;\n}\n\n/**\n * Add a column to the list used for the table with default values\n *  @param {object} oSettings dataTables settings object\n *  @param {node} nTh The th element for this column\n *  @memberof DataTable#oApi\n */\nfunction _fnAddColumn( oSettings, nTh )\n{\n\t// Add column to aoColumns array\n\tvar oDefaults = DataTable.defaults.column;\n\tvar iCol = oSettings.aoColumns.length;\n\tvar oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\n\t\t\"nTh\": nTh ? nTh : document.createElement('th'),\n\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\n\t\t\"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n\t\t\"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n\t\tidx: iCol\n\t} );\n\toSettings.aoColumns.push( oCol );\n\n\t// Add search object for column specific search. Note that the `searchCols[ iCol ]`\n\t// passed into extend can be undefined. This allows the user to give a default\n\t// with only some of the parameters defined, and also not give a default\n\tvar searchCols = oSettings.aoPreSearchCols;\n\tsearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\n\n\t// Use the default column options function to initialise classes etc\n\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );\n}\n\n\n/**\n * Apply options for a column\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iCol column index to consider\n *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n *  @memberof DataTable#oApi\n */\nfunction _fnColumnOptions( oSettings, iCol, oOptions )\n{\n\tvar oCol = oSettings.aoColumns[ iCol ];\n\tvar oClasses = oSettings.oClasses;\n\tvar th = $(oCol.nTh);\n\n\t// Try to get width information from the DOM. We can't get it from CSS\n\t// as we'd need to parse the CSS stylesheet. `width` option can override\n\tif ( ! oCol.sWidthOrig ) {\n\t\t// Width attribute\n\t\toCol.sWidthOrig = th.attr('width') || null;\n\n\t\t// Style attribute\n\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\t\tif ( t ) {\n\t\t\toCol.sWidthOrig = t[1];\n\t\t}\n\t}\n\n\t/* User specified column options */\n\tif ( oOptions !== undefined && oOptions !== null )\n\t{\n\t\t// Backwards compatibility\n\t\t_fnCompatCols( oOptions );\n\n\t\t// Map camel case parameters to their Hungarian counterparts\n\t\t_fnCamelToHungarian( DataTable.defaults.column, oOptions, true );\n\n\t\t/* Backwards compatibility for mDataProp */\n\t\tif ( oOptions.mDataProp !== undefined && !oOptions.mData )\n\t\t{\n\t\t\toOptions.mData = oOptions.mDataProp;\n\t\t}\n\n\t\tif ( oOptions.sType )\n\t\t{\n\t\t\toCol._sManualType = oOptions.sType;\n\t\t}\n\n\t\t// `class` is a reserved word in Javascript, so we need to provide\n\t\t// the ability to use a valid name for the camel case input\n\t\tif ( oOptions.className && ! oOptions.sClass )\n\t\t{\n\t\t\toOptions.sClass = oOptions.className;\n\t\t}\n\t\tif ( oOptions.sClass ) {\n\t\t\tth.addClass( oOptions.sClass );\n\t\t}\n\n\t\tvar origClass = oCol.sClass;\n\n\t\t$.extend( oCol, oOptions );\n\t\t_fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\n\n\t\t// Merge class from previously defined classes with this one, rather than just\n\t\t// overwriting it in the extend above\n\t\tif (origClass !== oCol.sClass) {\n\t\t\toCol.sClass = origClass + ' ' + oCol.sClass;\n\t\t}\n\n\t\t/* iDataSort to be applied (backwards compatibility), but aDataSort will take\n\t\t * priority if defined\n\t\t */\n\t\tif ( oOptions.iDataSort !== undefined )\n\t\t{\n\t\t\toCol.aDataSort = [ oOptions.iDataSort ];\n\t\t}\n\t\t_fnMap( oCol, oOptions, \"aDataSort\" );\n\n\t\t// Fall back to the aria-label attribute on the table header if no ariaTitle is\n\t\t// provided.\n\t\tif (! oCol.ariaTitle) {\n\t\t\toCol.ariaTitle = th.attr(\"aria-label\");\n\t\t}\n\t}\n\n\t/* Cache the data get and set functions for speed */\n\tvar mDataSrc = oCol.mData;\n\tvar mData = _fnGetObjectDataFn( mDataSrc );\n\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\n\n\tvar attrTest = function( src ) {\n\t\treturn typeof src === 'string' && src.indexOf('@') !== -1;\n\t};\n\toCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\n\t\tattrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n\t);\n\toCol._setter = null;\n\n\toCol.fnGetData = function (rowData, type, meta) {\n\t\tvar innerData = mData( rowData, type, undefined, meta );\n\n\t\treturn mRender && type ?\n\t\t\tmRender( innerData, type, rowData, meta ) :\n\t\t\tinnerData;\n\t};\n\toCol.fnSetData = function ( rowData, val, meta ) {\n\t\treturn _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\n\t};\n\n\t// Indicate if DataTables should read DOM data as an object or array\n\t// Used in _fnGetRowElements\n\tif ( typeof mDataSrc !== 'number' && ! oCol._isArrayHost ) {\n\t\toSettings._rowReadObject = true;\n\t}\n\n\t/* Feature sorting overrides column specific when off */\n\tif ( !oSettings.oFeatures.bSort )\n\t{\n\t\toCol.bSortable = false;\n\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\n\t}\n\n\t/* Check that the class assignment is correct for sorting */\n\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\tif ( !oCol.bSortable || (!bAsc && !bDesc) )\n\t{\n\t\toCol.sSortingClass = oClasses.sSortableNone;\n\t\toCol.sSortingClassJUI = \"\";\n\t}\n\telse if ( bAsc && !bDesc )\n\t{\n\t\toCol.sSortingClass = oClasses.sSortableAsc;\n\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n\t}\n\telse if ( !bAsc && bDesc )\n\t{\n\t\toCol.sSortingClass = oClasses.sSortableDesc;\n\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n\t}\n\telse\n\t{\n\t\toCol.sSortingClass = oClasses.sSortable;\n\t\toCol.sSortingClassJUI = oClasses.sSortJUI;\n\t}\n}\n\n\n/**\n * Adjust the table column widths for new data. Note: you would probably want to\n * do a redraw after calling this function!\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnAdjustColumnSizing ( settings )\n{\n\t/* Not interested in doing column width calculation if auto-width is disabled */\n\tif ( settings.oFeatures.bAutoWidth !== false )\n\t{\n\t\tvar columns = settings.aoColumns;\n\n\t\t_fnCalculateColumnWidths( settings );\n\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;\n\t\t}\n\t}\n\n\tvar scroll = settings.oScroll;\n\tif ( scroll.sY !== '' || scroll.sX !== '')\n\t{\n\t\t_fnScrollDraw( settings );\n\t}\n\n\t_fnCallbackFire( settings, null, 'column-sizing', [settings] );\n}\n\n\n/**\n * Convert the index of a visible column to the index in the data array (take account\n * of hidden columns)\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iMatch Visible column index to lookup\n *  @returns {int} i the data index\n *  @memberof DataTable#oApi\n */\nfunction _fnVisibleToColumnIndex( oSettings, iMatch )\n{\n\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\n\treturn typeof aiVis[iMatch] === 'number' ?\n\t\taiVis[iMatch] :\n\t\tnull;\n}\n\n\n/**\n * Convert the index of an index in the data array and convert it to the visible\n *   column index (take account of hidden columns)\n *  @param {int} iMatch Column index to lookup\n *  @param {object} oSettings dataTables settings object\n *  @returns {int} i the data index\n *  @memberof DataTable#oApi\n */\nfunction _fnColumnIndexToVisible( oSettings, iMatch )\n{\n\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\tvar iPos = $.inArray( iMatch, aiVis );\n\n\treturn iPos !== -1 ? iPos : null;\n}\n\n\n/**\n * Get the number of visible columns\n *  @param {object} oSettings dataTables settings object\n *  @returns {int} i the number of visible columns\n *  @memberof DataTable#oApi\n */\nfunction _fnVisbleColumns( oSettings )\n{\n\tvar vis = 0;\n\n\t// No reduce in IE8, use a loop for now\n\t$.each( oSettings.aoColumns, function ( i, col ) {\n\t\tif ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\n\t\t\tvis++;\n\t\t}\n\t} );\n\n\treturn vis;\n}\n\n\n/**\n * Get an array of column indexes that match a given property\n *  @param {object} oSettings dataTables settings object\n *  @param {string} sParam Parameter in aoColumns to look for - typically\n *    bVisible or bSearchable\n *  @returns {array} Array of indexes with matched properties\n *  @memberof DataTable#oApi\n */\nfunction _fnGetColumns( oSettings, sParam )\n{\n\tvar a = [];\n\n\t$.map( oSettings.aoColumns, function(val, i) {\n\t\tif ( val[sParam] ) {\n\t\t\ta.push( i );\n\t\t}\n\t} );\n\n\treturn a;\n}\n\n\n/**\n * Calculate the 'type' of a column\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnColumnTypes ( settings )\n{\n\tvar columns = settings.aoColumns;\n\tvar data = settings.aoData;\n\tvar types = DataTable.ext.type.detect;\n\tvar i, ien, j, jen, k, ken;\n\tvar col, cell, detectedType, cache;\n\n\t// For each column, spin over the \n\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\tcol = columns[i];\n\t\tcache = [];\n\n\t\tif ( ! col.sType && col._sManualType ) {\n\t\t\tcol.sType = col._sManualType;\n\t\t}\n\t\telse if ( ! col.sType ) {\n\t\t\tfor ( j=0, jen=types.length ; j<jen ; j++ ) {\n\t\t\t\tfor ( k=0, ken=data.length ; k<ken ; k++ ) {\n\t\t\t\t\t// Use a cache array so we only need to get the type data\n\t\t\t\t\t// from the formatter once (when using multiple detectors)\n\t\t\t\t\tif ( cache[k] === undefined ) {\n\t\t\t\t\t\tcache[k] = _fnGetCellData( settings, k, i, 'type' );\n\t\t\t\t\t}\n\n\t\t\t\t\tdetectedType = types[j]( cache[k], settings );\n\n\t\t\t\t\t// If null, then this type can't apply to this column, so\n\t\t\t\t\t// rather than testing all cells, break out. There is an\n\t\t\t\t\t// exception for the last type which is `html`. We need to\n\t\t\t\t\t// scan all rows since it is possible to mix string and HTML\n\t\t\t\t\t// types\n\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only a single match is needed for html type since it is\n\t\t\t\t\t// bottom of the pile and very similar to string - but it\n\t\t\t\t\t// must not be empty\n\t\t\t\t\tif ( detectedType === 'html' && ! _empty(cache[k]) ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Type is valid for all data points in the column - use this\n\t\t\t\t// type\n\t\t\t\tif ( detectedType ) {\n\t\t\t\t\tcol.sType = detectedType;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fall back - if no type was detected, always use string\n\t\t\tif ( ! col.sType ) {\n\t\t\t\tcol.sType = 'string';\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * Take the column definitions and static columns arrays and calculate how\n * they relate to column indexes. The callback function will then apply the\n * definition found for a column to a suitable configuration object.\n *  @param {object} oSettings dataTables settings object\n *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n *  @param {array} aoCols The aoColumns array that defines columns individually\n *  @param {function} fn Callback function - takes two parameters, the calculated\n *    column index and the definition for that column.\n *  @memberof DataTable#oApi\n */\nfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\n{\n\tvar i, iLen, j, jLen, k, kLen, def;\n\tvar columns = oSettings.aoColumns;\n\n\t// Column definitions with aTargets\n\tif ( aoColDefs )\n\t{\n\t\t/* Loop over the definitions array - loop in reverse so first instance has priority */\n\t\tfor ( i=aoColDefs.length-1 ; i>=0 ; i-- )\n\t\t{\n\t\t\tdef = aoColDefs[i];\n\n\t\t\t/* Each definition can target multiple columns, as it is an array */\n\t\t\tvar aTargets = def.target !== undefined\n\t\t\t\t? def.target\n\t\t\t\t: def.targets !== undefined\n\t\t\t\t\t? def.targets\n\t\t\t\t\t: def.aTargets;\n\n\t\t\tif ( ! Array.isArray( aTargets ) )\n\t\t\t{\n\t\t\t\taTargets = [ aTargets ];\n\t\t\t}\n\n\t\t\tfor ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\n\t\t\t\t{\n\t\t\t\t\t/* Add columns that we don't yet know about */\n\t\t\t\t\twhile( columns.length <= aTargets[j] )\n\t\t\t\t\t{\n\t\t\t\t\t\t_fnAddColumn( oSettings );\n\t\t\t\t\t}\n\n\t\t\t\t\t/* Integer, basic index */\n\t\t\t\t\tfn( aTargets[j], def );\n\t\t\t\t}\n\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\n\t\t\t\t{\n\t\t\t\t\t/* Negative integer, right to left column counting */\n\t\t\t\t\tfn( columns.length+aTargets[j], def );\n\t\t\t\t}\n\t\t\t\telse if ( typeof aTargets[j] === 'string' )\n\t\t\t\t{\n\t\t\t\t\t/* Class name matching on TH element */\n\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||\n\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfn( k, def );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Statically defined columns array\n\tif ( aoCols )\n\t{\n\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tfn( i, aoCols[i] );\n\t\t}\n\t}\n}\n\n/**\n * Add a data array to the table, creating DOM node etc. This is the parallel to\n * _fnGatherData, but for adding rows from a Javascript source, rather than a\n * DOM source.\n *  @param {object} oSettings dataTables settings object\n *  @param {array} aData data array to be added\n *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n *    DataTables will create a row automatically\n *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n *    if nTr is.\n *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n *  @memberof DataTable#oApi\n */\nfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )\n{\n\t/* Create the object for storing information about this new row */\n\tvar iRow = oSettings.aoData.length;\n\tvar oData = $.extend( true, {}, DataTable.models.oRow, {\n\t\tsrc: nTr ? 'dom' : 'data',\n\t\tidx: iRow\n\t} );\n\n\toData._aData = aDataIn;\n\toSettings.aoData.push( oData );\n\n\t/* Create the cells */\n\tvar nTd, sThisType;\n\tvar columns = oSettings.aoColumns;\n\n\t// Invalidate the column types as the new data needs to be revalidated\n\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t{\n\t\tcolumns[i].sType = null;\n\t}\n\n\t/* Add to the display array */\n\toSettings.aiDisplayMaster.push( iRow );\n\n\tvar id = oSettings.rowIdFn( aDataIn );\n\tif ( id !== undefined ) {\n\t\toSettings.aIds[ id ] = oData;\n\t}\n\n\t/* Create the DOM information, or register it if already present */\n\tif ( nTr || ! oSettings.oFeatures.bDeferRender )\n\t{\n\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );\n\t}\n\n\treturn iRow;\n}\n\n\n/**\n * Add one or more TR elements to the table. Generally we'd expect to\n * use this for reading data from a DOM sourced table, but it could be\n * used for an TR element. Note that if a TR is given, it is used (i.e.\n * it is not cloned).\n *  @param {object} settings dataTables settings object\n *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n *  @returns {array} Array of indexes for the added rows\n *  @memberof DataTable#oApi\n */\nfunction _fnAddTr( settings, trs )\n{\n\tvar row;\n\n\t// Allow an individual node to be passed in\n\tif ( ! (trs instanceof $) ) {\n\t\ttrs = $(trs);\n\t}\n\n\treturn trs.map( function (i, el) {\n\t\trow = _fnGetRowElements( settings, el );\n\t\treturn _fnAddData( settings, row.data, el, row.cells );\n\t} );\n}\n\n\n/**\n * Take a TR element and convert it to an index in aoData\n *  @param {object} oSettings dataTables settings object\n *  @param {node} n the TR element to find\n *  @returns {int} index if the node is found, null if not\n *  @memberof DataTable#oApi\n */\nfunction _fnNodeToDataIndex( oSettings, n )\n{\n\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\n}\n\n\n/**\n * Take a TD element and convert it into a column data index (not the visible index)\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iRow The row number the TD/TH can be found in\n *  @param {node} n The TD/TH element to find\n *  @returns {int} index if the node is found, -1 if not\n *  @memberof DataTable#oApi\n */\nfunction _fnNodeToColumnIndex( oSettings, iRow, n )\n{\n\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );\n}\n\n\n/**\n * Get the data for a given cell from the internal cache, taking into account data mapping\n *  @param {object} settings dataTables settings object\n *  @param {int} rowIdx aoData row id\n *  @param {int} colIdx Column index\n *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')\n *  @returns {*} Cell data\n *  @memberof DataTable#oApi\n */\nfunction _fnGetCellData( settings, rowIdx, colIdx, type )\n{\n\tif (type === 'search') {\n\t\ttype = 'filter';\n\t}\n\telse if (type === 'order') {\n\t\ttype = 'sort';\n\t}\n\n\tvar draw           = settings.iDraw;\n\tvar col            = settings.aoColumns[colIdx];\n\tvar rowData        = settings.aoData[rowIdx]._aData;\n\tvar defaultContent = col.sDefaultContent;\n\tvar cellData       = col.fnGetData( rowData, type, {\n\t\tsettings: settings,\n\t\trow:      rowIdx,\n\t\tcol:      colIdx\n\t} );\n\n\tif ( cellData === undefined ) {\n\t\tif ( settings.iDrawError != draw && defaultContent === null ) {\n\t\t\t_fnLog( settings, 0, \"Requested unknown parameter \"+\n\t\t\t\t(typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\n\t\t\t\t\" for row \"+rowIdx+\", column \"+colIdx, 4 );\n\t\t\tsettings.iDrawError = draw;\n\t\t}\n\t\treturn defaultContent;\n\t}\n\n\t// When the data source is null and a specific data type is requested (i.e.\n\t// not the original data), we can use default column data\n\tif ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\n\t\tcellData = defaultContent;\n\t}\n\telse if ( typeof cellData === 'function' ) {\n\t\t// If the data source is a function, then we run it and use the return,\n\t\t// executing in the scope of the data object (for instances)\n\t\treturn cellData.call( rowData );\n\t}\n\n\tif ( cellData === null && type === 'display' ) {\n\t\treturn '';\n\t}\n\n\tif ( type === 'filter' ) {\n\t\tvar fomatters = DataTable.ext.type.search;\n\n\t\tif ( fomatters[ col.sType ] ) {\n\t\t\tcellData = fomatters[ col.sType ]( cellData );\n\t\t}\n\t}\n\n\treturn cellData;\n}\n\n\n/**\n * Set the value for a specific cell, into the internal data cache\n *  @param {object} settings dataTables settings object\n *  @param {int} rowIdx aoData row id\n *  @param {int} colIdx Column index\n *  @param {*} val Value to set\n *  @memberof DataTable#oApi\n */\nfunction _fnSetCellData( settings, rowIdx, colIdx, val )\n{\n\tvar col     = settings.aoColumns[colIdx];\n\tvar rowData = settings.aoData[rowIdx]._aData;\n\n\tcol.fnSetData( rowData, val, {\n\t\tsettings: settings,\n\t\trow:      rowIdx,\n\t\tcol:      colIdx\n\t}  );\n}\n\n\n// Private variable that is used to match action syntax in the data property object\nvar __reArray = /\\[.*?\\]$/;\nvar __reFn = /\\(\\)$/;\n\n/**\n * Split string on periods, taking into account escaped periods\n * @param  {string} str String to split\n * @return {array} Split string\n */\nfunction _fnSplitObjNotation( str )\n{\n\treturn $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\n\t\treturn s.replace(/\\\\\\./g, '.');\n\t} );\n}\n\n\n/**\n * Return a function that can be used to get data from a source object, taking\n * into account the ability to use nested objects as a source\n *  @param {string|int|function} mSource The data source for the object\n *  @returns {function} Data get function\n *  @memberof DataTable#oApi\n */\nvar _fnGetObjectDataFn = DataTable.util.get;\n\n\n/**\n * Return a function that can be used to set data from a source object, taking\n * into account the ability to use nested objects as a source\n *  @param {string|int|function} mSource The data source for the object\n *  @returns {function} Data set function\n *  @memberof DataTable#oApi\n */\nvar _fnSetObjectDataFn = DataTable.util.set;\n\n\n/**\n * Return an array with the full table data\n *  @param {object} oSettings dataTables settings object\n *  @returns array {array} aData Master data array\n *  @memberof DataTable#oApi\n */\nfunction _fnGetDataMaster ( settings )\n{\n\treturn _pluck( settings.aoData, '_aData' );\n}\n\n\n/**\n * Nuke the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnClearTable( settings )\n{\n\tsettings.aoData.length = 0;\n\tsettings.aiDisplayMaster.length = 0;\n\tsettings.aiDisplay.length = 0;\n\tsettings.aIds = {};\n}\n\n\n /**\n * Take an array of integers (index array) and remove a target integer (value - not\n * the key!)\n *  @param {array} a Index array to target\n *  @param {int} iTarget value to find\n *  @memberof DataTable#oApi\n */\nfunction _fnDeleteIndex( a, iTarget, splice )\n{\n\tvar iTargetIndex = -1;\n\n\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t{\n\t\tif ( a[i] == iTarget )\n\t\t{\n\t\t\tiTargetIndex = i;\n\t\t}\n\t\telse if ( a[i] > iTarget )\n\t\t{\n\t\t\ta[i]--;\n\t\t}\n\t}\n\n\tif ( iTargetIndex != -1 && splice === undefined )\n\t{\n\t\ta.splice( iTargetIndex, 1 );\n\t}\n}\n\n\n/**\n * Mark cached data as invalid such that a re-read of the data will occur when\n * the cached data is next requested. Also update from the data source object.\n *\n * @param {object} settings DataTables settings object\n * @param {int}    rowIdx   Row index to invalidate\n * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n *     or 'data'\n * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n *     row will be invalidated\n * @memberof DataTable#oApi\n *\n * @todo For the modularisation of v1.11 this will need to become a callback, so\n *   the sort and filter methods can subscribe to it. That will required\n *   initialisation options for sorting, which is why it is not already baked in\n */\nfunction _fnInvalidate( settings, rowIdx, src, colIdx )\n{\n\tvar row = settings.aoData[ rowIdx ];\n\tvar i, ien;\n\tvar cellWrite = function ( cell, col ) {\n\t\t// This is very frustrating, but in IE if you just write directly\n\t\t// to innerHTML, and elements that are overwritten are GC'ed,\n\t\t// even if there is a reference to them elsewhere\n\t\twhile ( cell.childNodes.length ) {\n\t\t\tcell.removeChild( cell.firstChild );\n\t\t}\n\n\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\n\t};\n\n\t// Are we reading last data from DOM or the data object?\n\tif ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\n\t\t// Read the data from the DOM\n\t\trow._aData = _fnGetRowElements(\n\t\t\t\tsettings, row, colIdx, colIdx === undefined ? undefined : row._aData\n\t\t\t)\n\t\t\t.data;\n\t}\n\telse {\n\t\t// Reading from data object, update the DOM\n\t\tvar cells = row.anCells;\n\n\t\tif ( cells ) {\n\t\t\tif ( colIdx !== undefined ) {\n\t\t\t\tcellWrite( cells[colIdx], colIdx );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\t\tcellWrite( cells[i], i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// For both row and cell invalidation, the cached data for sorting and\n\t// filtering is nulled out\n\trow._aSortData = null;\n\trow._aFilterData = null;\n\n\t// Invalidate the type for a specific column (if given) or all columns since\n\t// the data might have changed\n\tvar cols = settings.aoColumns;\n\tif ( colIdx !== undefined ) {\n\t\tcols[ colIdx ].sType = null;\n\t}\n\telse {\n\t\tfor ( i=0, ien=cols.length ; i<ien ; i++ ) {\n\t\t\tcols[i].sType = null;\n\t\t}\n\n\t\t// Update DataTables special `DT_*` attributes for the row\n\t\t_fnRowAttributes( settings, row );\n\t}\n}\n\n\n/**\n * Build a data source object from an HTML row, reading the contents of the\n * cells that are in the row.\n *\n * @param {object} settings DataTables settings object\n * @param {node|object} TR element from which to read data or existing row\n *   object from which to re-read the data from the cells\n * @param {int} [colIdx] Optional column index\n * @param {array|object} [d] Data source object. If `colIdx` is given then this\n *   parameter should also be given and will be used to write the data into.\n *   Only the column in question will be written\n * @returns {object} Object with two parameters: `data` the data read, in\n *   document order, and `cells` and array of nodes (they can be useful to the\n *   caller, so rather than needing a second traversal to get them, just return\n *   them from here).\n * @memberof DataTable#oApi\n */\nfunction _fnGetRowElements( settings, row, colIdx, d )\n{\n\tvar\n\t\ttds = [],\n\t\ttd = row.firstChild,\n\t\tname, col, o, i=0, contents,\n\t\tcolumns = settings.aoColumns,\n\t\tobjectRead = settings._rowReadObject;\n\n\t// Allow the data object to be passed in, or construct\n\td = d !== undefined ?\n\t\td :\n\t\tobjectRead ?\n\t\t\t{} :\n\t\t\t[];\n\n\tvar attr = function ( str, td  ) {\n\t\tif ( typeof str === 'string' ) {\n\t\t\tvar idx = str.indexOf('@');\n\n\t\t\tif ( idx !== -1 ) {\n\t\t\t\tvar attr = str.substring( idx+1 );\n\t\t\t\tvar setter = _fnSetObjectDataFn( str );\n\t\t\t\tsetter( d, td.getAttribute( attr ) );\n\t\t\t}\n\t\t}\n\t};\n\n\t// Read data from a cell and store into the data object\n\tvar cellProcess = function ( cell ) {\n\t\tif ( colIdx === undefined || colIdx === i ) {\n\t\t\tcol = columns[i];\n\t\t\tcontents = (cell.innerHTML).trim();\n\n\t\t\tif ( col && col._bAttrSrc ) {\n\t\t\t\tvar setter = _fnSetObjectDataFn( col.mData._ );\n\t\t\t\tsetter( d, contents );\n\n\t\t\t\tattr( col.mData.sort, cell );\n\t\t\t\tattr( col.mData.type, cell );\n\t\t\t\tattr( col.mData.filter, cell );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Depending on the `data` option for the columns the data can\n\t\t\t\t// be read to either an object or an array.\n\t\t\t\tif ( objectRead ) {\n\t\t\t\t\tif ( ! col._setter ) {\n\t\t\t\t\t\t// Cache the setter function\n\t\t\t\t\t\tcol._setter = _fnSetObjectDataFn( col.mData );\n\t\t\t\t\t}\n\t\t\t\t\tcol._setter( d, contents );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\td[i] = contents;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ti++;\n\t};\n\n\tif ( td ) {\n\t\t// `tr` element was passed in\n\t\twhile ( td ) {\n\t\t\tname = td.nodeName.toUpperCase();\n\n\t\t\tif ( name == \"TD\" || name == \"TH\" ) {\n\t\t\t\tcellProcess( td );\n\t\t\t\ttds.push( td );\n\t\t\t}\n\n\t\t\ttd = td.nextSibling;\n\t\t}\n\t}\n\telse {\n\t\t// Existing row object passed in\n\t\ttds = row.anCells;\n\n\t\tfor ( var j=0, jen=tds.length ; j<jen ; j++ ) {\n\t\t\tcellProcess( tds[j] );\n\t\t}\n\t}\n\n\t// Read the ID from the DOM if present\n\tvar rowNode = row.firstChild ? row : row.nTr;\n\n\tif ( rowNode ) {\n\t\tvar id = rowNode.getAttribute( 'id' );\n\n\t\tif ( id ) {\n\t\t\t_fnSetObjectDataFn( settings.rowId )( d, id );\n\t\t}\n\t}\n\n\treturn {\n\t\tdata: d,\n\t\tcells: tds\n\t};\n}\n/**\n * Create a new TR element (and it's TD children) for a row\n *  @param {object} oSettings dataTables settings object\n *  @param {int} iRow Row to consider\n *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n *    DataTables will create a row automatically\n *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n *    if nTr is.\n *  @memberof DataTable#oApi\n */\nfunction _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\n{\n\tvar\n\t\trow = oSettings.aoData[iRow],\n\t\trowData = row._aData,\n\t\tcells = [],\n\t\tnTr, nTd, oCol,\n\t\ti, iLen, create;\n\n\tif ( row.nTr === null )\n\t{\n\t\tnTr = nTrIn || document.createElement('tr');\n\n\t\trow.nTr = nTr;\n\t\trow.anCells = cells;\n\n\t\t/* Use a private property on the node to allow reserve mapping from the node\n\t\t * to the aoData array for fast look up\n\t\t */\n\t\tnTr._DT_RowIndex = iRow;\n\n\t\t/* Special parameters can be given by the data source to be used on the row */\n\t\t_fnRowAttributes( oSettings, row );\n\n\t\t/* Process each column */\n\t\tfor ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\toCol = oSettings.aoColumns[i];\n\t\t\tcreate = nTrIn ? false : true;\n\n\t\t\tnTd = create ? document.createElement( oCol.sCellType ) : anTds[i];\n\n\t\t\tif (! nTd) {\n\t\t\t\t_fnLog( oSettings, 0, 'Incorrect column count', 18 );\n\t\t\t}\n\n\t\t\tnTd._DT_CellIndex = {\n\t\t\t\trow: iRow,\n\t\t\t\tcolumn: i\n\t\t\t};\n\t\t\t\n\t\t\tcells.push( nTd );\n\n\t\t\t// Need to create the HTML if new, or if a rendering function is defined\n\t\t\tif ( create || ((oCol.mRender || oCol.mData !== i) &&\n\t\t\t\t (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\n\t\t\t)) {\n\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\n\t\t\t}\n\n\t\t\t/* Add user defined class */\n\t\t\tif ( oCol.sClass )\n\t\t\t{\n\t\t\t\tnTd.className += ' '+oCol.sClass;\n\t\t\t}\n\n\t\t\t// Visibility - add or remove as required\n\t\t\tif ( oCol.bVisible && ! nTrIn )\n\t\t\t{\n\t\t\t\tnTr.appendChild( nTd );\n\t\t\t}\n\t\t\telse if ( ! oCol.bVisible && nTrIn )\n\t\t\t{\n\t\t\t\tnTd.parentNode.removeChild( nTd );\n\t\t\t}\n\n\t\t\tif ( oCol.fnCreatedCell )\n\t\t\t{\n\t\t\t\toCol.fnCreatedCell.call( oSettings.oInstance,\n\t\t\t\t\tnTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );\n\t}\n}\n\n\n/**\n * Add attributes to a row based on the special `DT_*` parameters in a data\n * source object.\n *  @param {object} settings DataTables settings object\n *  @param {object} DataTables row object for the row to be modified\n *  @memberof DataTable#oApi\n */\nfunction _fnRowAttributes( settings, row )\n{\n\tvar tr = row.nTr;\n\tvar data = row._aData;\n\n\tif ( tr ) {\n\t\tvar id = settings.rowIdFn( data );\n\n\t\tif ( id ) {\n\t\t\ttr.id = id;\n\t\t}\n\n\t\tif ( data.DT_RowClass ) {\n\t\t\t// Remove any classes added by DT_RowClass before\n\t\t\tvar a = data.DT_RowClass.split(' ');\n\t\t\trow.__rowc = row.__rowc ?\n\t\t\t\t_unique( row.__rowc.concat( a ) ) :\n\t\t\t\ta;\n\n\t\t\t$(tr)\n\t\t\t\t.removeClass( row.__rowc.join(' ') )\n\t\t\t\t.addClass( data.DT_RowClass );\n\t\t}\n\n\t\tif ( data.DT_RowAttr ) {\n\t\t\t$(tr).attr( data.DT_RowAttr );\n\t\t}\n\n\t\tif ( data.DT_RowData ) {\n\t\t\t$(tr).data( data.DT_RowData );\n\t\t}\n\t}\n}\n\n\n/**\n * Create the HTML header for the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnBuildHead( oSettings )\n{\n\tvar i, ien, cell, row, column;\n\tvar thead = oSettings.nTHead;\n\tvar tfoot = oSettings.nTFoot;\n\tvar createHeader = $('th, td', thead).length === 0;\n\tvar classes = oSettings.oClasses;\n\tvar columns = oSettings.aoColumns;\n\n\tif ( createHeader ) {\n\t\trow = $('<tr/>').appendTo( thead );\n\t}\n\n\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\tcolumn = columns[i];\n\t\tcell = $( column.nTh ).addClass( column.sClass );\n\n\t\tif ( createHeader ) {\n\t\t\tcell.appendTo( row );\n\t\t}\n\n\t\t// 1.11 move into sorting\n\t\tif ( oSettings.oFeatures.bSort ) {\n\t\t\tcell.addClass( column.sSortingClass );\n\n\t\t\tif ( column.bSortable !== false ) {\n\t\t\t\tcell\n\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )\n\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );\n\n\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );\n\t\t\t}\n\t\t}\n\n\t\tif ( column.sTitle != cell[0].innerHTML ) {\n\t\t\tcell.html( column.sTitle );\n\t\t}\n\n\t\t_fnRenderer( oSettings, 'header' )(\n\t\t\toSettings, cell, column, classes\n\t\t);\n\t}\n\n\tif ( createHeader ) {\n\t\t_fnDetectHeader( oSettings.aoHeader, thead );\n\t}\n\n\t/* Deal with the footer - add classes if required */\n\t$(thead).children('tr').children('th, td').addClass( classes.sHeaderTH );\n\t$(tfoot).children('tr').children('th, td').addClass( classes.sFooterTH );\n\n\t// Cache the footer cells. Note that we only take the cells from the first\n\t// row in the footer. If there is more than one row the user wants to\n\t// interact with, they need to use the table().foot() method. Note also this\n\t// allows cells to be used for multiple columns using colspan\n\tif ( tfoot !== null ) {\n\t\tvar cells = oSettings.aoFooter[0];\n\n\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\tcolumn = columns[i];\n\n\t\t\tif (column) {\n\t\t\t\tcolumn.nTf = cells[i].cell;\n\t\n\t\t\t\tif ( column.sClass ) {\n\t\t\t\t\t$(column.nTf).addClass( column.sClass );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnLog( oSettings, 0, 'Incorrect column count', 18 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * Draw the header (or footer) element based on the column visibility states. The\n * methodology here is to use the layout array from _fnDetectHeader, modified for\n * the instantaneous column visibility, to construct the new layout. The grid is\n * traversed over cell at a time in a rows x columns grid fashion, although each\n * cell insert can cover multiple elements in the grid - which is tracks using the\n * aApplied array. Cell inserts in the grid will only occur where there isn't\n * already a cell in that position.\n *  @param {object} oSettings dataTables settings object\n *  @param array {objects} aoSource Layout array from _fnDetectHeader\n *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n *  @memberof DataTable#oApi\n */\nfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )\n{\n\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;\n\tvar aoLocal = [];\n\tvar aApplied = [];\n\tvar iColumns = oSettings.aoColumns.length;\n\tvar iRowspan, iColspan;\n\n\tif ( ! aoSource )\n\t{\n\t\treturn;\n\t}\n\n\tif (  bIncludeHidden === undefined )\n\t{\n\t\tbIncludeHidden = false;\n\t}\n\n\t/* Make a copy of the master layout array, but without the visible columns in it */\n\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\n\t{\n\t\taoLocal[i] = aoSource[i].slice();\n\t\taoLocal[i].nTr = aoSource[i].nTr;\n\n\t\t/* Remove any columns which are currently hidden */\n\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )\n\t\t{\n\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\n\t\t\t{\n\t\t\t\taoLocal[i].splice( j, 1 );\n\t\t\t}\n\t\t}\n\n\t\t/* Prep the applied array - it needs an element for each row */\n\t\taApplied.push( [] );\n\t}\n\n\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\n\t{\n\t\tnLocalTr = aoLocal[i].nTr;\n\n\t\t/* All cells are going to be replaced, so empty out the row */\n\t\tif ( nLocalTr )\n\t\t{\n\t\t\twhile( (n = nLocalTr.firstChild) )\n\t\t\t{\n\t\t\t\tnLocalTr.removeChild( n );\n\t\t\t}\n\t\t}\n\n\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\n\t\t{\n\t\t\tiRowspan = 1;\n\t\t\tiColspan = 1;\n\n\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target\n\t\t\t * insert point. If there is, then there is nothing to do.\n\t\t\t */\n\t\t\tif ( aApplied[i][j] === undefined )\n\t\t\t{\n\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );\n\t\t\t\taApplied[i][j] = 1;\n\n\t\t\t\t/* Expand the cell to cover as many rows as needed */\n\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&\n\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\n\t\t\t\t{\n\t\t\t\t\taApplied[i+iRowspan][j] = 1;\n\t\t\t\t\tiRowspan++;\n\t\t\t\t}\n\n\t\t\t\t/* Expand the cell to cover as many columns as needed */\n\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&\n\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\n\t\t\t\t{\n\t\t\t\t\t/* Must update the applied array over the rows for the columns */\n\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t{\n\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;\n\t\t\t\t\t}\n\t\t\t\t\tiColspan++;\n\t\t\t\t}\n\n\t\t\t\t/* Do the actual expansion in the DOM */\n\t\t\t\t$(aoLocal[i][j].cell)\n\t\t\t\t\t.attr('rowspan', iRowspan)\n\t\t\t\t\t.attr('colspan', iColspan);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * Insert the required TR nodes into the table for display\n *  @param {object} oSettings dataTables settings object\n *  @param ajaxComplete true after ajax call to complete rendering\n *  @memberof DataTable#oApi\n */\nfunction _fnDraw( oSettings, ajaxComplete )\n{\n\t// Allow for state saving and a custom start position\n\t_fnStart( oSettings );\n\n\t/* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\n\tif ( $.inArray( false, aPreDraw ) !== -1 )\n\t{\n\t\t_fnProcessingDisplay( oSettings, false );\n\t\treturn;\n\t}\n\n\tvar anRows = [];\n\tvar iRowCount = 0;\n\tvar asStripeClasses = oSettings.asStripeClasses;\n\tvar iStripes = asStripeClasses.length;\n\tvar oLang = oSettings.oLanguage;\n\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\n\tvar aiDisplay = oSettings.aiDisplay;\n\tvar iDisplayStart = oSettings._iDisplayStart;\n\tvar iDisplayEnd = oSettings.fnDisplayEnd();\n\n\toSettings.bDrawing = true;\n\n\t/* Server-side processing draw intercept */\n\tif ( oSettings.bDeferLoading )\n\t{\n\t\toSettings.bDeferLoading = false;\n\t\toSettings.iDraw++;\n\t\t_fnProcessingDisplay( oSettings, false );\n\t}\n\telse if ( !bServerSide )\n\t{\n\t\toSettings.iDraw++;\n\t}\n\telse if ( !oSettings.bDestroying && !ajaxComplete)\n\t{\n\t\t_fnAjaxUpdate( oSettings );\n\t\treturn;\n\t}\n\n\tif ( aiDisplay.length !== 0 )\n\t{\n\t\tvar iStart = bServerSide ? 0 : iDisplayStart;\n\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\n\t\tfor ( var j=iStart ; j<iEnd ; j++ )\n\t\t{\n\t\t\tvar iDataIndex = aiDisplay[j];\n\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];\n\t\t\tif ( aoData.nTr === null )\n\t\t\t{\n\t\t\t\t_fnCreateTr( oSettings, iDataIndex );\n\t\t\t}\n\n\t\t\tvar nRow = aoData.nTr;\n\n\t\t\t/* Remove the old striping classes and then add the new one */\n\t\t\tif ( iStripes !== 0 )\n\t\t\t{\n\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];\n\t\t\t\tif ( aoData._sRowStripe != sStripe )\n\t\t\t\t{\n\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\n\t\t\t\t\taoData._sRowStripe = sStripe;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Row callback functions - might want to manipulate the row\n\t\t\t// iRowCount and j are not currently documented. Are they at all\n\t\t\t// useful?\n\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,\n\t\t\t\t[nRow, aoData._aData, iRowCount, j, iDataIndex] );\n\n\t\t\tanRows.push( nRow );\n\t\t\tiRowCount++;\n\t\t}\n\t}\n\telse\n\t{\n\t\t/* Table is empty - create a row with an empty message in it */\n\t\tvar sZero = oLang.sZeroRecords;\n\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\n\t\t{\n\t\t\tsZero = oLang.sLoadingRecords;\n\t\t}\n\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\n\t\t{\n\t\t\tsZero = oLang.sEmptyTable;\n\t\t}\n\n\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\n\t\t\t.append( $('<td />', {\n\t\t\t\t'valign':  'top',\n\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),\n\t\t\t\t'class':   oSettings.oClasses.sRowEmpty\n\t\t\t} ).html( sZero ) )[0];\n\t}\n\n\t/* Header and footer callbacks */\n\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\n\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\n\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\n\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\n\tvar body = $(oSettings.nTBody);\n\n\tbody.children().detach();\n\tbody.append( $(anRows) );\n\n\t/* Call all required callback functions for the end of a draw */\n\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\n\n\t/* Draw is complete, sorting and filtering must be as well */\n\toSettings.bSorted = false;\n\toSettings.bFiltered = false;\n\toSettings.bDrawing = false;\n}\n\n\n/**\n * Redraw the table - taking account of the various features which are enabled\n *  @param {object} oSettings dataTables settings object\n *  @param {boolean} [holdPosition] Keep the current paging position. By default\n *    the paging is reset to the first page\n *  @memberof DataTable#oApi\n */\nfunction _fnReDraw( settings, holdPosition )\n{\n\tvar\n\t\tfeatures = settings.oFeatures,\n\t\tsort     = features.bSort,\n\t\tfilter   = features.bFilter;\n\n\tif ( sort ) {\n\t\t_fnSort( settings );\n\t}\n\n\tif ( filter ) {\n\t\t_fnFilterComplete( settings, settings.oPreviousSearch );\n\t}\n\telse {\n\t\t// No filtering, so we want to just use the display master\n\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\t}\n\n\tif ( holdPosition !== true ) {\n\t\tsettings._iDisplayStart = 0;\n\t}\n\n\t// Let any modules know about the draw hold position state (used by\n\t// scrolling internally)\n\tsettings._drawHold = holdPosition;\n\n\t_fnDraw( settings );\n\n\tsettings._drawHold = false;\n}\n\n\n/**\n * Add the options to the page HTML for the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnAddOptionsHtml ( oSettings )\n{\n\tvar classes = oSettings.oClasses;\n\tvar table = $(oSettings.nTable);\n\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed\n\tvar features = oSettings.oFeatures;\n\n\t// All DataTables are wrapped in a div\n\tvar insert = $('<div/>', {\n\t\tid:      oSettings.sTableId+'_wrapper',\n\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\n\t} );\n\n\toSettings.nHolding = holding[0];\n\toSettings.nTableWrapper = insert[0];\n\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n\n\t/* Loop over the user set positioning and place the elements as needed */\n\tvar aDom = oSettings.sDom.split('');\n\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;\n\tfor ( var i=0 ; i<aDom.length ; i++ )\n\t{\n\t\tfeatureNode = null;\n\t\tcOption = aDom[i];\n\n\t\tif ( cOption == '<' )\n\t\t{\n\t\t\t/* New container div */\n\t\t\tnNewNode = $('<div/>')[0];\n\n\t\t\t/* Check to see if we should append an id and/or a class name to the container */\n\t\t\tcNext = aDom[i+1];\n\t\t\tif ( cNext == \"'\" || cNext == '\"' )\n\t\t\t{\n\t\t\t\tsAttr = \"\";\n\t\t\t\tj = 2;\n\t\t\t\twhile ( aDom[i+j] != cNext )\n\t\t\t\t{\n\t\t\t\t\tsAttr += aDom[i+j];\n\t\t\t\t\tj++;\n\t\t\t\t}\n\n\t\t\t\t/* Replace jQuery UI constants @todo depreciated */\n\t\t\t\tif ( sAttr == \"H\" )\n\t\t\t\t{\n\t\t\t\t\tsAttr = classes.sJUIHeader;\n\t\t\t\t}\n\t\t\t\telse if ( sAttr == \"F\" )\n\t\t\t\t{\n\t\t\t\t\tsAttr = classes.sJUIFooter;\n\t\t\t\t}\n\n\t\t\t\t/* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n\t\t\t\t * breaks the string into parts and applies them as needed\n\t\t\t\t */\n\t\t\t\tif ( sAttr.indexOf('.') != -1 )\n\t\t\t\t{\n\t\t\t\t\tvar aSplit = sAttr.split('.');\n\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\n\t\t\t\t\tnNewNode.className = aSplit[1];\n\t\t\t\t}\n\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )\n\t\t\t\t{\n\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnNewNode.className = sAttr;\n\t\t\t\t}\n\n\t\t\t\ti += j; /* Move along the position array */\n\t\t\t}\n\n\t\t\tinsert.append( nNewNode );\n\t\t\tinsert = $(nNewNode);\n\t\t}\n\t\telse if ( cOption == '>' )\n\t\t{\n\t\t\t/* End container div */\n\t\t\tinsert = insert.parent();\n\t\t}\n\t\t// @todo Move options into their own plugins?\n\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\n\t\t{\n\t\t\t/* Length */\n\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );\n\t\t}\n\t\telse if ( cOption == 'f' && features.bFilter )\n\t\t{\n\t\t\t/* Filter */\n\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );\n\t\t}\n\t\telse if ( cOption == 'r' && features.bProcessing )\n\t\t{\n\t\t\t/* pRocessing */\n\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );\n\t\t}\n\t\telse if ( cOption == 't' )\n\t\t{\n\t\t\t/* Table */\n\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );\n\t\t}\n\t\telse if ( cOption ==  'i' && features.bInfo )\n\t\t{\n\t\t\t/* Info */\n\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );\n\t\t}\n\t\telse if ( cOption == 'p' && features.bPaginate )\n\t\t{\n\t\t\t/* Pagination */\n\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );\n\t\t}\n\t\telse if ( DataTable.ext.feature.length !== 0 )\n\t\t{\n\t\t\t/* Plug-in features */\n\t\t\tvar aoFeatures = DataTable.ext.feature;\n\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\n\t\t\t{\n\t\t\t\tif ( cOption == aoFeatures[k].cFeature )\n\t\t\t\t{\n\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* Add to the 2D features array */\n\t\tif ( featureNode )\n\t\t{\n\t\t\tvar aanFeatures = oSettings.aanFeatures;\n\n\t\t\tif ( ! aanFeatures[cOption] )\n\t\t\t{\n\t\t\t\taanFeatures[cOption] = [];\n\t\t\t}\n\n\t\t\taanFeatures[cOption].push( featureNode );\n\t\t\tinsert.append( featureNode );\n\t\t}\n\t}\n\n\t/* Built our DOM structure - replace the holding div with what we want */\n\tholding.replaceWith( insert );\n\toSettings.nHolding = null;\n}\n\n\n/**\n * Use the DOM source to create up an array of header cells. The idea here is to\n * create a layout grid (array) of rows x columns, which contains a reference\n * to the cell that that point in the grid (regardless of col/rowspan), such that\n * any column / row could be removed and the new grid constructed\n *  @param array {object} aLayout Array to store the calculated layout in\n *  @param {node} nThead The header/footer element for the table\n *  @memberof DataTable#oApi\n */\nfunction _fnDetectHeader ( aLayout, nThead )\n{\n\tvar nTrs = $(nThead).children('tr');\n\tvar nTr, nCell;\n\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n\tvar bUnique;\n\tvar fnShiftCol = function ( a, i, j ) {\n\t\tvar k = a[i];\n                while ( k[j] ) {\n\t\t\tj++;\n\t\t}\n\t\treturn j;\n\t};\n\n\taLayout.splice( 0, aLayout.length );\n\n\t/* We know how many rows there are in the layout - so prep it */\n\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t{\n\t\taLayout.push( [] );\n\t}\n\n\t/* Calculate a layout array */\n\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t{\n\t\tnTr = nTrs[i];\n\t\tiColumn = 0;\n\n\t\t/* For every cell in the row... */\n\t\tnCell = nTr.firstChild;\n\t\twhile ( nCell ) {\n\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||\n\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )\n\t\t\t{\n\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */\n\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;\n\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;\n\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\n\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\n\n\t\t\t\t/* There might be colspan cells already in this row, so shift our target\n\t\t\t\t * accordingly\n\t\t\t\t */\n\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );\n\n\t\t\t\t/* Cache calculation for unique columns */\n\t\t\t\tbUnique = iColspan === 1 ? true : false;\n\n\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */\n\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )\n\t\t\t\t{\n\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t{\n\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {\n\t\t\t\t\t\t\t\"cell\": nCell,\n\t\t\t\t\t\t\t\"unique\": bUnique\n\t\t\t\t\t\t};\n\t\t\t\t\t\taLayout[i+k].nTr = nTr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tnCell = nCell.nextSibling;\n\t\t}\n\t}\n}\n\n\n/**\n * Get an array of unique th elements, one for each column\n *  @param {object} oSettings dataTables settings object\n *  @param {node} nHeader automatically detect the layout from this node - optional\n *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n *  @returns array {node} aReturn list of unique th's\n *  @memberof DataTable#oApi\n */\nfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )\n{\n\tvar aReturn = [];\n\tif ( !aLayout )\n\t{\n\t\taLayout = oSettings.aoHeader;\n\t\tif ( nHeader )\n\t\t{\n\t\t\taLayout = [];\n\t\t\t_fnDetectHeader( aLayout, nHeader );\n\t\t}\n\t}\n\n\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\n\t{\n\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\n\t\t{\n\t\t\tif ( aLayout[i][j].unique &&\n\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )\n\t\t\t{\n\t\t\t\taReturn[j] = aLayout[i][j].cell;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn aReturn;\n}\n\n/**\n * Set the start position for draw\n *  @param {object} oSettings dataTables settings object\n */\nfunction _fnStart( oSettings )\n{\n\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\n\tvar iInitDisplayStart = oSettings.iInitDisplayStart;\n\n\t// Check and see if we have an initial draw position from state saving\n\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\n\t{\n\t\toSettings._iDisplayStart = bServerSide ?\n\t\t\tiInitDisplayStart :\n\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n\t\t\t\t0 :\n\t\t\t\tiInitDisplayStart;\n\n\t\toSettings.iInitDisplayStart = -1;\n\t}\n}\n\n/**\n * Create an Ajax call based on the table's settings, taking into account that\n * parameters can have multiple forms, and backwards compatibility.\n *\n * @param {object} oSettings dataTables settings object\n * @param {array} data Data to send to the server, required by\n *     DataTables - may be augmented by developer callbacks\n * @param {function} fn Callback function to run when data is obtained\n */\nfunction _fnBuildAjax( oSettings, data, fn )\n{\n\t// Compatibility with 1.9-, allow fnServerData and event to manipulate\n\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\n\n\t// Convert to object based for 1.10+ if using the old array scheme which can\n\t// come from server-side processing or serverParams\n\tif ( data && Array.isArray(data) ) {\n\t\tvar tmp = {};\n\t\tvar rbracket = /(.*?)\\[\\]$/;\n\n\t\t$.each( data, function (key, val) {\n\t\t\tvar match = val.name.match(rbracket);\n\n\t\t\tif ( match ) {\n\t\t\t\t// Support for arrays\n\t\t\t\tvar name = match[0];\n\n\t\t\t\tif ( ! tmp[ name ] ) {\n\t\t\t\t\ttmp[ name ] = [];\n\t\t\t\t}\n\t\t\t\ttmp[ name ].push( val.value );\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp[val.name] = val.value;\n\t\t\t}\n\t\t} );\n\t\tdata = tmp;\n\t}\n\n\tvar ajaxData;\n\tvar ajax = oSettings.ajax;\n\tvar instance = oSettings.oInstance;\n\tvar callback = function ( json ) {\n\t\tvar status = oSettings.jqXHR\n\t\t\t? oSettings.jqXHR.status\n\t\t\t: null;\n\n\t\tif ( json === null || (typeof status === 'number' && status == 204 ) ) {\n\t\t\tjson = {};\n\t\t\t_fnAjaxDataSrc( oSettings, json, [] );\n\t\t}\n\n\t\tvar error = json.error || json.sError;\n\t\tif ( error ) {\n\t\t\t_fnLog( oSettings, 0, error );\n\t\t}\n\n\t\toSettings.json = json;\n\n\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\n\t\tfn( json );\n\t};\n\n\tif ( $.isPlainObject( ajax ) && ajax.data )\n\t{\n\t\tajaxData = ajax.data;\n\n\t\tvar newData = typeof ajaxData === 'function' ?\n\t\t\tajaxData( data, oSettings ) :  // fn can manipulate data or return\n\t\t\tajaxData;                      // an object object or array to merge\n\n\t\t// If the function returned something, use that alone\n\t\tdata = typeof ajaxData === 'function' && newData ?\n\t\t\tnewData :\n\t\t\t$.extend( true, data, newData );\n\n\t\t// Remove the data property as we've resolved it already and don't want\n\t\t// jQuery to do it again (it is restored at the end of the function)\n\t\tdelete ajax.data;\n\t}\n\n\tvar baseAjax = {\n\t\t\"data\": data,\n\t\t\"success\": callback,\n\t\t\"dataType\": \"json\",\n\t\t\"cache\": false,\n\t\t\"type\": oSettings.sServerMethod,\n\t\t\"error\": function (xhr, error, thrown) {\n\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\n\n\t\t\tif ( $.inArray( true, ret ) === -1 ) {\n\t\t\t\tif ( error == \"parsererror\" ) {\n\t\t\t\t\t_fnLog( oSettings, 0, 'Invalid JSON response', 1 );\n\t\t\t\t}\n\t\t\t\telse if ( xhr.readyState === 4 ) {\n\t\t\t\t\t_fnLog( oSettings, 0, 'Ajax error', 7 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t}\n\t};\n\n\t// Store the data submitted for the API\n\toSettings.oAjaxData = data;\n\n\t// Allow plug-ins and external processes to modify the data\n\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\n\n\tif ( oSettings.fnServerData )\n\t{\n\t\t// DataTables 1.9- compatibility\n\t\toSettings.fnServerData.call( instance,\n\t\t\toSettings.sAjaxSource,\n\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format\n\t\t\t\treturn { name: key, value: val };\n\t\t\t} ),\n\t\t\tcallback,\n\t\t\toSettings\n\t\t);\n\t}\n\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )\n\t{\n\t\t// DataTables 1.9- compatibility\n\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {\n\t\t\turl: ajax || oSettings.sAjaxSource\n\t\t} ) );\n\t}\n\telse if ( typeof ajax === 'function' )\n\t{\n\t\t// Is a function - let the caller define what needs to be done\n\t\toSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\n\t}\n\telse\n\t{\n\t\t// Object to extend the base settings\n\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\n\n\t\t// Restore for next time around\n\t\tajax.data = ajaxData;\n\t}\n}\n\n\n/**\n * Update the table using an Ajax call\n *  @param {object} settings dataTables settings object\n *  @returns {boolean} Block the table drawing or not\n *  @memberof DataTable#oApi\n */\nfunction _fnAjaxUpdate( settings )\n{\n\tsettings.iDraw++;\n\t_fnProcessingDisplay( settings, true );\n\n\t// Keep track of drawHold state to handle scrolling after the Ajax call\n\tvar drawHold = settings._drawHold;\n\n\t_fnBuildAjax(\n\t\tsettings,\n\t\t_fnAjaxParameters( settings ),\n\t\tfunction(json) {\n\t\t\tsettings._drawHold = drawHold;\n\t\t\t_fnAjaxUpdateDraw( settings, json );\n\t\t\tsettings._drawHold = false;\n\t\t}\n\t);\n}\n\n\n/**\n * Build up the parameters in an object needed for a server-side processing\n * request. Note that this is basically done twice, is different ways - a modern\n * method which is used by default in DataTables 1.10 which uses objects and\n * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n * the sAjaxSource option is used in the initialisation, or the legacyAjax\n * option is set.\n *  @param {object} oSettings dataTables settings object\n *  @returns {bool} block the table drawing or not\n *  @memberof DataTable#oApi\n */\nfunction _fnAjaxParameters( settings )\n{\n\tvar\n\t\tcolumns = settings.aoColumns,\n\t\tcolumnCount = columns.length,\n\t\tfeatures = settings.oFeatures,\n\t\tpreSearch = settings.oPreviousSearch,\n\t\tpreColSearch = settings.aoPreSearchCols,\n\t\ti, data = [], dataProp, column, columnSearch,\n\t\tsort = _fnSortFlatten( settings ),\n\t\tdisplayStart = settings._iDisplayStart,\n\t\tdisplayLength = features.bPaginate !== false ?\n\t\t\tsettings._iDisplayLength :\n\t\t\t-1;\n\n\tvar param = function ( name, value ) {\n\t\tdata.push( { 'name': name, 'value': value } );\n\t};\n\n\t// DataTables 1.9- compatible method\n\tparam( 'sEcho',          settings.iDraw );\n\tparam( 'iColumns',       columnCount );\n\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\n\tparam( 'iDisplayStart',  displayStart );\n\tparam( 'iDisplayLength', displayLength );\n\n\t// DataTables 1.10+ method\n\tvar d = {\n\t\tdraw:    settings.iDraw,\n\t\tcolumns: [],\n\t\torder:   [],\n\t\tstart:   displayStart,\n\t\tlength:  displayLength,\n\t\tsearch:  {\n\t\t\tvalue: preSearch.sSearch,\n\t\t\tregex: preSearch.bRegex\n\t\t}\n\t};\n\n\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\tcolumn = columns[i];\n\t\tcolumnSearch = preColSearch[i];\n\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\n\n\t\td.columns.push( {\n\t\t\tdata:       dataProp,\n\t\t\tname:       column.sName,\n\t\t\tsearchable: column.bSearchable,\n\t\t\torderable:  column.bSortable,\n\t\t\tsearch:     {\n\t\t\t\tvalue: columnSearch.sSearch,\n\t\t\t\tregex: columnSearch.bRegex\n\t\t\t}\n\t\t} );\n\n\t\tparam( \"mDataProp_\"+i, dataProp );\n\n\t\tif ( features.bFilter ) {\n\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );\n\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );\n\t\t\tparam( 'bSearchable_'+i, column.bSearchable );\n\t\t}\n\n\t\tif ( features.bSort ) {\n\t\t\tparam( 'bSortable_'+i, column.bSortable );\n\t\t}\n\t}\n\n\tif ( features.bFilter ) {\n\t\tparam( 'sSearch', preSearch.sSearch );\n\t\tparam( 'bRegex', preSearch.bRegex );\n\t}\n\n\tif ( features.bSort ) {\n\t\t$.each( sort, function ( i, val ) {\n\t\t\td.order.push( { column: val.col, dir: val.dir } );\n\n\t\t\tparam( 'iSortCol_'+i, val.col );\n\t\t\tparam( 'sSortDir_'+i, val.dir );\n\t\t} );\n\n\t\tparam( 'iSortingCols', sort.length );\n\t}\n\n\t// If the legacy.ajax parameter is null, then we automatically decide which\n\t// form to use, based on sAjaxSource\n\tvar legacy = DataTable.ext.legacy.ajax;\n\tif ( legacy === null ) {\n\t\treturn settings.sAjaxSource ? data : d;\n\t}\n\n\t// Otherwise, if legacy has been specified then we use that to decide on the\n\t// form\n\treturn legacy ? data : d;\n}\n\n\n/**\n * Data the data from the server (nuking the old) and redraw the table\n *  @param {object} oSettings dataTables settings object\n *  @param {object} json json data return from the server.\n *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n *  @param {array} json.aaData The data to display on this page\n *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n *  @memberof DataTable#oApi\n */\nfunction _fnAjaxUpdateDraw ( settings, json )\n{\n\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n\t// Support both\n\tvar compat = function ( old, modern ) {\n\t\treturn json[old] !== undefined ? json[old] : json[modern];\n\t};\n\n\tvar data = _fnAjaxDataSrc( settings, json );\n\tvar draw            = compat( 'sEcho',                'draw' );\n\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n\n\tif ( draw !== undefined ) {\n\t\t// Protect against out of sequence returns\n\t\tif ( draw*1 < settings.iDraw ) {\n\t\t\treturn;\n\t\t}\n\t\tsettings.iDraw = draw * 1;\n\t}\n\n\t// No data in returned object, so rather than an array, we show an empty table\n\tif ( ! data ) {\n\t\tdata = [];\n\t}\n\n\t_fnClearTable( settings );\n\tsettings._iRecordsTotal   = parseInt(recordsTotal, 10);\n\tsettings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\n\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t_fnAddData( settings, data[i] );\n\t}\n\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\n\t_fnDraw( settings, true );\n\n\tif ( ! settings._bInitComplete ) {\n\t\t_fnInitComplete( settings, json );\n\t}\n\n\t_fnProcessingDisplay( settings, false );\n}\n\n\n/**\n * Get the data from the JSON data source to use for drawing a table. Using\n * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n * source object, or from a processing function.\n *  @param {object} oSettings dataTables settings object\n *  @param  {object} json Data source object / array from the server\n *  @return {array} Array of data to use\n */\n function _fnAjaxDataSrc ( oSettings, json, write )\n {\n\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\n\t\toSettings.ajax.dataSrc :\n\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.\n\n\tif ( ! write ) {\n\t\tif ( dataSrc === 'data' ) {\n\t\t\t// If the default, then we still want to support the old style, and safely ignore\n\t\t\t// it if possible\n\t\t\treturn json.aaData || json[dataSrc];\n\t\t}\n\n\t\treturn dataSrc !== \"\" ?\n\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :\n\t\t\tjson;\n\t}\n\n\t// set\n\t_fnSetObjectDataFn( dataSrc )( json, write );\n}\n\n/**\n * Generate the node required for filtering text\n *  @returns {node} Filter control element\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnFeatureHtmlFilter ( settings )\n{\n\tvar classes = settings.oClasses;\n\tvar tableId = settings.sTableId;\n\tvar language = settings.oLanguage;\n\tvar previousSearch = settings.oPreviousSearch;\n\tvar features = settings.aanFeatures;\n\tvar input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\n\n\tvar str = language.sSearch;\n\tstr = str.match(/_INPUT_/) ?\n\t\tstr.replace('_INPUT_', input) :\n\t\tstr+input;\n\n\tvar filter = $('<div/>', {\n\t\t\t'id': ! features.f ? tableId+'_filter' : null,\n\t\t\t'class': classes.sFilter\n\t\t} )\n\t\t.append( $('<label/>' ).append( str ) );\n\n\tvar searchFn = function(event) {\n\t\t/* Update all other filter input elements for the new display */\n\t\tvar n = features.f;\n\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\t\tif(previousSearch['return'] && event.key !== \"Enter\") {\n\t\t\treturn;\n\t\t}\n\t\t/* Now do the filter */\n\t\tif ( val != previousSearch.sSearch ) {\n\t\t\t_fnFilterComplete( settings, {\n\t\t\t\t\"sSearch\": val,\n\t\t\t\t\"bRegex\": previousSearch.bRegex,\n\t\t\t\t\"bSmart\": previousSearch.bSmart ,\n\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive,\n\t\t\t\t\"return\": previousSearch['return']\n\t\t\t} );\n\n\t\t\t// Need to redraw, without resorting\n\t\t\tsettings._iDisplayStart = 0;\n\t\t\t_fnDraw( settings );\n\t\t}\n\t};\n\n\tvar searchDelay = settings.searchDelay !== null ?\n\t\tsettings.searchDelay :\n\t\t_fnDataSource( settings ) === 'ssp' ?\n\t\t\t400 :\n\t\t\t0;\n\n\tvar jqFilter = $('input', filter)\n\t\t.val( previousSearch.sSearch )\n\t\t.attr( 'placeholder', language.sSearchPlaceholder )\n\t\t.on(\n\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',\n\t\t\tsearchDelay ?\n\t\t\t\t_fnThrottle( searchFn, searchDelay ) :\n\t\t\t\tsearchFn\n\t\t)\n\t\t.on( 'mouseup.DT', function(e) {\n\t\t\t// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking\n\t\t\t// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`\n\t\t\t// checks the value to see if it has changed. In other browsers it won't have.\n\t\t\tsetTimeout( function () {\n\t\t\t\tsearchFn.call(jqFilter[0], e);\n\t\t\t}, 10);\n\t\t} )\n\t\t.on( 'keypress.DT', function(e) {\n\t\t\t/* Prevent form submission */\n\t\t\tif ( e.keyCode == 13 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} )\n\t\t.attr('aria-controls', tableId);\n\n\t// Update the input elements whenever the table is filtered\n\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\n\t\tif ( settings === s ) {\n\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t// inside an iframe or frame...\n\t\t\ttry {\n\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {\n\t\t\t\t\tjqFilter.val( previousSearch.sSearch );\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch ( e ) {}\n\t\t}\n\t} );\n\n\treturn filter[0];\n}\n\n\n/**\n * Filter the table using both the global filter and column based filtering\n *  @param {object} oSettings dataTables settings object\n *  @param {object} oSearch search information\n *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n *  @memberof DataTable#oApi\n */\nfunction _fnFilterComplete ( oSettings, oInput, iForce )\n{\n\tvar oPrevSearch = oSettings.oPreviousSearch;\n\tvar aoPrevSearch = oSettings.aoPreSearchCols;\n\tvar fnSaveFilter = function ( oFilter ) {\n\t\t/* Save the filtering values */\n\t\toPrevSearch.sSearch = oFilter.sSearch;\n\t\toPrevSearch.bRegex = oFilter.bRegex;\n\t\toPrevSearch.bSmart = oFilter.bSmart;\n\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n\t\toPrevSearch['return'] = oFilter['return'];\n\t};\n\tvar fnRegex = function ( o ) {\n\t\t// Backwards compatibility with the bEscapeRegex option\n\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n\t};\n\n\t// Resolve any column types that are unknown due to addition or invalidation\n\t// @todo As per sort - can this be moved into an event handler?\n\t_fnColumnTypes( oSettings );\n\n\t/* In server-side processing all filtering is done by the server, so no point hanging around here */\n\tif ( _fnDataSource( oSettings ) != 'ssp' )\n\t{\n\t\t/* Global filter */\n\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\n\t\tfnSaveFilter( oInput );\n\n\t\t/* Now do the individual column filter */\n\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )\n\t\t{\n\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\n\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\n\t\t}\n\n\t\t/* Custom filtering */\n\t\t_fnFilterCustom( oSettings );\n\t}\n\telse\n\t{\n\t\tfnSaveFilter( oInput );\n\t}\n\n\t/* Tell the draw function we have been filtering */\n\toSettings.bFiltered = true;\n\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );\n}\n\n\n/**\n * Apply custom filtering functions\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnFilterCustom( settings )\n{\n\tvar filters = DataTable.ext.search;\n\tvar displayRows = settings.aiDisplay;\n\tvar row, rowIdx;\n\n\tfor ( var i=0, ien=filters.length ; i<ien ; i++ ) {\n\t\tvar rows = [];\n\n\t\t// Loop over each row and see if it should be included\n\t\tfor ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\n\t\t\trowIdx = displayRows[ j ];\n\t\t\trow = settings.aoData[ rowIdx ];\n\n\t\t\tif ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\n\t\t\t\trows.push( rowIdx );\n\t\t\t}\n\t\t}\n\n\t\t// So the array reference doesn't break set the results into the\n\t\t// existing array\n\t\tdisplayRows.length = 0;\n\t\t$.merge( displayRows, rows );\n\t}\n}\n\n\n/**\n * Filter the table on a per-column basis\n *  @param {object} oSettings dataTables settings object\n *  @param {string} sInput string to filter on\n *  @param {int} iColumn column to filter\n *  @param {bool} bRegex treat search string as a regular expression or not\n *  @param {bool} bSmart use smart filtering or not\n *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n *  @memberof DataTable#oApi\n */\nfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\n{\n\tif ( searchStr === '' ) {\n\t\treturn;\n\t}\n\n\tvar data;\n\tvar out = [];\n\tvar display = settings.aiDisplay;\n\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\n\n\tfor ( var i=0 ; i<display.length ; i++ ) {\n\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\n\n\t\tif ( rpSearch.test( data ) ) {\n\t\t\tout.push( display[i] );\n\t\t}\n\t}\n\n\tsettings.aiDisplay = out;\n}\n\n\n/**\n * Filter the data table based on user input and draw the table\n *  @param {object} settings dataTables settings object\n *  @param {string} input string to filter on\n *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n *  @param {bool} regex treat as a regular expression or not\n *  @param {bool} smart perform smart filtering or not\n *  @param {bool} caseInsensitive Do case insensitive matching or not\n *  @memberof DataTable#oApi\n */\nfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )\n{\n\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\n\tvar prevSearch = settings.oPreviousSearch.sSearch;\n\tvar displayMaster = settings.aiDisplayMaster;\n\tvar display, invalidated, i;\n\tvar filtered = [];\n\n\t// Need to take account of custom filtering functions - always filter\n\tif ( DataTable.ext.search.length !== 0 ) {\n\t\tforce = true;\n\t}\n\n\t// Check if any of the rows were invalidated\n\tinvalidated = _fnFilterData( settings );\n\n\t// If the input is blank - we just want the full data set\n\tif ( input.length <= 0 ) {\n\t\tsettings.aiDisplay = displayMaster.slice();\n\t}\n\telse {\n\t\t// New search - start from the master array\n\t\tif ( invalidated ||\n\t\t\t force ||\n\t\t\t regex ||\n\t\t\t prevSearch.length > input.length ||\n\t\t\t input.indexOf(prevSearch) !== 0 ||\n\t\t\t settings.bSorted // On resort, the display master needs to be\n\t\t\t                  // re-filtered since indexes will have changed\n\t\t) {\n\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t}\n\n\t\t// Search the display array\n\t\tdisplay = settings.aiDisplay;\n\n\t\tfor ( i=0 ; i<display.length ; i++ ) {\n\t\t\tif ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\n\t\t\t\tfiltered.push( display[i] );\n\t\t\t}\n\t\t}\n\n\t\tsettings.aiDisplay = filtered;\n\t}\n}\n\n\n/**\n * Build a regular expression object suitable for searching a table\n *  @param {string} sSearch string to search for\n *  @param {bool} bRegex treat as a regular expression or not\n *  @param {bool} bSmart perform smart filtering or not\n *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n *  @returns {RegExp} constructed object\n *  @memberof DataTable#oApi\n */\nfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\n{\n\tsearch = regex ?\n\t\tsearch :\n\t\t_fnEscapeRegex( search );\n\t\n\tif ( smart ) {\n\t\t/* For smart filtering we want to allow the search to work regardless of\n\t\t * word order. We also want double quoted text to be preserved, so word\n\t\t * order is important - a la google. So this is what we want to\n\t\t * generate:\n\t\t * \n\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n\t\t */\n\t\tvar a = $.map( search.match( /[\"\\u201C][^\"\\u201D]+[\"\\u201D]|[^ ]+/g ) || [''], function ( word ) {\n\t\t\tif ( word.charAt(0) === '\"' ) {\n\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );\n\t\t\t\tword = m ? m[1] : word;\n\t\t\t}\n\t\t\telse if ( word.charAt(0) === '\\u201C' ) {\n\t\t\t\tvar m = word.match( /^\\u201C(.*)\\u201D$/ );\n\t\t\t\tword = m ? m[1] : word;\n\t\t\t}\n\n\t\t\treturn word.replace('\"', '');\n\t\t} );\n\n\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\n\t}\n\n\treturn new RegExp( search, caseInsensitive ? 'i' : '' );\n}\n\n\n/**\n * Escape a string such that it can be used in a regular expression\n *  @param {string} sVal string to escape\n *  @returns {string} escaped string\n *  @memberof DataTable#oApi\n */\nvar _fnEscapeRegex = DataTable.util.escapeRegex;\n\nvar __filter_div = $('<div>')[0];\nvar __filter_div_textContent = __filter_div.textContent !== undefined;\n\n// Update the filtering data for each row if needed (by invalidation or first run)\nfunction _fnFilterData ( settings )\n{\n\tvar columns = settings.aoColumns;\n\tvar column;\n\tvar i, j, ien, jen, filterData, cellData, row;\n\tvar wasInvalidated = false;\n\n\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\trow = settings.aoData[i];\n\n\t\tif ( ! row._aFilterData ) {\n\t\t\tfilterData = [];\n\n\t\t\tfor ( j=0, jen=columns.length ; j<jen ; j++ ) {\n\t\t\t\tcolumn = columns[j];\n\n\t\t\t\tif ( column.bSearchable ) {\n\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );\n\n\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this\n\t\t\t\t\t// should be altered to also allow strict type checking.\n\t\t\t\t\tif ( cellData === null ) {\n\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( typeof cellData !== 'string' && cellData.toString ) {\n\t\t\t\t\t\tcellData = cellData.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcellData = '';\n\t\t\t\t}\n\n\t\t\t\t// If it looks like there is an HTML entity in the string,\n\t\t\t\t// attempt to decode it so sorting works as expected. Note that\n\t\t\t\t// we could use a single line of jQuery to do this, but the DOM\n\t\t\t\t// method used here is much faster https://jsperf.com/html-decode\n\t\t\t\tif ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\n\t\t\t\t\t__filter_div.innerHTML = cellData;\n\t\t\t\t\tcellData = __filter_div_textContent ?\n\t\t\t\t\t\t__filter_div.textContent :\n\t\t\t\t\t\t__filter_div.innerText;\n\t\t\t\t}\n\n\t\t\t\tif ( cellData.replace ) {\n\t\t\t\t\tcellData = cellData.replace(/[\\r\\n\\u2028]/g, '');\n\t\t\t\t}\n\n\t\t\t\tfilterData.push( cellData );\n\t\t\t}\n\n\t\t\trow._aFilterData = filterData;\n\t\t\trow._sFilterRow = filterData.join('  ');\n\t\t\twasInvalidated = true;\n\t\t}\n\t}\n\n\treturn wasInvalidated;\n}\n\n\n/**\n * Convert from the internal Hungarian notation to camelCase for external\n * interaction\n *  @param {object} obj Object to convert\n *  @returns {object} Inverted object\n *  @memberof DataTable#oApi\n */\nfunction _fnSearchToCamel ( obj )\n{\n\treturn {\n\t\tsearch:          obj.sSearch,\n\t\tsmart:           obj.bSmart,\n\t\tregex:           obj.bRegex,\n\t\tcaseInsensitive: obj.bCaseInsensitive\n\t};\n}\n\n\n\n/**\n * Convert from camelCase notation to the internal Hungarian. We could use the\n * Hungarian convert function here, but this is cleaner\n *  @param {object} obj Object to convert\n *  @returns {object} Inverted object\n *  @memberof DataTable#oApi\n */\nfunction _fnSearchToHung ( obj )\n{\n\treturn {\n\t\tsSearch:          obj.search,\n\t\tbSmart:           obj.smart,\n\t\tbRegex:           obj.regex,\n\t\tbCaseInsensitive: obj.caseInsensitive\n\t};\n}\n\n/**\n * Generate the node required for the info display\n *  @param {object} oSettings dataTables settings object\n *  @returns {node} Information element\n *  @memberof DataTable#oApi\n */\nfunction _fnFeatureHtmlInfo ( settings )\n{\n\tvar\n\t\ttid = settings.sTableId,\n\t\tnodes = settings.aanFeatures.i,\n\t\tn = $('<div/>', {\n\t\t\t'class': settings.oClasses.sInfo,\n\t\t\t'id': ! nodes ? tid+'_info' : null\n\t\t} );\n\n\tif ( ! nodes ) {\n\t\t// Update display on each draw\n\t\tsettings.aoDrawCallback.push( {\n\t\t\t\"fn\": _fnUpdateInfo,\n\t\t\t\"sName\": \"information\"\n\t\t} );\n\n\t\tn\n\t\t\t.attr( 'role', 'status' )\n\t\t\t.attr( 'aria-live', 'polite' );\n\n\t\t// Table is described by our info div\n\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );\n\t}\n\n\treturn n[0];\n}\n\n\n/**\n * Update the information elements in the display\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnUpdateInfo ( settings )\n{\n\t/* Show information about the table */\n\tvar nodes = settings.aanFeatures.i;\n\tif ( nodes.length === 0 ) {\n\t\treturn;\n\t}\n\n\tvar\n\t\tlang  = settings.oLanguage,\n\t\tstart = settings._iDisplayStart+1,\n\t\tend   = settings.fnDisplayEnd(),\n\t\tmax   = settings.fnRecordsTotal(),\n\t\ttotal = settings.fnRecordsDisplay(),\n\t\tout   = total ?\n\t\t\tlang.sInfo :\n\t\t\tlang.sInfoEmpty;\n\n\tif ( total !== max ) {\n\t\t/* Record set after filtering */\n\t\tout += ' ' + lang.sInfoFiltered;\n\t}\n\n\t// Convert the macros\n\tout += lang.sInfoPostFix;\n\tout = _fnInfoMacros( settings, out );\n\n\tvar callback = lang.fnInfoCallback;\n\tif ( callback !== null ) {\n\t\tout = callback.call( settings.oInstance,\n\t\t\tsettings, start, end, max, total, out\n\t\t);\n\t}\n\n\t$(nodes).html( out );\n}\n\n\nfunction _fnInfoMacros ( settings, str )\n{\n\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n\t// internally\n\tvar\n\t\tformatter  = settings.fnFormatNumber,\n\t\tstart      = settings._iDisplayStart+1,\n\t\tlen        = settings._iDisplayLength,\n\t\tvis        = settings.fnRecordsDisplay(),\n\t\tall        = len === -1;\n\n\treturn str.\n\t\treplace(/_START_/g, formatter.call( settings, start ) ).\n\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\n\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\n\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).\n\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\n\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\n}\n\n\n\n/**\n * Draw the table for the first time, adding all required features\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnInitialise ( settings )\n{\n\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;\n\tvar columns = settings.aoColumns, column;\n\tvar features = settings.oFeatures;\n\tvar deferLoading = settings.bDeferLoading; // value modified by the draw\n\n\t/* Ensure that the table data is fully initialised */\n\tif ( ! settings.bInitialised ) {\n\t\tsetTimeout( function(){ _fnInitialise( settings ); }, 200 );\n\t\treturn;\n\t}\n\n\t/* Show the display HTML options */\n\t_fnAddOptionsHtml( settings );\n\n\t/* Build and draw the header / footer for the table */\n\t_fnBuildHead( settings );\n\t_fnDrawHead( settings, settings.aoHeader );\n\t_fnDrawHead( settings, settings.aoFooter );\n\n\t/* Okay to show that something is going on now */\n\t_fnProcessingDisplay( settings, true );\n\n\t/* Calculate sizes for columns */\n\tif ( features.bAutoWidth ) {\n\t\t_fnCalculateColumnWidths( settings );\n\t}\n\n\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\n\t\tcolumn = columns[i];\n\n\t\tif ( column.sWidth ) {\n\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );\n\t\t}\n\t}\n\n\t_fnCallbackFire( settings, null, 'preInit', [settings] );\n\n\t// If there is default sorting required - let's do it. The sort function\n\t// will do the drawing for us. Otherwise we draw the table regardless of the\n\t// Ajax source - this allows the table to look initialised for Ajax sourcing\n\t// data (show 'loading' message possibly)\n\t_fnReDraw( settings );\n\n\t// Server-side processing init complete is done by _fnAjaxUpdateDraw\n\tvar dataSrc = _fnDataSource( settings );\n\tif ( dataSrc != 'ssp' || deferLoading ) {\n\t\t// if there is an ajax source load the data\n\t\tif ( dataSrc == 'ajax' ) {\n\t\t\t_fnBuildAjax( settings, [], function(json) {\n\t\t\t\tvar aData = _fnAjaxDataSrc( settings, json );\n\n\t\t\t\t// Got the data - add it to the table\n\t\t\t\tfor ( i=0 ; i<aData.length ; i++ ) {\n\t\t\t\t\t_fnAddData( settings, aData[i] );\n\t\t\t\t}\n\n\t\t\t\t// Reset the init display for cookie saving. We've already done\n\t\t\t\t// a filter, and therefore cleared it before. So we need to make\n\t\t\t\t// it appear 'fresh'\n\t\t\t\tsettings.iInitDisplayStart = iAjaxStart;\n\n\t\t\t\t_fnReDraw( settings );\n\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t_fnInitComplete( settings, json );\n\t\t\t}, settings );\n\t\t}\n\t\telse {\n\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t_fnInitComplete( settings );\n\t\t}\n\t}\n}\n\n\n/**\n * Draw the table for the first time, adding all required features\n *  @param {object} oSettings dataTables settings object\n *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n *    with client-side processing (optional)\n *  @memberof DataTable#oApi\n */\nfunction _fnInitComplete ( settings, json )\n{\n\tsettings._bInitComplete = true;\n\n\t// When data was added after the initialisation (data or Ajax) we need to\n\t// calculate the column sizing\n\tif ( json || settings.oInit.aaData ) {\n\t\t_fnAdjustColumnSizing( settings );\n\t}\n\n\t_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );\n\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\n}\n\n\nfunction _fnLengthChange ( settings, val )\n{\n\tvar len = parseInt( val, 10 );\n\tsettings._iDisplayLength = len;\n\n\t_fnLengthOverflow( settings );\n\n\t// Fire length change event\n\t_fnCallbackFire( settings, null, 'length', [settings, len] );\n}\n\n\n/**\n * Generate the node required for user display length changing\n *  @param {object} settings dataTables settings object\n *  @returns {node} Display length feature node\n *  @memberof DataTable#oApi\n */\nfunction _fnFeatureHtmlLength ( settings )\n{\n\tvar\n\t\tclasses  = settings.oClasses,\n\t\ttableId  = settings.sTableId,\n\t\tmenu     = settings.aLengthMenu,\n\t\td2       = Array.isArray( menu[0] ),\n\t\tlengths  = d2 ? menu[0] : menu,\n\t\tlanguage = d2 ? menu[1] : menu;\n\n\tvar select = $('<select/>', {\n\t\t'name':          tableId+'_length',\n\t\t'aria-controls': tableId,\n\t\t'class':         classes.sLengthSelect\n\t} );\n\n\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\n\t\tselect[0][ i ] = new Option(\n\t\t\ttypeof language[i] === 'number' ?\n\t\t\t\tsettings.fnFormatNumber( language[i] ) :\n\t\t\t\tlanguage[i],\n\t\t\tlengths[i]\n\t\t);\n\t}\n\n\tvar div = $('<div><label/></div>').addClass( classes.sLength );\n\tif ( ! settings.aanFeatures.l ) {\n\t\tdiv[0].id = tableId+'_length';\n\t}\n\n\tdiv.children().append(\n\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\n\t);\n\n\t// Can't use `select` variable as user might provide their own and the\n\t// reference is broken by the use of outerHTML\n\t$('select', div)\n\t\t.val( settings._iDisplayLength )\n\t\t.on( 'change.DT', function(e) {\n\t\t\t_fnLengthChange( settings, $(this).val() );\n\t\t\t_fnDraw( settings );\n\t\t} );\n\n\t// Update node value whenever anything changes the table's length\n\t$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\n\t\tif ( settings === s ) {\n\t\t\t$('select', div).val( len );\n\t\t}\n\t} );\n\n\treturn div[0];\n}\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Note that most of the paging logic is done in\n * DataTable.ext.pager\n */\n\n/**\n * Generate the node required for default pagination\n *  @param {object} oSettings dataTables settings object\n *  @returns {node} Pagination feature node\n *  @memberof DataTable#oApi\n */\nfunction _fnFeatureHtmlPaginate ( settings )\n{\n\tvar\n\t\ttype   = settings.sPaginationType,\n\t\tplugin = DataTable.ext.pager[ type ],\n\t\tmodern = typeof plugin === 'function',\n\t\tredraw = function( settings ) {\n\t\t\t_fnDraw( settings );\n\t\t},\n\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\n\t\tfeatures = settings.aanFeatures;\n\n\tif ( ! modern ) {\n\t\tplugin.fnInit( settings, node, redraw );\n\t}\n\n\t/* Add a draw callback for the pagination on first instance, to update the paging display */\n\tif ( ! features.p )\n\t{\n\t\tnode.id = settings.sTableId+'_paginate';\n\n\t\tsettings.aoDrawCallback.push( {\n\t\t\t\"fn\": function( settings ) {\n\t\t\t\tif ( modern ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tstart      = settings._iDisplayStart,\n\t\t\t\t\t\tlen        = settings._iDisplayLength,\n\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\t\t\t\tall        = len === -1,\n\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),\n\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\t\t\tbuttons = plugin(page, pages),\n\t\t\t\t\t\ti, ien;\n\n\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {\n\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(\n\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tplugin.fnUpdate( settings, redraw );\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"sName\": \"pagination\"\n\t\t} );\n\t}\n\n\treturn node;\n}\n\n\n/**\n * Alter the display settings to change the page\n *  @param {object} settings DataTables settings object\n *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n *    \"next\" or \"last\" or page number to jump to (integer)\n *  @param [bool] redraw Automatically draw the update or not\n *  @returns {bool} true page has changed, false - no change\n *  @memberof DataTable#oApi\n */\nfunction _fnPageChange ( settings, action, redraw )\n{\n\tvar\n\t\tstart     = settings._iDisplayStart,\n\t\tlen       = settings._iDisplayLength,\n\t\trecords   = settings.fnRecordsDisplay();\n\n\tif ( records === 0 || len === -1 )\n\t{\n\t\tstart = 0;\n\t}\n\telse if ( typeof action === \"number\" )\n\t{\n\t\tstart = action * len;\n\n\t\tif ( start > records )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t}\n\telse if ( action == \"first\" )\n\t{\n\t\tstart = 0;\n\t}\n\telse if ( action == \"previous\" )\n\t{\n\t\tstart = len >= 0 ?\n\t\t\tstart - len :\n\t\t\t0;\n\n\t\tif ( start < 0 )\n\t\t{\n\t\t  start = 0;\n\t\t}\n\t}\n\telse if ( action == \"next\" )\n\t{\n\t\tif ( start + len < records )\n\t\t{\n\t\t\tstart += len;\n\t\t}\n\t}\n\telse if ( action == \"last\" )\n\t{\n\t\tstart = Math.floor( (records-1) / len) * len;\n\t}\n\telse\n\t{\n\t\t_fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\n\t}\n\n\tvar changed = settings._iDisplayStart !== start;\n\tsettings._iDisplayStart = start;\n\n\tif ( changed ) {\n\t\t_fnCallbackFire( settings, null, 'page', [settings] );\n\n\t\tif ( redraw ) {\n\t\t\t_fnDraw( settings );\n\t\t}\n\t}\n\telse {\n\t\t// No change event - paging was called, but no change\n\t\t_fnCallbackFire( settings, null, 'page-nc', [settings] );\n\t}\n\n\treturn changed;\n}\n\n\n\n/**\n * Generate the node required for the processing node\n *  @param {object} settings dataTables settings object\n *  @returns {node} Processing element\n *  @memberof DataTable#oApi\n */\nfunction _fnFeatureHtmlProcessing ( settings )\n{\n\treturn $('<div/>', {\n\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\n\t\t\t'class': settings.oClasses.sProcessing,\n\t\t\t'role': 'status'\n\t\t} )\n\t\t.html( settings.oLanguage.sProcessing )\n\t\t.append('<div><div></div><div></div><div></div><div></div></div>')\n\t\t.insertBefore( settings.nTable )[0];\n}\n\n\n/**\n * Display or hide the processing indicator\n *  @param {object} settings dataTables settings object\n *  @param {bool} show Show the processing indicator (true) or not (false)\n *  @memberof DataTable#oApi\n */\nfunction _fnProcessingDisplay ( settings, show )\n{\n\tif ( settings.oFeatures.bProcessing ) {\n\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\n\t}\n\n\t_fnCallbackFire( settings, null, 'processing', [settings, show] );\n}\n\n/**\n * Add any control elements for the table - specifically scrolling\n *  @param {object} settings dataTables settings object\n *  @returns {node} Node to add to the DOM\n *  @memberof DataTable#oApi\n */\nfunction _fnFeatureHtmlTable ( settings )\n{\n\tvar table = $(settings.nTable);\n\n\t// Scrolling from here on in\n\tvar scroll = settings.oScroll;\n\n\tif ( scroll.sX === '' && scroll.sY === '' ) {\n\t\treturn settings.nTable;\n\t}\n\n\tvar scrollX = scroll.sX;\n\tvar scrollY = scroll.sY;\n\tvar classes = settings.oClasses;\n\tvar caption = table.children('caption');\n\tvar captionSide = caption.length ? caption[0]._captionSide : null;\n\tvar headerClone = $( table[0].cloneNode(false) );\n\tvar footerClone = $( table[0].cloneNode(false) );\n\tvar footer = table.children('tfoot');\n\tvar _div = '<div/>';\n\tvar size = function ( s ) {\n\t\treturn !s ? null : _fnStringToCss( s );\n\t};\n\n\tif ( ! footer.length ) {\n\t\tfooter = null;\n\t}\n\n\t/*\n\t * The HTML structure that we want to generate in this function is:\n\t *  div - scroller\n\t *    div - scroll head\n\t *      div - scroll head inner\n\t *        table - scroll head table\n\t *          thead - thead\n\t *    div - scroll body\n\t *      table - table (master table)\n\t *        thead - thead clone for sizing\n\t *        tbody - tbody\n\t *    div - scroll foot\n\t *      div - scroll foot inner\n\t *        table - scroll foot table\n\t *          tfoot - tfoot\n\t */\n\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )\n\t\t.append(\n\t\t\t$(_div, { 'class': classes.sScrollHead } )\n\t\t\t\t.css( {\n\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\tborder: 0,\n\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t} )\n\t\t\t\t.append(\n\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )\n\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t'box-sizing': 'content-box',\n\t\t\t\t\t\t\twidth: scroll.sXInner || '100%'\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\theaderClone\n\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t.append( captionSide === 'top' ? caption : null )\n\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\ttable.children('thead')\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t)\n\t\t.append(\n\t\t\t$(_div, { 'class': classes.sScrollBody } )\n\t\t\t\t.css( {\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\twidth: size( scrollX )\n\t\t\t\t} )\n\t\t\t\t.append( table )\n\t\t);\n\n\tif ( footer ) {\n\t\tscroller.append(\n\t\t\t$(_div, { 'class': classes.sScrollFoot } )\n\t\t\t\t.css( {\n\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\tborder: 0,\n\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t} )\n\t\t\t\t.append(\n\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )\n\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\tfooterClone\n\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t.append( captionSide === 'bottom' ? caption : null )\n\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\ttable.children('tfoot')\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t);\n\t}\n\n\tvar children = scroller.children();\n\tvar scrollHead = children[0];\n\tvar scrollBody = children[1];\n\tvar scrollFoot = footer ? children[2] : null;\n\n\t// When the body is scrolled, then we also want to scroll the headers\n\tif ( scrollX ) {\n\t\t$(scrollBody).on( 'scroll.DT', function (e) {\n\t\t\tvar scrollLeft = this.scrollLeft;\n\n\t\t\tscrollHead.scrollLeft = scrollLeft;\n\n\t\t\tif ( footer ) {\n\t\t\t\tscrollFoot.scrollLeft = scrollLeft;\n\t\t\t}\n\t\t} );\n\t}\n\n\t$(scrollBody).css('max-height', scrollY);\n\tif (! scroll.bCollapse) {\n\t\t$(scrollBody).css('height', scrollY);\n\t}\n\n\tsettings.nScrollHead = scrollHead;\n\tsettings.nScrollBody = scrollBody;\n\tsettings.nScrollFoot = scrollFoot;\n\n\t// On redraw - align columns\n\tsettings.aoDrawCallback.push( {\n\t\t\"fn\": _fnScrollDraw,\n\t\t\"sName\": \"scrolling\"\n\t} );\n\n\treturn scroller[0];\n}\n\n\n\n/**\n * Update the header, footer and body tables for resizing - i.e. column\n * alignment.\n *\n * Welcome to the most horrible function DataTables. The process that this\n * function follows is basically:\n *   1. Re-create the table inside the scrolling div\n *   2. Take live measurements from the DOM\n *   3. Apply the measurements to align the columns\n *   4. Clean up\n *\n *  @param {object} settings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnScrollDraw ( settings )\n{\n\t// Given that this is such a monster function, a lot of variables are use\n\t// to try and keep the minimised size as small as possible\n\tvar\n\t\tscroll         = settings.oScroll,\n\t\tscrollX        = scroll.sX,\n\t\tscrollXInner   = scroll.sXInner,\n\t\tscrollY        = scroll.sY,\n\t\tbarWidth       = scroll.iBarWidth,\n\t\tdivHeader      = $(settings.nScrollHead),\n\t\tdivHeaderStyle = divHeader[0].style,\n\t\tdivHeaderInner = divHeader.children('div'),\n\t\tdivHeaderInnerStyle = divHeaderInner[0].style,\n\t\tdivHeaderTable = divHeaderInner.children('table'),\n\t\tdivBodyEl      = settings.nScrollBody,\n\t\tdivBody        = $(divBodyEl),\n\t\tdivBodyStyle   = divBodyEl.style,\n\t\tdivFooter      = $(settings.nScrollFoot),\n\t\tdivFooterInner = divFooter.children('div'),\n\t\tdivFooterTable = divFooterInner.children('table'),\n\t\theader         = $(settings.nTHead),\n\t\ttable          = $(settings.nTable),\n\t\ttableEl        = table[0],\n\t\ttableStyle     = tableEl.style,\n\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,\n\t\tbrowser        = settings.oBrowser,\n\t\tie67           = browser.bScrollOversize,\n\t\tdtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\n\t\theaderTrgEls, footerTrgEls,\n\t\theaderSrcEls, footerSrcEls,\n\t\theaderCopy, footerCopy,\n\t\theaderWidths=[], footerWidths=[],\n\t\theaderContent=[], footerContent=[],\n\t\tidx, correction, sanityWidth,\n\t\tzeroOut = function(nSizer) {\n\t\t\tvar style = nSizer.style;\n\t\t\tstyle.paddingTop = \"0\";\n\t\t\tstyle.paddingBottom = \"0\";\n\t\t\tstyle.borderTopWidth = \"0\";\n\t\t\tstyle.borderBottomWidth = \"0\";\n\t\t\tstyle.height = 0;\n\t\t};\n\n\t// If the scrollbar visibility has changed from the last draw, we need to\n\t// adjust the column sizes as the table width will have changed to account\n\t// for the scrollbar\n\tvar scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\t\n\tif ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\n\t\tsettings.scrollBarVis = scrollBarVis;\n\t\t_fnAdjustColumnSizing( settings );\n\t\treturn; // adjust column sizing will call this function again\n\t}\n\telse {\n\t\tsettings.scrollBarVis = scrollBarVis;\n\t}\n\n\t/*\n\t * 1. Re-create the table inside the scrolling div\n\t */\n\n\t// Remove the old minimised thead and tfoot elements in the inner table\n\ttable.children('thead, tfoot').remove();\n\n\tif ( footer ) {\n\t\tfooterCopy = footer.clone().prependTo( table );\n\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\t\tfooterSrcEls = footerCopy.find('tr');\n\t\tfooterCopy.find('[id]').removeAttr('id');\n\t}\n\n\t// Clone the current header and footer elements and then place it into the inner table\n\theaderCopy = header.clone().prependTo( table );\n\theaderTrgEls = header.find('tr'); // original header is in its own table\n\theaderSrcEls = headerCopy.find('tr');\n\theaderCopy.find('th, td').removeAttr('tabindex');\n\theaderCopy.find('[id]').removeAttr('id');\n\n\n\t/*\n\t * 2. Take live measurements from the DOM - do not alter the DOM itself!\n\t */\n\n\t// Remove old sizing and apply the calculated column widths\n\t// Get the unique column headers in the newly created (cloned) header. We want to apply the\n\t// calculated sizes to this header\n\tif ( ! scrollX )\n\t{\n\t\tdivBodyStyle.width = '100%';\n\t\tdivHeader[0].style.width = '100%';\n\t}\n\n\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\n\t\tidx = _fnVisibleToColumnIndex( settings, i );\n\t\tel.style.width = settings.aoColumns[idx].sWidth;\n\t} );\n\n\tif ( footer ) {\n\t\t_fnApplyToChildren( function(n) {\n\t\t\tn.style.width = \"\";\n\t\t}, footerSrcEls );\n\t}\n\n\t// Size the table as a whole\n\tsanityWidth = table.outerWidth();\n\tif ( scrollX === \"\" ) {\n\t\t// No x scrolling\n\t\ttableStyle.width = \"100%\";\n\n\t\t// IE7 will make the width of the table when 100% include the scrollbar\n\t\t// - which is shouldn't. When there is a scrollbar we need to take this\n\t\t// into account.\n\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\n\t\t\tdivBody.css('overflow-y') == \"scroll\")\n\t\t) {\n\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\n\t\t}\n\n\t\t// Recalculate the sanity width\n\t\tsanityWidth = table.outerWidth();\n\t}\n\telse if ( scrollXInner !== \"\" ) {\n\t\t// legacy x scroll inner has been given - use it\n\t\ttableStyle.width = _fnStringToCss(scrollXInner);\n\n\t\t// Recalculate the sanity width\n\t\tsanityWidth = table.outerWidth();\n\t}\n\n\t// Hidden header should have zero height, so remove padding and borders. Then\n\t// set the width based on the real headers\n\n\t// Apply all styles in one pass\n\t_fnApplyToChildren( zeroOut, headerSrcEls );\n\n\t// Read all widths in next pass\n\t_fnApplyToChildren( function(nSizer) {\n\t\tvar style = window.getComputedStyle ?\n\t\t\twindow.getComputedStyle(nSizer).width :\n\t\t\t_fnStringToCss( $(nSizer).width() );\n\n\t\theaderContent.push( nSizer.innerHTML );\n\t\theaderWidths.push( style );\n\t}, headerSrcEls );\n\n\t// Apply all widths in final pass\n\t_fnApplyToChildren( function(nToSize, i) {\n\t\tnToSize.style.width = headerWidths[i];\n\t}, headerTrgEls );\n\n\t$(headerSrcEls).css('height', 0);\n\n\t/* Same again with the footer if we have one */\n\tif ( footer )\n\t{\n\t\t_fnApplyToChildren( zeroOut, footerSrcEls );\n\n\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\tfooterContent.push( nSizer.innerHTML );\n\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t}, footerSrcEls );\n\n\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\tnToSize.style.width = footerWidths[i];\n\t\t}, footerTrgEls );\n\n\t\t$(footerSrcEls).height(0);\n\t}\n\n\n\t/*\n\t * 3. Apply the measurements\n\t */\n\n\t// \"Hide\" the header and footer that we used for the sizing. We need to keep\n\t// the content of the cell so that the width applied to the header and body\n\t// both match, but we want to hide it completely. We want to also fix their\n\t// width to what they currently are\n\t_fnApplyToChildren( function(nSizer, i) {\n\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\">'+headerContent[i]+'</div>';\n\t\tnSizer.childNodes[0].style.height = \"0\";\n\t\tnSizer.childNodes[0].style.overflow = \"hidden\";\n\t\tnSizer.style.width = headerWidths[i];\n\t}, headerSrcEls );\n\n\tif ( footer )\n\t{\n\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\">'+footerContent[i]+'</div>';\n\t\t\tnSizer.childNodes[0].style.height = \"0\";\n\t\t\tnSizer.childNodes[0].style.overflow = \"hidden\";\n\t\t\tnSizer.style.width = footerWidths[i];\n\t\t}, footerSrcEls );\n\t}\n\n\t// Sanity check that the table is of a sensible width. If not then we are going to get\n\t// misalignment - try to prevent this by not allowing the table to shrink below its min width\n\tif ( Math.round(table.outerWidth()) < Math.round(sanityWidth) )\n\t{\n\t\t// The min width depends upon if we have a vertical scrollbar visible or not */\n\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\n\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?\n\t\t\t\tsanityWidth+barWidth :\n\t\t\t\tsanityWidth;\n\n\t\t// IE6/7 are a law unto themselves...\n\t\tif ( ie67 && (divBodyEl.scrollHeight >\n\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\n\t\t) {\n\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );\n\t\t}\n\n\t\t// And give the user a warning that we've stopped the table getting too small\n\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {\n\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );\n\t\t}\n\t}\n\telse\n\t{\n\t\tcorrection = '100%';\n\t}\n\n\t// Apply to the container elements\n\tdivBodyStyle.width = _fnStringToCss( correction );\n\tdivHeaderStyle.width = _fnStringToCss( correction );\n\n\tif ( footer ) {\n\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );\n\t}\n\n\n\t/*\n\t * 4. Clean up\n\t */\n\tif ( ! scrollY ) {\n\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n\t\t * the scrollbar height from the visible display, rather than adding it on. We need to\n\t\t * set the height in order to sort this. Don't want to do it in any other browsers.\n\t\t */\n\t\tif ( ie67 ) {\n\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\n\t\t}\n\t}\n\n\t/* Finally set the width's of the header and footer tables */\n\tvar iOuterWidth = table.outerWidth();\n\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\n\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\n\n\t// Figure out if there are scrollbar present - if so then we need a the header and footer to\n\t// provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\n\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\n\n\tif ( footer ) {\n\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\n\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n\t}\n\n\t// Correct DOM ordering for colgroup - comes before the thead\n\ttable.children('colgroup').insertBefore( table.children('thead') );\n\n\t/* Adjust the position of the header in case we loose the y-scrollbar */\n\tdivBody.trigger('scroll');\n\n\t// If sorting or filtering has occurred, jump the scrolling back to the top\n\t// only if we aren't holding the position\n\tif ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\n\t\tdivBodyEl.scrollTop = 0;\n\t}\n}\n\n\n\n/**\n * Apply a given function to the display child nodes of an element array (typically\n * TD children of TR rows\n *  @param {function} fn Method to apply to the objects\n *  @param array {nodes} an1 List of elements to look through for display children\n *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n *  @memberof DataTable#oApi\n */\nfunction _fnApplyToChildren( fn, an1, an2 )\n{\n\tvar index=0, i=0, iLen=an1.length;\n\tvar nNode1, nNode2;\n\n\twhile ( i < iLen ) {\n\t\tnNode1 = an1[i].firstChild;\n\t\tnNode2 = an2 ? an2[i].firstChild : null;\n\n\t\twhile ( nNode1 ) {\n\t\t\tif ( nNode1.nodeType === 1 ) {\n\t\t\t\tif ( an2 ) {\n\t\t\t\t\tfn( nNode1, nNode2, index );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfn( nNode1, index );\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\tnNode1 = nNode1.nextSibling;\n\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;\n\t\t}\n\n\t\ti++;\n\t}\n}\n\n\n\nvar __re_html_remove = /<.*?>/g;\n\n\n/**\n * Calculate the width of columns for the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnCalculateColumnWidths ( oSettings )\n{\n\tvar\n\t\ttable = oSettings.nTable,\n\t\tcolumns = oSettings.aoColumns,\n\t\tscroll = oSettings.oScroll,\n\t\tscrollY = scroll.sY,\n\t\tscrollX = scroll.sX,\n\t\tscrollXInner = scroll.sXInner,\n\t\tcolumnCount = columns.length,\n\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\n\t\theaderCells = $('th', oSettings.nTHead),\n\t\ttableWidthAttr = table.getAttribute('width'), // from DOM element\n\t\ttableContainer = table.parentNode,\n\t\tuserInputs = false,\n\t\ti, column, columnIdx, width, outerWidth,\n\t\tbrowser = oSettings.oBrowser,\n\t\tie67 = browser.bScrollOversize;\n\n\tvar styleWidth = table.style.width;\n\tif ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\n\t\ttableWidthAttr = styleWidth;\n\t}\n\n\t/* Convert any user input sizes into pixel sizes */\n\tvar sizes = _fnConvertToWidth(_pluck(columns, 'sWidthOrig'), tableContainer);\n\n\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\tcolumn = columns[ visibleColumns[i] ];\n\n\t\tif ( column.sWidth !== null ) {\n\t\t\tcolumn.sWidth = sizes[i];\n\n\t\t\tuserInputs = true;\n\t\t}\n\t}\n\n\t/* If the number of columns in the DOM equals the number that we have to\n\t * process in DataTables, then we can use the offsets that are created by\n\t * the web- browser. No custom sizes can be set in order for this to happen,\n\t * nor scrolling used\n\t */\n\tif ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\n\t     columnCount == _fnVisbleColumns( oSettings ) &&\n\t     columnCount == headerCells.length\n\t) {\n\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\tvar colIdx = _fnVisibleToColumnIndex( oSettings, i );\n\n\t\t\tif ( colIdx !== null ) {\n\t\t\t\tcolumns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Otherwise construct a single row, worst case, table with the widest\n\t\t// node in the data, assign any user defined widths, then insert it into\n\t\t// the DOM and allow the browser to do all the hard work of calculating\n\t\t// table widths\n\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n\t\t\t.css( 'visibility', 'hidden' )\n\t\t\t.removeAttr( 'id' );\n\n\t\t// Clean up the table body\n\t\ttmpTable.find('tbody tr').remove();\n\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\n\n\t\t// Clone the table header and footer - we can't use the header / footer\n\t\t// from the cloned table, since if scrolling is active, the table's\n\t\t// real header and footer are contained in different table tags\n\t\ttmpTable.find('thead, tfoot').remove();\n\t\ttmpTable\n\t\t\t.append( $(oSettings.nTHead).clone() )\n\t\t\t.append( $(oSettings.nTFoot).clone() );\n\n\t\t// Remove any assigned widths from the footer (from scrolling)\n\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');\n\n\t\t// Apply custom sizing to the cloned header\n\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\n\n\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\tcolumn = columns[ visibleColumns[i] ];\n\n\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\n\t\t\t\t_fnStringToCss( column.sWidthOrig ) :\n\t\t\t\t'';\n\n\t\t\t// For scrollX we need to force the column width otherwise the\n\t\t\t// browser will collapse it. If this width is smaller than the\n\t\t\t// width the column requires, then it will have no effect\n\t\t\tif ( column.sWidthOrig && scrollX ) {\n\t\t\t\t$( headerCells[i] ).append( $('<div/>').css( {\n\t\t\t\t\twidth: column.sWidthOrig,\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\tpadding: 0,\n\t\t\t\t\tborder: 0,\n\t\t\t\t\theight: 1\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\n\t\t// Find the widest cell for each column and put it into the table\n\t\tif ( oSettings.aoData.length ) {\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tcolumnIdx = visibleColumns[i];\n\t\t\t\tcolumn = columns[ columnIdx ];\n\n\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )\n\t\t\t\t\t.clone( false )\n\t\t\t\t\t.append( column.sContentPadding )\n\t\t\t\t\t.appendTo( tr );\n\t\t\t}\n\t\t}\n\n\t\t// Tidy the temporary table - remove name attributes so there aren't\n\t\t// duplicated in the dom (radio elements for example)\n\t\t$('[name]', tmpTable).removeAttr('name');\n\n\t\t// Table has been built, attach to the document so we can work with it.\n\t\t// A holding element is used, positioned at the top of the container\n\t\t// with minimal height, so it has no effect on if the container scrolls\n\t\t// or not. Otherwise it might trigger scrolling when it actually isn't\n\t\t// needed\n\t\tvar holder = $('<div/>').css( scrollX || scrollY ?\n\t\t\t\t{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\theight: 1,\n\t\t\t\t\tright: 0,\n\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t} :\n\t\t\t\t{}\n\t\t\t)\n\t\t\t.append( tmpTable )\n\t\t\t.appendTo( tableContainer );\n\n\t\t// When scrolling (X or Y) we want to set the width of the table as \n\t\t// appropriate. However, when not scrolling leave the table width as it\n\t\t// is. This results in slightly different, but I think correct behaviour\n\t\tif ( scrollX && scrollXInner ) {\n\t\t\ttmpTable.width( scrollXInner );\n\t\t}\n\t\telse if ( scrollX ) {\n\t\t\ttmpTable.css( 'width', 'auto' );\n\t\t\ttmpTable.removeAttr('width');\n\n\t\t\t// If there is no width attribute or style, then allow the table to\n\t\t\t// collapse\n\t\t\tif ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\n\t\t\t\ttmpTable.width( tableContainer.clientWidth );\n\t\t\t}\n\t\t}\n\t\telse if ( scrollY ) {\n\t\t\ttmpTable.width( tableContainer.clientWidth );\n\t\t}\n\t\telse if ( tableWidthAttr ) {\n\t\t\ttmpTable.width( tableWidthAttr );\n\t\t}\n\n\t\t// Get the width of each column in the constructed table - we need to\n\t\t// know the inner width (so it can be assigned to the other table's\n\t\t// cells) and the outer width so we can calculate the full width of the\n\t\t// table. This is safe since DataTables requires a unique cell for each\n\t\t// column, but if ever a header can span multiple columns, this will\n\t\t// need to be modified.\n\t\tvar total = 0;\n\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\tvar cell = $(headerCells[i]);\n\t\t\tvar border = cell.outerWidth() - cell.width();\n\n\t\t\t// Use getBounding... where possible (not IE8-) because it can give\n\t\t\t// sub-pixel accuracy, which we then want to round up!\n\t\t\tvar bounding = browser.bBounding ?\n\t\t\t\tMath.ceil( headerCells[i].getBoundingClientRect().width ) :\n\t\t\t\tcell.outerWidth();\n\n\t\t\t// Total is tracked to remove any sub-pixel errors as the outerWidth\n\t\t\t// of the table might not equal the total given here (IE!).\n\t\t\ttotal += bounding;\n\n\t\t\t// Width for each column to use\n\t\t\tcolumns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );\n\t\t}\n\n\t\ttable.style.width = _fnStringToCss( total );\n\n\t\t// Finished with the table - ditch it\n\t\tholder.remove();\n\t}\n\n\t// If there is a width attr, we want to attach an event listener which\n\t// allows the table sizing to automatically adjust when the window is\n\t// resized. Use the width attr rather than CSS, since we can't know if the\n\t// CSS is a relative value or absolute - DOM read is always px.\n\tif ( tableWidthAttr ) {\n\t\ttable.style.width = _fnStringToCss( tableWidthAttr );\n\t}\n\n\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\n\t\tvar bindResize = function () {\n\t\t\t$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\n\t\t\t\t_fnAdjustColumnSizing( oSettings );\n\t\t\t} ) );\n\t\t};\n\n\t\t// IE6/7 will crash if we bind a resize event handler on page load.\n\t\t// To be removed in 1.11 which drops IE6/7 support\n\t\tif ( ie67 ) {\n\t\t\tsetTimeout( bindResize, 1000 );\n\t\t}\n\t\telse {\n\t\t\tbindResize();\n\t\t}\n\n\t\toSettings._reszEvt = true;\n\t}\n}\n\n\n/**\n * Throttle the calls to a function. Arguments and context are maintained for\n * the throttled function\n *  @param {function} fn Function to be called\n *  @param {int} [freq=200] call frequency in mS\n *  @returns {function} wrapped function\n *  @memberof DataTable#oApi\n */\nvar _fnThrottle = DataTable.util.throttle;\n\n\n/**\n * Convert a set of CSS units width to pixels (e.g. 2em)\n *  @param {string[]} widths widths to be converted\n *  @param {node} parent parent to get the with for (required for relative widths) - optional\n *  @returns {int[]} widths in pixels\n *  @memberof DataTable#oApi\n */\nfunction _fnConvertToWidth ( widths, parent )\n{\n\tvar els = [];\n\tvar results = [];\n\n\t// Add the elements in a single loop so we only need to reflow once\n\tfor (var i=0 ; i<widths.length ; i++) {\n\t\tif (widths[i]) {\n\t\t\tels.push(\n\t\t\t\t$('<div/>')\n\t\t\t\t\t.css( 'width', _fnStringToCss( widths[i] ) )\n\t\t\t\t\t.appendTo( parent || document.body )\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\tels.push(null);\n\t\t}\n\t}\n\n\t// Get the sizes (will reflow once)\n\tfor (var i=0 ; i<widths.length ; i++) {\n\t\tresults.push(els[i] ? els[i][0].offsetWidth : null);\n\t}\n\n\t// Tidy\n\t$(els).remove();\n\n\treturn results;\n}\n\n\n/**\n * Get the widest node\n *  @param {object} settings dataTables settings object\n *  @param {int} colIdx column of interest\n *  @returns {node} widest table node\n *  @memberof DataTable#oApi\n */\nfunction _fnGetWidestNode( settings, colIdx )\n{\n\tvar idx = _fnGetMaxLenString( settings, colIdx );\n\tif ( idx < 0 ) {\n\t\treturn null;\n\t}\n\n\tvar data = settings.aoData[ idx ];\n\treturn ! data.nTr ? // Might not have been created when deferred rendering\n\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\n\t\tdata.anCells[ colIdx ];\n}\n\n\n/**\n * Get the maximum strlen for each data column\n *  @param {object} settings dataTables settings object\n *  @param {int} colIdx column of interest\n *  @returns {string} max string length for each column\n *  @memberof DataTable#oApi\n */\nfunction _fnGetMaxLenString( settings, colIdx )\n{\n\tvar s, max=-1, maxIdx = -1;\n\n\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';\n\t\ts = s.replace( __re_html_remove, '' );\n\t\ts = s.replace( /&nbsp;/g, ' ' );\n\n\t\tif ( s.length > max ) {\n\t\t\tmax = s.length;\n\t\t\tmaxIdx = i;\n\t\t}\n\t}\n\n\treturn maxIdx;\n}\n\n\n/**\n * Append a CSS unit (only if required) to a string\n *  @param {string} value to css-ify\n *  @returns {string} value with css unit\n *  @memberof DataTable#oApi\n */\nfunction _fnStringToCss( s )\n{\n\tif ( s === null ) {\n\t\treturn '0px';\n\t}\n\n\tif ( typeof s == 'number' ) {\n\t\treturn s < 0 ?\n\t\t\t'0px' :\n\t\t\ts+'px';\n\t}\n\n\t// Check it has a unit character already\n\treturn s.match(/\\d$/) ?\n\t\ts+'px' :\n\t\ts;\n}\n\n\n\nfunction _fnSortFlatten ( settings )\n{\n\tvar\n\t\ti, iLen, k, kLen,\n\t\taSort = [],\n\t\taiOrig = [],\n\t\taoColumns = settings.aoColumns,\n\t\taDataSort, iCol, sType, srcCol,\n\t\tfixed = settings.aaSortingFixed,\n\t\tfixedObj = $.isPlainObject( fixed ),\n\t\tnestedSort = [],\n\t\tadd = function ( a ) {\n\t\t\tif ( a.length && ! Array.isArray( a[0] ) ) {\n\t\t\t\t// 1D array\n\t\t\t\tnestedSort.push( a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 2D array\n\t\t\t\t$.merge( nestedSort, a );\n\t\t\t}\n\t\t};\n\n\t// Build the sort array, with pre-fix and post-fix options if they have been\n\t// specified\n\tif ( Array.isArray( fixed ) ) {\n\t\tadd( fixed );\n\t}\n\n\tif ( fixedObj && fixed.pre ) {\n\t\tadd( fixed.pre );\n\t}\n\n\tadd( settings.aaSorting );\n\n\tif (fixedObj && fixed.post ) {\n\t\tadd( fixed.post );\n\t}\n\n\tfor ( i=0 ; i<nestedSort.length ; i++ )\n\t{\n\t\tsrcCol = nestedSort[i][0];\n\t\taDataSort = aoColumns[ srcCol ].aDataSort;\n\n\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\n\t\t{\n\t\t\tiCol = aDataSort[k];\n\t\t\tsType = aoColumns[ iCol ].sType || 'string';\n\n\t\t\tif ( nestedSort[i]._idx === undefined ) {\n\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\n\t\t\t}\n\n\t\t\taSort.push( {\n\t\t\t\tsrc:       srcCol,\n\t\t\t\tcol:       iCol,\n\t\t\t\tdir:       nestedSort[i][1],\n\t\t\t\tindex:     nestedSort[i]._idx,\n\t\t\t\ttype:      sType,\n\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn aSort;\n}\n\n/**\n * Change the order of the table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n *  @todo This really needs split up!\n */\nfunction _fnSort ( oSettings )\n{\n\tvar\n\t\ti, ien, iLen, j, jLen, k, kLen,\n\t\tsDataType, nTh,\n\t\taiOrig = [],\n\t\toExtSort = DataTable.ext.type.order,\n\t\taoData = oSettings.aoData,\n\t\taoColumns = oSettings.aoColumns,\n\t\taDataSort, data, iCol, sType, oSort,\n\t\tformatters = 0,\n\t\tsortCol,\n\t\tdisplayMaster = oSettings.aiDisplayMaster,\n\t\taSort;\n\n\t// Resolve any column types that are unknown due to addition or invalidation\n\t// @todo Can this be moved into a 'data-ready' handler which is called when\n\t//   data is going to be used in the table?\n\t_fnColumnTypes( oSettings );\n\n\taSort = _fnSortFlatten( oSettings );\n\n\tfor ( i=0, ien=aSort.length ; i<ien ; i++ ) {\n\t\tsortCol = aSort[i];\n\n\t\t// Track if we can use the fast sort algorithm\n\t\tif ( sortCol.formatter ) {\n\t\t\tformatters++;\n\t\t}\n\n\t\t// Load the data needed for the sort, for each cell\n\t\t_fnSortData( oSettings, sortCol.col );\n\t}\n\n\t/* No sorting required if server-side or no sorting array */\n\tif ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\n\t{\n\t\t// Create a value - key array of the current row positions such that we can use their\n\t\t// current position during the sort, if values match, in order to perform stable sorting\n\t\tfor ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\n\t\t\taiOrig[ displayMaster[i] ] = i;\n\t\t}\n\n\t\t/* Do the sort - here we want multi-column sorting based on a given data source (column)\n\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n\t\t * follow on it's own, but this is what we want (example two column sorting):\n\t\t *  fnLocalSorting = function(a,b){\n\t\t *    var iTest;\n\t\t *    iTest = oSort['string-asc']('data11', 'data12');\n\t\t *      if (iTest !== 0)\n\t\t *        return iTest;\n\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');\n\t\t *    if (iTest !== 0)\n\t\t *      return iTest;\n\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n\t\t *  }\n\t\t * Basically we have a test for each sorting column, if the data in that column is equal,\n\t\t * test the next column. If all columns match, then we use a numeric sort on the row\n\t\t * positions in the original data array to provide a stable sort.\n\t\t *\n\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around\n\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting\n\t\t * methods which do not have a pre-sort formatting function.\n\t\t */\n\t\tif ( formatters === aSort.length ) {\n\t\t\t// All sort types have formatting functions\n\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\tvar\n\t\t\t\t\tx, y, k, test, sort,\n\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\tdataB = aoData[b]._aSortData;\n\n\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\tsort = aSort[k];\n\n\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\ty = dataB[ sort.col ];\n\n\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tx = aiOrig[a];\n\t\t\t\ty = aiOrig[b];\n\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t} );\n\t\t}\n\t\telse {\n\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)\n\t\t\t// Not all sort types have formatting methods, so we have to call their sorting\n\t\t\t// methods.\n\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\tvar\n\t\t\t\t\tx, y, k, l, test, sort, fn,\n\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\tdataB = aoData[b]._aSortData;\n\n\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\tsort = aSort[k];\n\n\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\ty = dataB[ sort.col ];\n\n\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\n\t\t\t\t\ttest = fn( x, y );\n\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\treturn test;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tx = aiOrig[a];\n\t\t\t\ty = aiOrig[b];\n\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t} );\n\t\t}\n\t}\n\n\t/* Tell the draw function that we have sorted the data */\n\toSettings.bSorted = true;\n}\n\n\nfunction _fnSortAria ( settings )\n{\n\tvar label;\n\tvar nextSort;\n\tvar columns = settings.aoColumns;\n\tvar aSort = _fnSortFlatten( settings );\n\tvar oAria = settings.oLanguage.oAria;\n\n\t// ARIA attributes - need to loop all columns, to update all (removing old\n\t// attributes as needed)\n\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t{\n\t\tvar col = columns[i];\n\t\tvar asSorting = col.asSorting;\n\t\tvar sTitle = col.ariaTitle || col.sTitle.replace( /<.*?>/g, \"\" );\n\t\tvar th = col.nTh;\n\n\t\t// IE7 is throwing an error when setting these properties with jQuery's\n\t\t// attr() and removeAttr() methods...\n\t\tth.removeAttribute('aria-sort');\n\n\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\t\tif ( col.bSortable ) {\n\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {\n\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\n\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnextSort = asSorting[0];\n\t\t\t}\n\n\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?\n\t\t\t\toAria.sSortAscending :\n\t\t\t\toAria.sSortDescending\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\tlabel = sTitle;\n\t\t}\n\n\t\tth.setAttribute('aria-label', label);\n\t}\n}\n\n\n/**\n * Function to run on user sort request\n *  @param {object} settings dataTables settings object\n *  @param {node} attachTo node to attach the handler to\n *  @param {int} colIdx column sorting index\n *  @param {boolean} [append=false] Append the requested sort to the existing\n *    sort if true (i.e. multi-column sort)\n *  @param {function} [callback] callback function\n *  @memberof DataTable#oApi\n */\nfunction _fnSortListener ( settings, colIdx, append, callback )\n{\n\tvar col = settings.aoColumns[ colIdx ];\n\tvar sorting = settings.aaSorting;\n\tvar asSorting = col.asSorting;\n\tvar nextSortIdx;\n\tvar next = function ( a, overflow ) {\n\t\tvar idx = a._idx;\n\t\tif ( idx === undefined ) {\n\t\t\tidx = $.inArray( a[1], asSorting );\n\t\t}\n\n\t\treturn idx+1 < asSorting.length ?\n\t\t\tidx+1 :\n\t\t\toverflow ?\n\t\t\t\tnull :\n\t\t\t\t0;\n\t};\n\n\t// Convert to 2D array if needed\n\tif ( typeof sorting[0] === 'number' ) {\n\t\tsorting = settings.aaSorting = [ sorting ];\n\t}\n\n\t// If appending the sort then we are multi-column sorting\n\tif ( append && settings.oFeatures.bSortMulti ) {\n\t\t// Are we already doing some kind of sort on this column?\n\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\n\n\t\tif ( sortIdx !== -1 ) {\n\t\t\t// Yes, modify the sort\n\t\t\tnextSortIdx = next( sorting[sortIdx], true );\n\n\t\t\tif ( nextSortIdx === null && sorting.length === 1 ) {\n\t\t\t\tnextSortIdx = 0; // can't remove sorting completely\n\t\t\t}\n\n\t\t\tif ( nextSortIdx === null ) {\n\t\t\t\tsorting.splice( sortIdx, 1 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsorting[sortIdx][1] = asSorting[ nextSortIdx ];\n\t\t\t\tsorting[sortIdx]._idx = nextSortIdx;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No sort on this column yet\n\t\t\tsorting.push( [ colIdx, asSorting[0], 0 ] );\n\t\t\tsorting[sorting.length-1]._idx = 0;\n\t\t}\n\t}\n\telse if ( sorting.length && sorting[0][0] == colIdx ) {\n\t\t// Single column - already sorting on this column, modify the sort\n\t\tnextSortIdx = next( sorting[0] );\n\n\t\tsorting.length = 1;\n\t\tsorting[0][1] = asSorting[ nextSortIdx ];\n\t\tsorting[0]._idx = nextSortIdx;\n\t}\n\telse {\n\t\t// Single column - sort only on this column\n\t\tsorting.length = 0;\n\t\tsorting.push( [ colIdx, asSorting[0] ] );\n\t\tsorting[0]._idx = 0;\n\t}\n\n\t// Run the sort by calling a full redraw\n\t_fnReDraw( settings );\n\n\t// callback used for async user interaction\n\tif ( typeof callback == 'function' ) {\n\t\tcallback( settings );\n\t}\n}\n\n\n/**\n * Attach a sort handler (click) to a node\n *  @param {object} settings dataTables settings object\n *  @param {node} attachTo node to attach the handler to\n *  @param {int} colIdx column sorting index\n *  @param {function} [callback] callback function\n *  @memberof DataTable#oApi\n */\nfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )\n{\n\tvar col = settings.aoColumns[ colIdx ];\n\n\t_fnBindAction( attachTo, {}, function (e) {\n\t\t/* If the column is not sortable - don't to anything */\n\t\tif ( col.bSortable === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If processing is enabled use a timeout to allow the processing\n\t\t// display to be shown - otherwise to it synchronously\n\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t_fnProcessingDisplay( settings, true );\n\n\t\t\tsetTimeout( function() {\n\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\n\t\t\t\t// In server-side processing, the draw callback will remove the\n\t\t\t\t// processing display\n\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {\n\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t}\n\t\t\t}, 0 );\n\t\t}\n\t\telse {\n\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\t\t}\n\t} );\n}\n\n\n/**\n * Set the sorting classes on table's body, Note: it is safe to call this function\n * when bSort and bSortClasses are false\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnSortingClasses( settings )\n{\n\tvar oldSort = settings.aLastSort;\n\tvar sortClass = settings.oClasses.sSortColumn;\n\tvar sort = _fnSortFlatten( settings );\n\tvar features = settings.oFeatures;\n\tvar i, ien, colIdx;\n\n\tif ( features.bSort && features.bSortClasses ) {\n\t\t// Remove old sorting classes\n\t\tfor ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\n\t\t\tcolIdx = oldSort[i].src;\n\n\t\t\t// Remove column sorting\n\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t.removeClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t}\n\n\t\t// Add new column sorting\n\t\tfor ( i=0, ien=sort.length ; i<ien ; i++ ) {\n\t\t\tcolIdx = sort[i].src;\n\n\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t.addClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t}\n\t}\n\n\tsettings.aLastSort = sort;\n}\n\n\n// Get the data to sort a column, be it from cache, fresh (populating the\n// cache), or from a sort formatter\nfunction _fnSortData( settings, idx )\n{\n\t// Custom sorting function - provided by the sort data type\n\tvar column = settings.aoColumns[ idx ];\n\tvar customSort = DataTable.ext.order[ column.sSortDataType ];\n\tvar customData;\n\n\tif ( customSort ) {\n\t\tcustomData = customSort.call( settings.oInstance, settings, idx,\n\t\t\t_fnColumnIndexToVisible( settings, idx )\n\t\t);\n\t}\n\n\t// Use / populate cache\n\tvar row, cellData;\n\tvar formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\n\n\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\trow = settings.aoData[i];\n\n\t\tif ( ! row._aSortData ) {\n\t\t\trow._aSortData = [];\n\t\t}\n\n\t\tif ( ! row._aSortData[idx] || customSort ) {\n\t\t\tcellData = customSort ?\n\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there\n\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );\n\n\t\t\trow._aSortData[ idx ] = formatter ?\n\t\t\t\tformatter( cellData ) :\n\t\t\t\tcellData;\n\t\t}\n\t}\n}\n\n\n\n/**\n * Save the state of a table\n *  @param {object} oSettings dataTables settings object\n *  @memberof DataTable#oApi\n */\nfunction _fnSaveState ( settings )\n{\n\tif (settings._bLoadingState) {\n\t\treturn;\n\t}\n\n\t/* Store the interesting variables */\n\tvar state = {\n\t\ttime:    +new Date(),\n\t\tstart:   settings._iDisplayStart,\n\t\tlength:  settings._iDisplayLength,\n\t\torder:   $.extend( true, [], settings.aaSorting ),\n\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),\n\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {\n\t\t\treturn {\n\t\t\t\tvisible: col.bVisible,\n\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )\n\t\t\t};\n\t\t} )\n\t};\n\n\tsettings.oSavedState = state;\n\t_fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\n\t\n\tif ( settings.oFeatures.bStateSave && !settings.bDestroying )\n\t{\n\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, state );\n\t}\t\n}\n\n\n/**\n * Attempt to load a saved table state\n *  @param {object} oSettings dataTables settings object\n *  @param {object} oInit DataTables init object so we can override settings\n *  @param {function} callback Callback to execute when the state has been loaded\n *  @memberof DataTable#oApi\n */\nfunction _fnLoadState ( settings, oInit, callback )\n{\n\tif ( ! settings.oFeatures.bStateSave ) {\n\t\tcallback();\n\t\treturn;\n\t}\n\n\tvar loaded = function(state) {\n\t\t_fnImplementState(settings, state, callback);\n\t}\n\n\tvar state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\n\n\tif ( state !== undefined ) {\n\t\t_fnImplementState( settings, state, callback );\n\t}\n\t// otherwise, wait for the loaded callback to be executed\n\n\treturn true;\n}\n\nfunction _fnImplementState ( settings, s, callback) {\n\tvar i, ien;\n\tvar columns = settings.aoColumns;\n\tsettings._bLoadingState = true;\n\n\t// When StateRestore was introduced the state could now be implemented at any time\n\t// Not just initialisation. To do this an api instance is required in some places\n\tvar api = settings._bInitComplete ? new DataTable.Api(settings) : null;\n\n\tif ( ! s || ! s.time ) {\n\t\tsettings._bLoadingState = false;\n\t\tcallback();\n\t\treturn;\n\t}\n\n\t// Allow custom and plug-in manipulation functions to alter the saved data set and\n\t// cancelling of loading by returning false\n\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );\n\tif ( $.inArray( false, abStateLoad ) !== -1 ) {\n\t\tsettings._bLoadingState = false;\n\t\tcallback();\n\t\treturn;\n\t}\n\n\t// Reject old data\n\tvar duration = settings.iStateDuration;\n\tif ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\n\t\tsettings._bLoadingState = false;\n\t\tcallback();\n\t\treturn;\n\t}\n\n\t// Number of columns have changed - all bets are off, no restore of settings\n\tif ( s.columns && columns.length !== s.columns.length ) {\n\t\tsettings._bLoadingState = false;\n\t\tcallback();\n\t\treturn;\n\t}\n\n\t// Store the saved state so it might be accessed at any time\n\tsettings.oLoadedState = $.extend( true, {}, s );\n\n\t// Page Length\n\tif ( s.length !== undefined ) {\n\t\t// If already initialised just set the value directly so that the select element is also updated\n\t\tif (api) {\n\t\t\tapi.page.len(s.length)\n\t\t}\n\t\telse {\n\t\t\tsettings._iDisplayLength   = s.length;\n\t\t}\n\t}\n\n\t// Restore key features - todo - for 1.11 this needs to be done by\n\t// subscribed events\n\tif ( s.start !== undefined ) {\n\t\tif(api === null) {\n\t\t\tsettings._iDisplayStart    = s.start;\n\t\t\tsettings.iInitDisplayStart = s.start;\n\t\t}\n\t\telse {\n\t\t\t_fnPageChange(settings, s.start/settings._iDisplayLength);\n\t\t}\n\t}\n\n\t// Order\n\tif ( s.order !== undefined ) {\n\t\tsettings.aaSorting = [];\n\t\t$.each( s.order, function ( i, col ) {\n\t\t\tsettings.aaSorting.push( col[0] >= columns.length ?\n\t\t\t\t[ 0, col[1] ] :\n\t\t\t\tcol\n\t\t\t);\n\t\t} );\n\t}\n\n\t// Search\n\tif ( s.search !== undefined ) {\n\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\n\t}\n\n\t// Columns\n\tif ( s.columns ) {\n\t\tfor ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\n\t\t\tvar col = s.columns[i];\n\n\t\t\t// Visibility\n\t\t\tif ( col.visible !== undefined ) {\n\t\t\t\t// If the api is defined, the table has been initialised so we need to use it rather than internal settings\n\t\t\t\tif (api) {\n\t\t\t\t\t// Don't redraw the columns on every iteration of this loop, we will do this at the end instead\n\t\t\t\t\tapi.column(i).visible(col.visible, false);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcolumns[i].bVisible = col.visible;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Search\n\t\t\tif ( col.search !== undefined ) {\n\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\n\t\t\t}\n\t\t}\n\t\t\n\t\t// If the api is defined then we need to adjust the columns once the visibility has been changed\n\t\tif (api) {\n\t\t\tapi.columns.adjust();\n\t\t}\n\t}\n\n\tsettings._bLoadingState = false;\n\t_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );\n\tcallback();\n};\n\n\n/**\n * Return the settings object for a particular table\n *  @param {node} table table we are using as a dataTable\n *  @returns {object} Settings object - or null if not found\n *  @memberof DataTable#oApi\n */\nfunction _fnSettingsFromNode ( table )\n{\n\tvar settings = DataTable.settings;\n\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );\n\n\treturn idx !== -1 ?\n\t\tsettings[ idx ] :\n\t\tnull;\n}\n\n\n/**\n * Log an error message\n *  @param {object} settings dataTables settings object\n *  @param {int} level log error messages, or display them to the user\n *  @param {string} msg error message\n *  @param {int} tn Technical note id to get more information about the error.\n *  @memberof DataTable#oApi\n */\nfunction _fnLog( settings, level, msg, tn )\n{\n\tmsg = 'DataTables warning: '+\n\t\t(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\n\n\tif ( tn ) {\n\t\tmsg += '. For more information about this error, please see '+\n\t\t'https://datatables.net/tn/'+tn;\n\t}\n\n\tif ( ! level  ) {\n\t\t// Backwards compatibility pre 1.10\n\t\tvar ext = DataTable.ext;\n\t\tvar type = ext.sErrMode || ext.errMode;\n\n\t\tif ( settings ) {\n\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\n\t\t}\n\n\t\tif ( type == 'alert' ) {\n\t\t\talert( msg );\n\t\t}\n\t\telse if ( type == 'throw' ) {\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\telse if ( typeof type == 'function' ) {\n\t\t\ttype( settings, tn, msg );\n\t\t}\n\t}\n\telse if ( window.console && console.log ) {\n\t\tconsole.log( msg );\n\t}\n}\n\n\n/**\n * See if a property is defined on one object, if so assign it to the other object\n *  @param {object} ret target object\n *  @param {object} src source object\n *  @param {string} name property\n *  @param {string} [mappedName] name to map too - optional, name used if not given\n *  @memberof DataTable#oApi\n */\nfunction _fnMap( ret, src, name, mappedName )\n{\n\tif ( Array.isArray( name ) ) {\n\t\t$.each( name, function (i, val) {\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\t_fnMap( ret, src, val[0], val[1] );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnMap( ret, src, val );\n\t\t\t}\n\t\t} );\n\n\t\treturn;\n\t}\n\n\tif ( mappedName === undefined ) {\n\t\tmappedName = name;\n\t}\n\n\tif ( src[name] !== undefined ) {\n\t\tret[mappedName] = src[name];\n\t}\n}\n\n\n/**\n * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n * shallow copy arrays. The reason we need to do this, is that we don't want to\n * deep copy array init values (such as aaSorting) since the dev wouldn't be\n * able to override them, but we do want to deep copy arrays.\n *  @param {object} out Object to extend\n *  @param {object} extender Object from which the properties will be applied to\n *      out\n *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n *      independent copy with the exception of the `data` or `aaData` parameters\n *      if they are present. This is so you can pass in a collection to\n *      DataTables and have that used as your data source without breaking the\n *      references\n *  @returns {object} out Reference, just for convenience - out === the return.\n *  @memberof DataTable#oApi\n *  @todo This doesn't take account of arrays inside the deep copied objects.\n */\nfunction _fnExtend( out, extender, breakRefs )\n{\n\tvar val;\n\n\tfor ( var prop in extender ) {\n\t\tif ( extender.hasOwnProperty(prop) ) {\n\t\t\tval = extender[prop];\n\n\t\t\tif ( $.isPlainObject( val ) ) {\n\t\t\t\tif ( ! $.isPlainObject( out[prop] ) ) {\n\t\t\t\t\tout[prop] = {};\n\t\t\t\t}\n\t\t\t\t$.extend( true, out[prop], val );\n\t\t\t}\n\t\t\telse if ( breakRefs && prop !== 'data' && prop !== 'aaData' && Array.isArray(val) ) {\n\t\t\t\tout[prop] = val.slice();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tout[prop] = val;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn out;\n}\n\n\n/**\n * Bind an event handers to allow a click or return key to activate the callback.\n * This is good for accessibility since a return on the keyboard will have the\n * same effect as a click, if the element has focus.\n *  @param {element} n Element to bind the action to\n *  @param {object} oData Data object to pass to the triggered function\n *  @param {function} fn Callback function for when the event is triggered\n *  @memberof DataTable#oApi\n */\nfunction _fnBindAction( n, oData, fn )\n{\n\t$(n)\n\t\t.on( 'click.DT', oData, function (e) {\n\t\t\t\t$(n).trigger('blur'); // Remove focus outline for mouse users\n\t\t\t\tfn(e);\n\t\t\t} )\n\t\t.on( 'keypress.DT', oData, function (e){\n\t\t\t\tif ( e.which === 13 ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tfn(e);\n\t\t\t\t}\n\t\t\t} )\n\t\t.on( 'selectstart.DT', function () {\n\t\t\t\t/* Take the brutal approach to cancelling text selection */\n\t\t\t\treturn false;\n\t\t\t} );\n}\n\n\n/**\n * Register a callback function. Easily allows a callback function to be added to\n * an array store of callback functions that can then all be called together.\n *  @param {object} oSettings dataTables settings object\n *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n *  @param {function} fn Function to be called back\n *  @param {string} sName Identifying name for the callback (i.e. a label)\n *  @memberof DataTable#oApi\n */\nfunction _fnCallbackReg( oSettings, sStore, fn, sName )\n{\n\tif ( fn )\n\t{\n\t\toSettings[sStore].push( {\n\t\t\t\"fn\": fn,\n\t\t\t\"sName\": sName\n\t\t} );\n\t}\n}\n\n\n/**\n * Fire callback functions and trigger events. Note that the loop over the\n * callback array store is done backwards! Further note that you do not want to\n * fire off triggers in time sensitive applications (for example cell creation)\n * as its slow.\n *  @param {object} settings dataTables settings object\n *  @param {string} callbackArr Name of the array storage for the callbacks in\n *      oSettings\n *  @param {string} eventName Name of the jQuery custom event to trigger. If\n *      null no trigger is fired\n *  @param {array} args Array of arguments to pass to the callback function /\n *      trigger\n *  @memberof DataTable#oApi\n */\nfunction _fnCallbackFire( settings, callbackArr, eventName, args )\n{\n\tvar ret = [];\n\n\tif ( callbackArr ) {\n\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\n\t\t\treturn val.fn.apply( settings.oInstance, args );\n\t\t} );\n\t}\n\n\tif ( eventName !== null ) {\n\t\tvar e = $.Event( eventName+'.dt' );\n\t\tvar table = $(settings.nTable);\n\n\t\ttable.trigger( e, args );\n\n\t\t// If not yet attached to the document, trigger the event\n\t\t// on the body directly to sort of simulate the bubble\n\t\tif (table.parents('body').length === 0) {\n\t\t\t$('body').trigger( e, args );\n\t\t}\n\n\t\tret.push( e.result );\n\t}\n\n\treturn ret;\n}\n\n\nfunction _fnLengthOverflow ( settings )\n{\n\tvar\n\t\tstart = settings._iDisplayStart,\n\t\tend = settings.fnDisplayEnd(),\n\t\tlen = settings._iDisplayLength;\n\n\t/* If we have space to show extra rows (backing up from the end point - then do so */\n\tif ( start >= end )\n\t{\n\t\tstart = end - len;\n\t}\n\n\t// Keep the start record on the current page\n\tstart -= (start % len);\n\n\tif ( len === -1 || start < 0 )\n\t{\n\t\tstart = 0;\n\t}\n\n\tsettings._iDisplayStart = start;\n}\n\n\nfunction _fnRenderer( settings, type )\n{\n\tvar renderer = settings.renderer;\n\tvar host = DataTable.ext.renderer[type];\n\n\tif ( $.isPlainObject( renderer ) && renderer[type] ) {\n\t\t// Specific renderer for this type. If available use it, otherwise use\n\t\t// the default.\n\t\treturn host[renderer[type]] || host._;\n\t}\n\telse if ( typeof renderer === 'string' ) {\n\t\t// Common renderer - if there is one available for this type use it,\n\t\t// otherwise use the default\n\t\treturn host[renderer] || host._;\n\t}\n\n\t// Use the default\n\treturn host._;\n}\n\n\n/**\n * Detect the data source being used for the table. Used to simplify the code\n * a little (ajax) and to make it compress a little smaller.\n *\n *  @param {object} settings dataTables settings object\n *  @returns {string} Data source\n *  @memberof DataTable#oApi\n */\nfunction _fnDataSource ( settings )\n{\n\tif ( settings.oFeatures.bServerSide ) {\n\t\treturn 'ssp';\n\t}\n\telse if ( settings.ajax || settings.sAjaxSource ) {\n\t\treturn 'ajax';\n\t}\n\treturn 'dom';\n}\n\n\n\n\n/**\n * Computed structure of the DataTables API, defined by the options passed to\n * `DataTable.Api.register()` when building the API.\n *\n * The structure is built in order to speed creation and extension of the Api\n * objects since the extensions are effectively pre-parsed.\n *\n * The array is an array of objects with the following structure, where this\n * base array represents the Api prototype base:\n *\n *     [\n *       {\n *         name:      'data'                -- string   - Property name\n *         val:       function () {},       -- function - Api method (or undefined if just an object\n *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n *       },\n *       {\n *         name:     'row'\n *         val:       {},\n *         methodExt: [ ... ],\n *         propExt:   [\n *           {\n *             name:      'data'\n *             val:       function () {},\n *             methodExt: [ ... ],\n *             propExt:   [ ... ]\n *           },\n *           ...\n *         ]\n *       }\n *     ]\n *\n * @type {Array}\n * @ignore\n */\nvar __apiStruct = [];\n\n\n/**\n * `Array.prototype` reference.\n *\n * @type object\n * @ignore\n */\nvar __arrayProto = Array.prototype;\n\n\n/**\n * Abstraction for `context` parameter of the `Api` constructor to allow it to\n * take several different forms for ease of use.\n *\n * Each of the input parameter types will be converted to a DataTables settings\n * object where possible.\n *\n * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n *   of:\n *\n *   * `string` - jQuery selector. Any DataTables' matching the given selector\n *     with be found and used.\n *   * `node` - `TABLE` node which has already been formed into a DataTable.\n *   * `jQuery` - A jQuery object of `TABLE` nodes.\n *   * `object` - DataTables settings object\n *   * `DataTables.Api` - API instance\n * @return {array|null} Matching DataTables settings objects. `null` or\n *   `undefined` is returned if no matching DataTable is found.\n * @ignore\n */\nvar _toSettings = function ( mixed )\n{\n\tvar idx, jq;\n\tvar settings = DataTable.settings;\n\tvar tables = $.map( settings, function (el, i) {\n\t\treturn el.nTable;\n\t} );\n\n\tif ( ! mixed ) {\n\t\treturn [];\n\t}\n\telse if ( mixed.nTable && mixed.oApi ) {\n\t\t// DataTables settings object\n\t\treturn [ mixed ];\n\t}\n\telse if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\n\t\t// Table node\n\t\tidx = $.inArray( mixed, tables );\n\t\treturn idx !== -1 ? [ settings[idx] ] : null;\n\t}\n\telse if ( mixed && typeof mixed.settings === 'function' ) {\n\t\treturn mixed.settings().toArray();\n\t}\n\telse if ( typeof mixed === 'string' ) {\n\t\t// jQuery selector\n\t\tjq = $(mixed);\n\t}\n\telse if ( mixed instanceof $ ) {\n\t\t// jQuery object (also DataTables instance)\n\t\tjq = mixed;\n\t}\n\n\tif ( jq ) {\n\t\treturn jq.map( function(i) {\n\t\t\tidx = $.inArray( this, tables );\n\t\t\treturn idx !== -1 ? settings[idx] : null;\n\t\t} ).toArray();\n\t}\n};\n\n\n/**\n * DataTables API class - used to control and interface with  one or more\n * DataTables enhanced tables.\n *\n * The API class is heavily based on jQuery, presenting a chainable interface\n * that you can use to interact with tables. Each instance of the API class has\n * a \"context\" - i.e. the tables that it will operate on. This could be a single\n * table, all tables on a page or a sub-set thereof.\n *\n * Additionally the API is designed to allow you to easily work with the data in\n * the tables, retrieving and manipulating it as required. This is done by\n * presenting the API class as an array like interface. The contents of the\n * array depend upon the actions requested by each method (for example\n * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n * return an array of objects or arrays depending upon your table's\n * configuration). The API object has a number of array like methods (`push`,\n * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n * `unique` etc) to assist your working with the data held in a table.\n *\n * Most methods (those which return an Api instance) are chainable, which means\n * the return from a method call also has all of the methods available that the\n * top level object had. For example, these two calls are equivalent:\n *\n *     // Not chained\n *     api.row.add( {...} );\n *     api.draw();\n *\n *     // Chained\n *     api.row.add( {...} ).draw();\n *\n * @class DataTable.Api\n * @param {array|object|string|jQuery} context DataTable identifier. This is\n *   used to define which DataTables enhanced tables this API will operate on.\n *   Can be one of:\n *\n *   * `string` - jQuery selector. Any DataTables' matching the given selector\n *     with be found and used.\n *   * `node` - `TABLE` node which has already been formed into a DataTable.\n *   * `jQuery` - A jQuery object of `TABLE` nodes.\n *   * `object` - DataTables settings object\n * @param {array} [data] Data to initialise the Api instance with.\n *\n * @example\n *   // Direct initialisation during DataTables construction\n *   var api = $('#example').DataTable();\n *\n * @example\n *   // Initialisation using a DataTables jQuery object\n *   var api = $('#example').dataTable().api();\n *\n * @example\n *   // Initialisation as a constructor\n *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n */\n_Api = function ( context, data )\n{\n\tif ( ! (this instanceof _Api) ) {\n\t\treturn new _Api( context, data );\n\t}\n\n\tvar settings = [];\n\tvar ctxSettings = function ( o ) {\n\t\tvar a = _toSettings( o );\n\t\tif ( a ) {\n\t\t\tsettings.push.apply( settings, a );\n\t\t}\n\t};\n\n\tif ( Array.isArray( context ) ) {\n\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\tctxSettings( context[i] );\n\t\t}\n\t}\n\telse {\n\t\tctxSettings( context );\n\t}\n\n\t// Remove duplicates\n\tthis.context = _unique( settings );\n\n\t// Initial data\n\tif ( data ) {\n\t\t$.merge( this, data );\n\t}\n\n\t// selector\n\tthis.selector = {\n\t\trows: null,\n\t\tcols: null,\n\t\topts: null\n\t};\n\n\t_Api.extend( this, this, __apiStruct );\n};\n\nDataTable.Api = _Api;\n\n// Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n// isPlainObject.\n$.extend( _Api.prototype, {\n\tany: function ()\n\t{\n\t\treturn this.count() !== 0;\n\t},\n\n\n\tconcat:  __arrayProto.concat,\n\n\n\tcontext: [], // array of table settings objects\n\n\n\tcount: function ()\n\t{\n\t\treturn this.flatten().length;\n\t},\n\n\n\teach: function ( fn )\n\t{\n\t\tfor ( var i=0, ien=this.length ; i<ien; i++ ) {\n\t\t\tfn.call( this, this[i], i, this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\n\teq: function ( idx )\n\t{\n\t\tvar ctx = this.context;\n\n\t\treturn ctx.length > idx ?\n\t\t\tnew _Api( ctx[idx], this[idx] ) :\n\t\t\tnull;\n\t},\n\n\n\tfilter: function ( fn )\n\t{\n\t\tvar a = [];\n\n\t\tif ( __arrayProto.filter ) {\n\t\t\ta = __arrayProto.filter.call( this, fn, this );\n\t\t}\n\t\telse {\n\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {\n\t\t\t\t\ta.push( this[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new _Api( this.context, a );\n\t},\n\n\n\tflatten: function ()\n\t{\n\t\tvar a = [];\n\t\treturn new _Api( this.context, a.concat.apply( a, this.toArray() ) );\n\t},\n\n\n\tjoin:    __arrayProto.join,\n\n\n\tindexOf: __arrayProto.indexOf || function (obj, start)\n\t{\n\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\n\t\t\tif ( this[i] === obj ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\titerator: function ( flatten, type, fn, alwaysNew ) {\n\t\tvar\n\t\t\ta = [], ret,\n\t\t\ti, ien, j, jen,\n\t\t\tcontext = this.context,\n\t\t\trows, items, item,\n\t\t\tselector = this.selector;\n\n\t\t// Argument shifting\n\t\tif ( typeof flatten === 'string' ) {\n\t\t\talwaysNew = fn;\n\t\t\tfn = type;\n\t\t\ttype = flatten;\n\t\t\tflatten = false;\n\t\t}\n\n\t\tfor ( i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\tvar apiInst = new _Api( context[i] );\n\n\t\t\tif ( type === 'table' ) {\n\t\t\t\tret = fn.call( apiInst, context[i], i );\n\n\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\ta.push( ret );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( type === 'columns' || type === 'rows' ) {\n\t\t\t\t// this has same length as context - one entry for each table\n\t\t\t\tret = fn.call( apiInst, context[i], this[i], i );\n\n\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\ta.push( ret );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\n\t\t\t\t// columns and rows share the same structure.\n\t\t\t\t// 'this' is an array of column indexes for each context\n\t\t\t\titems = this[i];\n\n\t\t\t\tif ( type === 'column-rows' ) {\n\t\t\t\t\trows = _selector_row_indexes( context[i], selector.opts );\n\t\t\t\t}\n\n\t\t\t\tfor ( j=0, jen=items.length ; j<jen ; j++ ) {\n\t\t\t\t\titem = items[j];\n\n\t\t\t\t\tif ( type === 'cell' ) {\n\t\t\t\t\t\tret = fn.call( apiInst, context[i], item.row, item.column, i, j );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tret = fn.call( apiInst, context[i], item, i, j, rows );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( a.length || alwaysNew ) {\n\t\t\tvar api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\n\t\t\tvar apiSelector = api.selector;\n\t\t\tapiSelector.rows = selector.rows;\n\t\t\tapiSelector.cols = selector.cols;\n\t\t\tapiSelector.opts = selector.opts;\n\t\t\treturn api;\n\t\t}\n\t\treturn this;\n\t},\n\n\n\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\n\t{\n\t\t// Bit cheeky...\n\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );\n\t},\n\n\n\tlength:  0,\n\n\n\tmap: function ( fn )\n\t{\n\t\tvar a = [];\n\n\t\tif ( __arrayProto.map ) {\n\t\t\ta = __arrayProto.map.call( this, fn, this );\n\t\t}\n\t\telse {\n\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\ta.push( fn.call( this, this[i], i ) );\n\t\t\t}\n\t\t}\n\n\t\treturn new _Api( this.context, a );\n\t},\n\n\n\tpluck: function ( prop )\n\t{\n\t\tvar fn = DataTable.util.get(prop);\n\n\t\treturn this.map( function ( el ) {\n\t\t\treturn fn(el);\n\t\t} );\n\t},\n\n\tpop:     __arrayProto.pop,\n\n\n\tpush:    __arrayProto.push,\n\n\n\t// Does not return an API instance\n\treduce: __arrayProto.reduce || function ( fn, init )\n\t{\n\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );\n\t},\n\n\n\treduceRight: __arrayProto.reduceRight || function ( fn, init )\n\t{\n\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );\n\t},\n\n\n\treverse: __arrayProto.reverse,\n\n\n\t// Object with rows, columns and opts\n\tselector: null,\n\n\n\tshift:   __arrayProto.shift,\n\n\n\tslice: function () {\n\t\treturn new _Api( this.context, this );\n\t},\n\n\n\tsort:    __arrayProto.sort, // ? name - order?\n\n\n\tsplice:  __arrayProto.splice,\n\n\n\ttoArray: function ()\n\t{\n\t\treturn __arrayProto.slice.call( this );\n\t},\n\n\n\tto$: function ()\n\t{\n\t\treturn $( this );\n\t},\n\n\n\ttoJQuery: function ()\n\t{\n\t\treturn $( this );\n\t},\n\n\n\tunique: function ()\n\t{\n\t\treturn new _Api( this.context, _unique(this) );\n\t},\n\n\n\tunshift: __arrayProto.unshift\n} );\n\n\n_Api.extend = function ( scope, obj, ext )\n{\n\t// Only extend API instances and static properties of the API\n\tif ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\n\t\treturn;\n\t}\n\n\tvar\n\t\ti, ien,\n\t\tstruct,\n\t\tmethodScoping = function ( scope, fn, struc ) {\n\t\t\treturn function () {\n\t\t\t\tvar ret = fn.apply( scope, arguments );\n\n\t\t\t\t// Method extension\n\t\t\t\t_Api.extend( ret, ret, struc.methodExt );\n\t\t\t\treturn ret;\n\t\t\t};\n\t\t};\n\n\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\tstruct = ext[i];\n\n\t\t// Value\n\t\tobj[ struct.name ] = struct.type === 'function' ?\n\t\t\tmethodScoping( scope, struct.val, struct ) :\n\t\t\tstruct.type === 'object' ?\n\t\t\t\t{} :\n\t\t\t\tstruct.val;\n\n\t\tobj[ struct.name ].__dt_wrapper = true;\n\n\t\t// Property extension\n\t\t_Api.extend( scope, obj[ struct.name ], struct.propExt );\n\t}\n};\n\n\n// @todo - Is there need for an augment function?\n// _Api.augment = function ( inst, name )\n// {\n// \t// Find src object in the structure from the name\n// \tvar parts = name.split('.');\n\n// \t_Api.extend( inst, obj );\n// };\n\n\n//     [\n//       {\n//         name:      'data'                -- string   - Property name\n//         val:       function () {},       -- function - Api method (or undefined if just an object\n//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n//       },\n//       {\n//         name:     'row'\n//         val:       {},\n//         methodExt: [ ... ],\n//         propExt:   [\n//           {\n//             name:      'data'\n//             val:       function () {},\n//             methodExt: [ ... ],\n//             propExt:   [ ... ]\n//           },\n//           ...\n//         ]\n//       }\n//     ]\n\n_Api.register = _api_register = function ( name, val )\n{\n\tif ( Array.isArray( name ) ) {\n\t\tfor ( var j=0, jen=name.length ; j<jen ; j++ ) {\n\t\t\t_Api.register( name[j], val );\n\t\t}\n\t\treturn;\n\t}\n\n\tvar\n\t\ti, ien,\n\t\their = name.split('.'),\n\t\tstruct = __apiStruct,\n\t\tkey, method;\n\n\tvar find = function ( src, name ) {\n\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {\n\t\t\tif ( src[i].name === name ) {\n\t\t\t\treturn src[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\n\tfor ( i=0, ien=heir.length ; i<ien ; i++ ) {\n\t\tmethod = heir[i].indexOf('()') !== -1;\n\t\tkey = method ?\n\t\t\their[i].replace('()', '') :\n\t\t\their[i];\n\n\t\tvar src = find( struct, key );\n\t\tif ( ! src ) {\n\t\t\tsrc = {\n\t\t\t\tname:      key,\n\t\t\t\tval:       {},\n\t\t\t\tmethodExt: [],\n\t\t\t\tpropExt:   [],\n\t\t\t\ttype:      'object'\n\t\t\t};\n\t\t\tstruct.push( src );\n\t\t}\n\n\t\tif ( i === ien-1 ) {\n\t\t\tsrc.val = val;\n\t\t\tsrc.type = typeof val === 'function' ?\n\t\t\t\t'function' :\n\t\t\t\t$.isPlainObject( val ) ?\n\t\t\t\t\t'object' :\n\t\t\t\t\t'other';\n\t\t}\n\t\telse {\n\t\t\tstruct = method ?\n\t\t\t\tsrc.methodExt :\n\t\t\t\tsrc.propExt;\n\t\t}\n\t}\n};\n\n_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\n\t_Api.register( pluralName, val );\n\n\t_Api.register( singularName, function () {\n\t\tvar ret = val.apply( this, arguments );\n\n\t\tif ( ret === this ) {\n\t\t\t// Returned item is the API instance that was passed in, return it\n\t\t\treturn this;\n\t\t}\n\t\telse if ( ret instanceof _Api ) {\n\t\t\t// New API instance returned, want the value from the first item\n\t\t\t// in the returned array for the singular result.\n\t\t\treturn ret.length ?\n\t\t\t\tArray.isArray( ret[0] ) ?\n\t\t\t\t\tnew _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\n\t\t\t\t\tret[0] :\n\t\t\t\tundefined;\n\t\t}\n\n\t\t// Non-API return - just fire it back\n\t\treturn ret;\n\t} );\n};\n\n\n/**\n * Selector for HTML tables. Apply the given selector to the give array of\n * DataTables settings objects.\n *\n * @param {string|integer} [selector] jQuery selector string or integer\n * @param  {array} Array of DataTables settings objects to be filtered\n * @return {array}\n * @ignore\n */\nvar __table_selector = function ( selector, a )\n{\n\tif ( Array.isArray(selector) ) {\n\t\treturn $.map( selector, function (item) {\n\t\t\treturn __table_selector(item, a);\n\t\t} );\n\t}\n\n\t// Integer is used to pick out a table by index\n\tif ( typeof selector === 'number' ) {\n\t\treturn [ a[ selector ] ];\n\t}\n\n\t// Perform a jQuery selector on the table nodes\n\tvar nodes = $.map( a, function (el, i) {\n\t\treturn el.nTable;\n\t} );\n\n\treturn $(nodes)\n\t\t.filter( selector )\n\t\t.map( function (i) {\n\t\t\t// Need to translate back from the table node to the settings\n\t\t\tvar idx = $.inArray( this, nodes );\n\t\t\treturn a[ idx ];\n\t\t} )\n\t\t.toArray();\n};\n\n\n\n/**\n * Context selector for the API's context (i.e. the tables the API instance\n * refers to.\n *\n * @name    DataTable.Api#tables\n * @param {string|integer} [selector] Selector to pick which tables the iterator\n *   should operate on. If not given, all tables in the current context are\n *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n *   select multiple tables or as an integer to select a single table.\n * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n */\n_api_register( 'tables()', function ( selector ) {\n\t// A new instance is created if there was a selector specified\n\treturn selector !== undefined && selector !== null ?\n\t\tnew _Api( __table_selector( selector, this.context ) ) :\n\t\tthis;\n} );\n\n\n_api_register( 'table()', function ( selector ) {\n\tvar tables = this.tables( selector );\n\tvar ctx = tables.context;\n\n\t// Truncate to the first matched table\n\treturn ctx.length ?\n\t\tnew _Api( ctx[0] ) :\n\t\ttables;\n} );\n\n\n_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\treturn ctx.nTable;\n\t}, 1 );\n} );\n\n\n_api_registerPlural( 'tables().body()', 'table().body()' , function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\treturn ctx.nTBody;\n\t}, 1 );\n} );\n\n\n_api_registerPlural( 'tables().header()', 'table().header()' , function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\treturn ctx.nTHead;\n\t}, 1 );\n} );\n\n\n_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\treturn ctx.nTFoot;\n\t}, 1 );\n} );\n\n\n_api_registerPlural( 'tables().containers()', 'table().container()' , function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\treturn ctx.nTableWrapper;\n\t}, 1 );\n} );\n\n\n\n/**\n * Redraw the tables in the current context.\n */\n_api_register( 'draw()', function ( paging ) {\n\treturn this.iterator( 'table', function ( settings ) {\n\t\tif ( paging === 'page' ) {\n\t\t\t_fnDraw( settings );\n\t\t}\n\t\telse {\n\t\t\tif ( typeof paging === 'string' ) {\n\t\t\t\tpaging = paging === 'full-hold' ?\n\t\t\t\t\tfalse :\n\t\t\t\t\ttrue;\n\t\t\t}\n\n\t\t\t_fnReDraw( settings, paging===false );\n\t\t}\n\t} );\n} );\n\n\n\n/**\n * Get the current page index.\n *\n * @return {integer} Current page index (zero based)\n *//**\n * Set the current page.\n *\n * Note that if you attempt to show a page which does not exist, DataTables will\n * not throw an error, but rather reset the paging.\n *\n * @param {integer|string} action The paging action to take. This can be one of:\n *  * `integer` - The page index to jump to\n *  * `string` - An action to take:\n *    * `first` - Jump to first page.\n *    * `next` - Jump to the next page\n *    * `previous` - Jump to previous page\n *    * `last` - Jump to the last page.\n * @returns {DataTables.Api} this\n */\n_api_register( 'page()', function ( action ) {\n\tif ( action === undefined ) {\n\t\treturn this.page.info().page; // not an expensive call\n\t}\n\n\t// else, have an action to take on all tables\n\treturn this.iterator( 'table', function ( settings ) {\n\t\t_fnPageChange( settings, action );\n\t} );\n} );\n\n\n/**\n * Paging information for the first table in the current context.\n *\n * If you require paging information for another table, use the `table()` method\n * with a suitable selector.\n *\n * @return {object} Object with the following properties set:\n *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n *  * `pages` - Total number of pages\n *  * `start` - Display index for the first record shown on the current page\n *  * `end` - Display index for the last record shown on the current page\n *  * `length` - Display length (number of records). Note that generally `start\n *    + length = end`, but this is not always true, for example if there are\n *    only 2 records to show on the final page, with a length of 10.\n *  * `recordsTotal` - Full data set length\n *  * `recordsDisplay` - Data set length once the current filtering criterion\n *    are applied.\n */\n_api_register( 'page.info()', function ( action ) {\n\tif ( this.context.length === 0 ) {\n\t\treturn undefined;\n\t}\n\n\tvar\n\t\tsettings   = this.context[0],\n\t\tstart      = settings._iDisplayStart,\n\t\tlen        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\tall        = len === -1;\n\n\treturn {\n\t\t\"page\":           all ? 0 : Math.floor( start / len ),\n\t\t\"pages\":          all ? 1 : Math.ceil( visRecords / len ),\n\t\t\"start\":          start,\n\t\t\"end\":            settings.fnDisplayEnd(),\n\t\t\"length\":         len,\n\t\t\"recordsTotal\":   settings.fnRecordsTotal(),\n\t\t\"recordsDisplay\": visRecords,\n\t\t\"serverSide\":     _fnDataSource( settings ) === 'ssp'\n\t};\n} );\n\n\n/**\n * Get the current page length.\n *\n * @return {integer} Current page length. Note `-1` indicates that all records\n *   are to be shown.\n *//**\n * Set the current page length.\n *\n * @param {integer} Page length to set. Use `-1` to show all records.\n * @returns {DataTables.Api} this\n */\n_api_register( 'page.len()', function ( len ) {\n\t// Note that we can't call this function 'length()' because `length`\n\t// is a Javascript property of functions which defines how many arguments\n\t// the function expects.\n\tif ( len === undefined ) {\n\t\treturn this.context.length !== 0 ?\n\t\t\tthis.context[0]._iDisplayLength :\n\t\t\tundefined;\n\t}\n\n\t// else, set the page length\n\treturn this.iterator( 'table', function ( settings ) {\n\t\t_fnLengthChange( settings, len );\n\t} );\n} );\n\n\n\nvar __reload = function ( settings, holdPosition, callback ) {\n\t// Use the draw event to trigger a callback\n\tif ( callback ) {\n\t\tvar api = new _Api( settings );\n\n\t\tapi.one( 'draw', function () {\n\t\t\tcallback( api.ajax.json() );\n\t\t} );\n\t}\n\n\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t_fnReDraw( settings, holdPosition );\n\t}\n\telse {\n\t\t_fnProcessingDisplay( settings, true );\n\n\t\t// Cancel an existing request\n\t\tvar xhr = settings.jqXHR;\n\t\tif ( xhr && xhr.readyState !== 4 ) {\n\t\t\txhr.abort();\n\t\t}\n\n\t\t// Trigger xhr\n\t\t_fnBuildAjax( settings, [], function( json ) {\n\t\t\t_fnClearTable( settings );\n\n\t\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t_fnAddData( settings, data[i] );\n\t\t\t}\n\n\t\t\t_fnReDraw( settings, holdPosition );\n\t\t\t_fnProcessingDisplay( settings, false );\n\t\t} );\n\t}\n};\n\n\n/**\n * Get the JSON response from the last Ajax request that DataTables made to the\n * server. Note that this returns the JSON from the first table in the current\n * context.\n *\n * @return {object} JSON received from the server.\n */\n_api_register( 'ajax.json()', function () {\n\tvar ctx = this.context;\n\n\tif ( ctx.length > 0 ) {\n\t\treturn ctx[0].json;\n\t}\n\n\t// else return undefined;\n} );\n\n\n/**\n * Get the data submitted in the last Ajax request\n */\n_api_register( 'ajax.params()', function () {\n\tvar ctx = this.context;\n\n\tif ( ctx.length > 0 ) {\n\t\treturn ctx[0].oAjaxData;\n\t}\n\n\t// else return undefined;\n} );\n\n\n/**\n * Reload tables from the Ajax data source. Note that this function will\n * automatically re-draw the table when the remote data has been loaded.\n *\n * @param {boolean} [reset=true] Reset (default) or hold the current paging\n *   position. A full re-sort and re-filter is performed when this method is\n *   called, which is why the pagination reset is the default action.\n * @returns {DataTables.Api} this\n */\n_api_register( 'ajax.reload()', function ( callback, resetPaging ) {\n\treturn this.iterator( 'table', function (settings) {\n\t\t__reload( settings, resetPaging===false, callback );\n\t} );\n} );\n\n\n/**\n * Get the current Ajax URL. Note that this returns the URL from the first\n * table in the current context.\n *\n * @return {string} Current Ajax source URL\n *//**\n * Set the Ajax URL. Note that this will set the URL for all tables in the\n * current context.\n *\n * @param {string} url URL to set.\n * @returns {DataTables.Api} this\n */\n_api_register( 'ajax.url()', function ( url ) {\n\tvar ctx = this.context;\n\n\tif ( url === undefined ) {\n\t\t// get\n\t\tif ( ctx.length === 0 ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tctx = ctx[0];\n\n\t\treturn ctx.ajax ?\n\t\t\t$.isPlainObject( ctx.ajax ) ?\n\t\t\t\tctx.ajax.url :\n\t\t\t\tctx.ajax :\n\t\t\tctx.sAjaxSource;\n\t}\n\n\t// set\n\treturn this.iterator( 'table', function ( settings ) {\n\t\tif ( $.isPlainObject( settings.ajax ) ) {\n\t\t\tsettings.ajax.url = url;\n\t\t}\n\t\telse {\n\t\t\tsettings.ajax = url;\n\t\t}\n\t\t// No need to consider sAjaxSource here since DataTables gives priority\n\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n\t\t// value of `sAjaxSource` redundant.\n\t} );\n} );\n\n\n/**\n * Load data from the newly set Ajax URL. Note that this method is only\n * available when `ajax.url()` is used to set a URL. Additionally, this method\n * has the same effect as calling `ajax.reload()` but is provided for\n * convenience when setting a new URL. Like `ajax.reload()` it will\n * automatically redraw the table once the remote data has been loaded.\n *\n * @returns {DataTables.Api} this\n */\n_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\n\t// Same as a reload, but makes sense to present it for easy access after a\n\t// url change\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\t__reload( ctx, resetPaging===false, callback );\n\t} );\n} );\n\n\n\n\nvar _selector_run = function ( type, selector, selectFn, settings, opts )\n{\n\tvar\n\t\tout = [], res,\n\t\ta, i, ien, j, jen,\n\t\tselectorType = typeof selector;\n\n\t// Can't just check for isArray here, as an API or jQuery instance might be\n\t// given with their array like look\n\tif ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\n\t\tselector = [ selector ];\n\t}\n\n\tfor ( i=0, ien=selector.length ; i<ien ; i++ ) {\n\t\t// Only split on simple strings - complex expressions will be jQuery selectors\n\t\ta = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\n\t\t\tselector[i].split(',') :\n\t\t\t[ selector[i] ];\n\n\t\tfor ( j=0, jen=a.length ; j<jen ; j++ ) {\n\t\t\tres = selectFn( typeof a[j] === 'string' ? (a[j]).trim() : a[j] );\n\n\t\t\tif ( res && res.length ) {\n\t\t\t\tout = out.concat( res );\n\t\t\t}\n\t\t}\n\t}\n\n\t// selector extensions\n\tvar ext = _ext.selector[ type ];\n\tif ( ext.length ) {\n\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\tout = ext[i]( settings, opts, out );\n\t\t}\n\t}\n\n\treturn _unique( out );\n};\n\n\nvar _selector_opts = function ( opts )\n{\n\tif ( ! opts ) {\n\t\topts = {};\n\t}\n\n\t// Backwards compatibility for 1.9- which used the terminology filter rather\n\t// than search\n\tif ( opts.filter && opts.search === undefined ) {\n\t\topts.search = opts.filter;\n\t}\n\n\treturn $.extend( {\n\t\tsearch: 'none',\n\t\torder: 'current',\n\t\tpage: 'all'\n\t}, opts );\n};\n\n\nvar _selector_first = function ( inst )\n{\n\t// Reduce the API instance to the first item found\n\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {\n\t\tif ( inst[i].length > 0 ) {\n\t\t\t// Assign the first element to the first item in the instance\n\t\t\t// and truncate the instance and context\n\t\t\tinst[0] = inst[i];\n\t\t\tinst[0].length = 1;\n\t\t\tinst.length = 1;\n\t\t\tinst.context = [ inst.context[i] ];\n\n\t\t\treturn inst;\n\t\t}\n\t}\n\n\t// Not found - return an empty instance\n\tinst.length = 0;\n\treturn inst;\n};\n\n\nvar _selector_row_indexes = function ( settings, opts )\n{\n\tvar\n\t\ti, ien, tmp, a=[],\n\t\tdisplayFiltered = settings.aiDisplay,\n\t\tdisplayMaster = settings.aiDisplayMaster;\n\n\tvar\n\t\tsearch = opts.search,  // none, applied, removed\n\t\torder  = opts.order,   // applied, current, index (original - compatibility with 1.9)\n\t\tpage   = opts.page;    // all, current\n\n\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t// In server-side processing mode, most options are irrelevant since\n\t\t// rows not shown don't exist and the index order is the applied order\n\t\t// Removed is a special case - for consistency just return an empty\n\t\t// array\n\t\treturn search === 'removed' ?\n\t\t\t[] :\n\t\t\t_range( 0, displayMaster.length );\n\t}\n\telse if ( page == 'current' ) {\n\t\t// Current page implies that order=current and filter=applied, since it is\n\t\t// fairly senseless otherwise, regardless of what order and search actually\n\t\t// are\n\t\tfor ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\n\t\t\ta.push( displayFiltered[i] );\n\t\t}\n\t}\n\telse if ( order == 'current' || order == 'applied' ) {\n\t\tif ( search == 'none') {\n\t\t\ta = displayMaster.slice();\n\t\t}\n\t\telse if ( search == 'applied' ) {\n\t\t\ta = displayFiltered.slice();\n\t\t}\n\t\telse if ( search == 'removed' ) {\n\t\t\t// O(n+m) solution by creating a hash map\n\t\t\tvar displayFilteredMap = {};\n\n\t\t\tfor ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {\n\t\t\t\tdisplayFilteredMap[displayFiltered[i]] = null;\n\t\t\t}\n\n\t\t\ta = $.map( displayMaster, function (el) {\n\t\t\t\treturn ! displayFilteredMap.hasOwnProperty(el) ?\n\t\t\t\t\tel :\n\t\t\t\t\tnull;\n\t\t\t} );\n\t\t}\n\t}\n\telse if ( order == 'index' || order == 'original' ) {\n\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\tif ( search == 'none' ) {\n\t\t\t\ta.push( i );\n\t\t\t}\n\t\t\telse { // applied | removed\n\t\t\t\ttmp = $.inArray( i, displayFiltered );\n\n\t\t\t\tif ((tmp === -1 && search == 'removed') ||\n\t\t\t\t\t(tmp >= 0   && search == 'applied') )\n\t\t\t\t{\n\t\t\t\t\ta.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a;\n};\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Rows\n *\n * {}          - no selector - use all available rows\n * {integer}   - row aoData index\n * {node}      - TR node\n * {string}    - jQuery selector to apply to the TR elements\n * {array}     - jQuery array of nodes, or simply an array of TR nodes\n *\n */\nvar __row_selector = function ( settings, selector, opts )\n{\n\tvar rows;\n\tvar run = function ( sel ) {\n\t\tvar selInt = _intVal( sel );\n\t\tvar i, ien;\n\t\tvar aoData = settings.aoData;\n\n\t\t// Short cut - selector is a number and no options provided (default is\n\t\t// all records, so no need to check if the index is in there, since it\n\t\t// must be - dev error if the index doesn't exist).\n\t\tif ( selInt !== null && ! opts ) {\n\t\t\treturn [ selInt ];\n\t\t}\n\n\t\tif ( ! rows ) {\n\t\t\trows = _selector_row_indexes( settings, opts );\n\t\t}\n\n\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\n\t\t\t// Selector - integer\n\t\t\treturn [ selInt ];\n\t\t}\n\t\telse if ( sel === null || sel === undefined || sel === '' ) {\n\t\t\t// Selector - none\n\t\t\treturn rows;\n\t\t}\n\n\t\t// Selector - function\n\t\tif ( typeof sel === 'function' ) {\n\t\t\treturn $.map( rows, function (idx) {\n\t\t\t\tvar row = aoData[ idx ];\n\t\t\t\treturn sel( idx, row._aData, row.nTr ) ? idx : null;\n\t\t\t} );\n\t\t}\n\n\t\t// Selector - node\n\t\tif ( sel.nodeName ) {\n\t\t\tvar rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup\n\t\t\tvar cellIdx = sel._DT_CellIndex;\n\n\t\t\tif ( rowIdx !== undefined ) {\n\t\t\t\t// Make sure that the row is actually still present in the table\n\t\t\t\treturn aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?\n\t\t\t\t\t[ rowIdx ] :\n\t\t\t\t\t[];\n\t\t\t}\n\t\t\telse if ( cellIdx ) {\n\t\t\t\treturn aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?\n\t\t\t\t\t[ cellIdx.row ] :\n\t\t\t\t\t[];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar host = $(sel).closest('*[data-dt-row]');\n\t\t\t\treturn host.length ?\n\t\t\t\t\t[ host.data('dt-row') ] :\n\t\t\t\t\t[];\n\t\t\t}\n\t\t}\n\n\t\t// ID selector. Want to always be able to select rows by id, regardless\n\t\t// of if the tr element has been created or not, so can't rely upon\n\t\t// jQuery here - hence a custom implementation. This does not match\n\t\t// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n\t\t// but to select it using a CSS selector engine (like Sizzle or\n\t\t// querySelect) it would need to need to be escaped for some characters.\n\t\t// DataTables simplifies this for row selectors since you can select\n\t\t// only a row. A # indicates an id any anything that follows is the id -\n\t\t// unescaped.\n\t\tif ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\n\t\t\t// get row index from id\n\t\t\tvar rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];\n\t\t\tif ( rowObj !== undefined ) {\n\t\t\t\treturn [ rowObj.idx ];\n\t\t\t}\n\n\t\t\t// need to fall through to jQuery in case there is DOM id that\n\t\t\t// matches\n\t\t}\n\t\t\n\t\t// Get nodes in the order from the `rows` array with null values removed\n\t\tvar nodes = _removeEmpty(\n\t\t\t_pluck_order( settings.aoData, rows, 'nTr' )\n\t\t);\n\n\t\t// Selector - jQuery selector string, array of nodes or jQuery object/\n\t\t// As jQuery's .filter() allows jQuery objects to be passed in filter,\n\t\t// it also allows arrays, so this will cope with all three options\n\t\treturn $(nodes)\n\t\t\t.filter( sel )\n\t\t\t.map( function () {\n\t\t\t\treturn this._DT_RowIndex;\n\t\t\t} )\n\t\t\t.toArray();\n\t};\n\n\treturn _selector_run( 'row', selector, run, settings, opts );\n};\n\n\n_api_register( 'rows()', function ( selector, opts ) {\n\t// argument shifting\n\tif ( selector === undefined ) {\n\t\tselector = '';\n\t}\n\telse if ( $.isPlainObject( selector ) ) {\n\t\topts = selector;\n\t\tselector = '';\n\t}\n\n\topts = _selector_opts( opts );\n\n\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\treturn __row_selector( settings, selector, opts );\n\t}, 1 );\n\n\t// Want argument shifting here and in __row_selector?\n\tinst.selector.rows = selector;\n\tinst.selector.opts = opts;\n\n\treturn inst;\n} );\n\n_api_register( 'rows().nodes()', function () {\n\treturn this.iterator( 'row', function ( settings, row ) {\n\t\treturn settings.aoData[ row ].nTr || undefined;\n\t}, 1 );\n} );\n\n_api_register( 'rows().data()', function () {\n\treturn this.iterator( true, 'rows', function ( settings, rows ) {\n\t\treturn _pluck_order( settings.aoData, rows, '_aData' );\n\t}, 1 );\n} );\n\n_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\n\treturn this.iterator( 'row', function ( settings, row ) {\n\t\tvar r = settings.aoData[ row ];\n\t\treturn type === 'search' ? r._aFilterData : r._aSortData;\n\t}, 1 );\n} );\n\n_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\n\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t_fnInvalidate( settings, row, src );\n\t} );\n} );\n\n_api_registerPlural( 'rows().indexes()', 'row().index()', function () {\n\treturn this.iterator( 'row', function ( settings, row ) {\n\t\treturn row;\n\t}, 1 );\n} );\n\n_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\n\tvar a = [];\n\tvar context = this.context;\n\n\t// `iterator` will drop undefined values, but in this case we want them\n\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\tfor ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\n\t\t\tvar id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );\n\t\t\ta.push( (hash === true ? '#' : '' )+ id );\n\t\t}\n\t}\n\n\treturn new _Api( context, a );\n} );\n\n_api_registerPlural( 'rows().remove()', 'row().remove()', function () {\n\tvar that = this;\n\n\tthis.iterator( 'row', function ( settings, row, thatIdx ) {\n\t\tvar data = settings.aoData;\n\t\tvar rowData = data[ row ];\n\t\tvar i, ien, j, jen;\n\t\tvar loopRow, loopCells;\n\n\t\tdata.splice( row, 1 );\n\n\t\t// Update the cached indexes\n\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\tloopRow = data[i];\n\t\t\tloopCells = loopRow.anCells;\n\n\t\t\t// Rows\n\t\t\tif ( loopRow.nTr !== null ) {\n\t\t\t\tloopRow.nTr._DT_RowIndex = i;\n\t\t\t}\n\n\t\t\t// Cells\n\t\t\tif ( loopCells !== null ) {\n\t\t\t\tfor ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\n\t\t\t\t\tloopCells[j]._DT_CellIndex.row = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delete from the display arrays\n\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );\n\t\t_fnDeleteIndex( settings.aiDisplay, row );\n\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\n\n\t\t// For server-side processing tables - subtract the deleted row from the count\n\t\tif ( settings._iRecordsDisplay > 0 ) {\n\t\t\tsettings._iRecordsDisplay--;\n\t\t}\n\n\t\t// Check for an 'overflow' they case for displaying the table\n\t\t_fnLengthOverflow( settings );\n\n\t\t// Remove the row's ID reference if there is one\n\t\tvar id = settings.rowIdFn( rowData._aData );\n\t\tif ( id !== undefined ) {\n\t\t\tdelete settings.aIds[ id ];\n\t\t}\n\t} );\n\n\tthis.iterator( 'table', function ( settings ) {\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\tsettings.aoData[i].idx = i;\n\t\t}\n\t} );\n\n\treturn this;\n} );\n\n\n_api_register( 'rows.add()', function ( rows ) {\n\tvar newRows = this.iterator( 'table', function ( settings ) {\n\t\t\tvar row, i, ien;\n\t\t\tvar out = [];\n\n\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\trow = rows[i];\n\n\t\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\t\tout.push( _fnAddTr( settings, row )[0] );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout.push( _fnAddData( settings, row ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn out;\n\t\t}, 1 );\n\n\t// Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\tvar modRows = this.rows( -1 );\n\tmodRows.pop();\n\t$.merge( modRows, newRows );\n\n\treturn modRows;\n} );\n\n\n\n\n\n/**\n *\n */\n_api_register( 'row()', function ( selector, opts ) {\n\treturn _selector_first( this.rows( selector, opts ) );\n} );\n\n\n_api_register( 'row().data()', function ( data ) {\n\tvar ctx = this.context;\n\n\tif ( data === undefined ) {\n\t\t// Get\n\t\treturn ctx.length && this.length ?\n\t\t\tctx[0].aoData[ this[0] ]._aData :\n\t\t\tundefined;\n\t}\n\n\t// Set\n\tvar row = ctx[0].aoData[ this[0] ];\n\trow._aData = data;\n\n\t// If the DOM has an id, and the data source is an array\n\tif ( Array.isArray( data ) && row.nTr && row.nTr.id ) {\n\t\t_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );\n\t}\n\n\t// Automatically invalidate\n\t_fnInvalidate( ctx[0], this[0], 'data' );\n\n\treturn this;\n} );\n\n\n_api_register( 'row().node()', function () {\n\tvar ctx = this.context;\n\n\treturn ctx.length && this.length ?\n\t\tctx[0].aoData[ this[0] ].nTr || null :\n\t\tnull;\n} );\n\n\n_api_register( 'row.add()', function ( row ) {\n\t// Allow a jQuery object to be passed in - only a single row is added from\n\t// it though - the first element in the set\n\tif ( row instanceof $ && row.length ) {\n\t\trow = row[0];\n\t}\n\n\tvar rows = this.iterator( 'table', function ( settings ) {\n\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\treturn _fnAddTr( settings, row )[0];\n\t\t}\n\t\treturn _fnAddData( settings, row );\n\t} );\n\n\t// Return an Api.rows() extended instance, with the newly added row selected\n\treturn this.row( rows[0] );\n} );\n\n\n$(document).on('plugin-init.dt', function (e, context) {\n\tvar api = new _Api( context );\n\tvar namespace = 'on-plugin-init';\n\tvar stateSaveParamsEvent = 'stateSaveParams.' + namespace;\n\tvar destroyEvent = 'destroy. ' + namespace;\n\n\tapi.on( stateSaveParamsEvent, function ( e, settings, d ) {\n\t\t// This could be more compact with the API, but it is a lot faster as a simple\n\t\t// internal loop\n\t\tvar idFn = settings.rowIdFn;\n\t\tvar data = settings.aoData;\n\t\tvar ids = [];\n\n\t\tfor (var i=0 ; i<data.length ; i++) {\n\t\t\tif (data[i]._detailsShow) {\n\t\t\t\tids.push( '#' + idFn(data[i]._aData) );\n\t\t\t}\n\t\t}\n\n\t\td.childRows = ids;\n\t});\n\n\tapi.on( destroyEvent, function () {\n\t\tapi.off(stateSaveParamsEvent + ' ' + destroyEvent);\n\t});\n\n\tvar loaded = api.state.loaded();\n\n\tif ( loaded && loaded.childRows ) {\n\t\tapi\n\t\t\t.rows( $.map(loaded.childRows, function (id){\n\t\t\t\treturn id.replace(/:/g, '\\\\:')\n\t\t\t}) )\n\t\t\t.every( function () {\n\t\t\t\t_fnCallbackFire( context, null, 'requestChild', [ this ] )\n\t\t\t});\n\t}\n});\n\nvar __details_add = function ( ctx, row, data, klass )\n{\n\t// Convert to array of TR elements\n\tvar rows = [];\n\tvar addRow = function ( r, k ) {\n\t\t// Recursion to allow for arrays of jQuery objects\n\t\tif ( Array.isArray( r ) || r instanceof $ ) {\n\t\t\tfor ( var i=0, ien=r.length ; i<ien ; i++ ) {\n\t\t\t\taddRow( r[i], k );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// If we get a TR element, then just add it directly - up to the dev\n\t\t// to add the correct number of columns etc\n\t\tif ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\n\t\t\trows.push( r );\n\t\t}\n\t\telse {\n\t\t\t// Otherwise create a row with a wrapper\n\t\t\tvar created = $('<tr><td></td></tr>').addClass( k );\n\t\t\t$('td', created)\n\t\t\t\t.addClass( k )\n\t\t\t\t.html( r )\n\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );\n\n\t\t\trows.push( created[0] );\n\t\t}\n\t};\n\n\taddRow( data, klass );\n\n\tif ( row._details ) {\n\t\trow._details.detach();\n\t}\n\n\trow._details = $(rows);\n\n\t// If the children were already shown, that state should be retained\n\tif ( row._detailsShow ) {\n\t\trow._details.insertAfter( row.nTr );\n\t}\n};\n\n\n// Make state saving of child row details async to allow them to be batch processed\nvar __details_state = DataTable.util.throttle(\n\tfunction (ctx) {\n\t\t_fnSaveState( ctx[0] )\n\t},\n\t500\n);\n\n\nvar __details_remove = function ( api, idx )\n{\n\tvar ctx = api.context;\n\n\tif ( ctx.length ) {\n\t\tvar row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\n\n\t\tif ( row && row._details ) {\n\t\t\trow._details.remove();\n\n\t\t\trow._detailsShow = undefined;\n\t\t\trow._details = undefined;\n\t\t\t$( row.nTr ).removeClass( 'dt-hasChild' );\n\t\t\t__details_state( ctx );\n\t\t}\n\t}\n};\n\n\nvar __details_display = function ( api, show ) {\n\tvar ctx = api.context;\n\n\tif ( ctx.length && api.length ) {\n\t\tvar row = ctx[0].aoData[ api[0] ];\n\n\t\tif ( row._details ) {\n\t\t\trow._detailsShow = show;\n\n\t\t\tif ( show ) {\n\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t$( row.nTr ).addClass( 'dt-hasChild' );\n\t\t\t}\n\t\t\telse {\n\t\t\t\trow._details.detach();\n\t\t\t\t$( row.nTr ).removeClass( 'dt-hasChild' );\n\t\t\t}\n\n\t\t\t_fnCallbackFire( ctx[0], null, 'childRow', [ show, api.row( api[0] ) ] )\n\n\t\t\t__details_events( ctx[0] );\n\t\t\t__details_state( ctx );\n\t\t}\n\t}\n};\n\n\nvar __details_events = function ( settings )\n{\n\tvar api = new _Api( settings );\n\tvar namespace = '.dt.DT_details';\n\tvar drawEvent = 'draw'+namespace;\n\tvar colvisEvent = 'column-sizing'+namespace;\n\tvar destroyEvent = 'destroy'+namespace;\n\tvar data = settings.aoData;\n\n\tapi.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\n\n\tif ( _pluck( data, '_details' ).length > 0 ) {\n\t\t// On each draw, insert the required elements into the document\n\t\tapi.on( drawEvent, function ( e, ctx ) {\n\t\t\tif ( settings !== ctx ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tapi.rows( {page:'current'} ).eq(0).each( function (idx) {\n\t\t\t\t// Internal data grab\n\t\t\t\tvar row = data[ idx ];\n\n\t\t\t\tif ( row._detailsShow ) {\n\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\t// Column visibility change - update the colspan\n\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {\n\t\t\tif ( settings !== ctx ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Update the colspan for the details rows (note, only if it already has\n\t\t\t// a colspan)\n\t\t\tvar row, visible = _fnVisbleColumns( ctx );\n\n\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\trow = data[i];\n\n\t\t\t\tif ( row._details ) {\n\t\t\t\t\trow._details.each(function () {\n\t\t\t\t\t\tvar el = $(this).children('td');\n\n\t\t\t\t\t\tif (el.length == 1) {\n\t\t\t\t\t\t\tel.attr('colspan', visible);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Table destroyed - nuke any child rows\n\t\tapi.on( destroyEvent, function ( e, ctx ) {\n\t\t\tif ( settings !== ctx ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\tif ( data[i]._details ) {\n\t\t\t\t\t__details_remove( api, i );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n};\n\n// Strings for the method names to help minification\nvar _emp = '';\nvar _child_obj = _emp+'row().child';\nvar _child_mth = _child_obj+'()';\n\n// data can be:\n//  tr\n//  string\n//  jQuery or array of any of the above\n_api_register( _child_mth, function ( data, klass ) {\n\tvar ctx = this.context;\n\n\tif ( data === undefined ) {\n\t\t// get\n\t\treturn ctx.length && this.length ?\n\t\t\tctx[0].aoData[ this[0] ]._details :\n\t\t\tundefined;\n\t}\n\telse if ( data === true ) {\n\t\t// show\n\t\tthis.child.show();\n\t}\n\telse if ( data === false ) {\n\t\t// remove\n\t\t__details_remove( this );\n\t}\n\telse if ( ctx.length && this.length ) {\n\t\t// set\n\t\t__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\n\t}\n\n\treturn this;\n} );\n\n\n_api_register( [\n\t_child_obj+'.show()',\n\t_child_mth+'.show()' // only when `child()` was called with parameters (without\n], function ( show ) {   // it returns an object and this method is not executed)\n\t__details_display( this, true );\n\treturn this;\n} );\n\n\n_api_register( [\n\t_child_obj+'.hide()',\n\t_child_mth+'.hide()' // only when `child()` was called with parameters (without\n], function () {         // it returns an object and this method is not executed)\n\t__details_display( this, false );\n\treturn this;\n} );\n\n\n_api_register( [\n\t_child_obj+'.remove()',\n\t_child_mth+'.remove()' // only when `child()` was called with parameters (without\n], function () {           // it returns an object and this method is not executed)\n\t__details_remove( this );\n\treturn this;\n} );\n\n\n_api_register( _child_obj+'.isShown()', function () {\n\tvar ctx = this.context;\n\n\tif ( ctx.length && this.length ) {\n\t\t// _detailsShown as false or undefined will fall through to return false\n\t\treturn ctx[0].aoData[ this[0] ]._detailsShow || false;\n\t}\n\treturn false;\n} );\n\n\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Columns\n *\n * {integer}           - column index (>=0 count from left, <0 count from right)\n * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n * \"{string}:name\"     - column name\n * \"{string}\"          - jQuery selector on column header nodes\n *\n */\n\n// can be an array of these items, comma separated list, or an array of comma\n// separated lists\n\nvar __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\n\n\n// r1 and r2 are redundant - but it means that the parameters match for the\n// iterator callback in columns().data()\nvar __columnData = function ( settings, column, r1, r2, rows ) {\n\tvar a = [];\n\tfor ( var row=0, ien=rows.length ; row<ien ; row++ ) {\n\t\ta.push( _fnGetCellData( settings, rows[row], column ) );\n\t}\n\treturn a;\n};\n\n\nvar __column_selector = function ( settings, selector, opts )\n{\n\tvar\n\t\tcolumns = settings.aoColumns,\n\t\tnames = _pluck( columns, 'sName' ),\n\t\tnodes = _pluck( columns, 'nTh' );\n\n\tvar run = function ( s ) {\n\t\tvar selInt = _intVal( s );\n\n\t\t// Selector - all\n\t\tif ( s === '' ) {\n\t\t\treturn _range( columns.length );\n\t\t}\n\n\t\t// Selector - index\n\t\tif ( selInt !== null ) {\n\t\t\treturn [ selInt >= 0 ?\n\t\t\t\tselInt : // Count from left\n\t\t\t\tcolumns.length + selInt // Count from right (+ because its a negative value)\n\t\t\t];\n\t\t}\n\n\t\t// Selector = function\n\t\tif ( typeof s === 'function' ) {\n\t\t\tvar rows = _selector_row_indexes( settings, opts );\n\n\t\t\treturn $.map( columns, function (col, idx) {\n\t\t\t\treturn s(\n\t\t\t\t\t\tidx,\n\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),\n\t\t\t\t\t\tnodes[ idx ]\n\t\t\t\t\t) ? idx : null;\n\t\t\t} );\n\t\t}\n\n\t\t// jQuery or string selector\n\t\tvar match = typeof s === 'string' ?\n\t\t\ts.match( __re_column_selector ) :\n\t\t\t'';\n\n\t\tif ( match ) {\n\t\t\tswitch( match[2] ) {\n\t\t\t\tcase 'visIdx':\n\t\t\t\tcase 'visible':\n\t\t\t\t\tvar idx = parseInt( match[1], 10 );\n\t\t\t\t\t// Visible index given, convert to column index\n\t\t\t\t\tif ( idx < 0 ) {\n\t\t\t\t\t\t// Counting from the right\n\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {\n\t\t\t\t\t\t\treturn col.bVisible ? i : null;\n\t\t\t\t\t\t} );\n\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];\n\t\t\t\t\t}\n\t\t\t\t\t// Counting from the left\n\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];\n\n\t\t\t\tcase 'name':\n\t\t\t\t\t// match by name. `names` is column index complete and in order\n\t\t\t\t\treturn $.map( names, function (name, i) {\n\t\t\t\t\t\treturn name === match[1] ? i : null;\n\t\t\t\t\t} );\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\t// Cell in the table body\n\t\tif ( s.nodeName && s._DT_CellIndex ) {\n\t\t\treturn [ s._DT_CellIndex.column ];\n\t\t}\n\n\t\t// jQuery selector on the TH elements for the columns\n\t\tvar jqResult = $( nodes )\n\t\t\t.filter( s )\n\t\t\t.map( function () {\n\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order\n\t\t\t} )\n\t\t\t.toArray();\n\n\t\tif ( jqResult.length || ! s.nodeName ) {\n\t\t\treturn jqResult;\n\t\t}\n\n\t\t// Otherwise a node which might have a `dt-column` data attribute, or be\n\t\t// a child or such an element\n\t\tvar host = $(s).closest('*[data-dt-column]');\n\t\treturn host.length ?\n\t\t\t[ host.data('dt-column') ] :\n\t\t\t[];\n\t};\n\n\treturn _selector_run( 'column', selector, run, settings, opts );\n};\n\n\nvar __setColumnVis = function ( settings, column, vis ) {\n\tvar\n\t\tcols = settings.aoColumns,\n\t\tcol  = cols[ column ],\n\t\tdata = settings.aoData,\n\t\trow, cells, i, ien, tr;\n\n\t// Get\n\tif ( vis === undefined ) {\n\t\treturn col.bVisible;\n\t}\n\n\t// Set\n\t// No change\n\tif ( col.bVisible === vis ) {\n\t\treturn;\n\t}\n\n\tif ( vis ) {\n\t\t// Insert column\n\t\t// Need to decide if we should use appendChild or insertBefore\n\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\n\n\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\ttr = data[i].nTr;\n\t\t\tcells = data[i].anCells;\n\n\t\t\tif ( tr ) {\n\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null\n\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// Remove column\n\t\t$( _pluck( settings.aoData, 'anCells', column ) ).detach();\n\t}\n\n\t// Common actions\n\tcol.bVisible = vis;\n};\n\n\n_api_register( 'columns()', function ( selector, opts ) {\n\t// argument shifting\n\tif ( selector === undefined ) {\n\t\tselector = '';\n\t}\n\telse if ( $.isPlainObject( selector ) ) {\n\t\topts = selector;\n\t\tselector = '';\n\t}\n\n\topts = _selector_opts( opts );\n\n\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\treturn __column_selector( settings, selector, opts );\n\t}, 1 );\n\n\t// Want argument shifting here and in _row_selector?\n\tinst.selector.cols = selector;\n\tinst.selector.opts = opts;\n\n\treturn inst;\n} );\n\n_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\n\treturn this.iterator( 'column', function ( settings, column ) {\n\t\treturn settings.aoColumns[column].nTh;\n\t}, 1 );\n} );\n\n_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\n\treturn this.iterator( 'column', function ( settings, column ) {\n\t\treturn settings.aoColumns[column].nTf;\n\t}, 1 );\n} );\n\n_api_registerPlural( 'columns().data()', 'column().data()', function () {\n\treturn this.iterator( 'column-rows', __columnData, 1 );\n} );\n\n_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\n\treturn this.iterator( 'column', function ( settings, column ) {\n\t\treturn settings.aoColumns[column].mData;\n\t}, 1 );\n} );\n\n_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\n\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\treturn _pluck_order( settings.aoData, rows,\n\t\t\ttype === 'search' ? '_aFilterData' : '_aSortData', column\n\t\t);\n\t}, 1 );\n} );\n\n_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\n\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\treturn _pluck_order( settings.aoData, rows, 'anCells', column ) ;\n\t}, 1 );\n} );\n\n_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\n\tvar that = this;\n\tvar ret = this.iterator( 'column', function ( settings, column ) {\n\t\tif ( vis === undefined ) {\n\t\t\treturn settings.aoColumns[ column ].bVisible;\n\t\t} // else\n\t\t__setColumnVis( settings, column, vis );\n\t} );\n\n\t// Group the column visibility changes\n\tif ( vis !== undefined ) {\n\t\tthis.iterator( 'table', function ( settings ) {\n\t\t\t// Redraw the header after changes\n\t\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t\t_fnDrawHead( settings, settings.aoFooter );\n\t\n\t\t\t// Update colspan for no records display. Child rows and extensions will use their own\n\t\t\t// listeners to do this - only need to update the empty table item here\n\t\t\tif ( ! settings.aiDisplay.length ) {\n\t\t\t\t$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\n\t\t\t}\n\t\n\t\t\t_fnSaveState( settings );\n\n\t\t\t// Second loop once the first is done for events\n\t\t\tthat.iterator( 'column', function ( settings, column ) {\n\t\t\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\n\t\t\t} );\n\n\t\t\tif ( calc === undefined || calc ) {\n\t\t\t\tthat.columns.adjust();\n\t\t\t}\n\t\t});\n\t}\n\n\treturn ret;\n} );\n\n_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\n\treturn this.iterator( 'column', function ( settings, column ) {\n\t\treturn type === 'visible' ?\n\t\t\t_fnColumnIndexToVisible( settings, column ) :\n\t\t\tcolumn;\n\t}, 1 );\n} );\n\n_api_register( 'columns.adjust()', function () {\n\treturn this.iterator( 'table', function ( settings ) {\n\t\t_fnAdjustColumnSizing( settings );\n\t}, 1 );\n} );\n\n_api_register( 'column.index()', function ( type, idx ) {\n\tif ( this.context.length !== 0 ) {\n\t\tvar ctx = this.context[0];\n\n\t\tif ( type === 'fromVisible' || type === 'toData' ) {\n\t\t\treturn _fnVisibleToColumnIndex( ctx, idx );\n\t\t}\n\t\telse if ( type === 'fromData' || type === 'toVisible' ) {\n\t\t\treturn _fnColumnIndexToVisible( ctx, idx );\n\t\t}\n\t}\n} );\n\n_api_register( 'column()', function ( selector, opts ) {\n\treturn _selector_first( this.columns( selector, opts ) );\n} );\n\nvar __cell_selector = function ( settings, selector, opts )\n{\n\tvar data = settings.aoData;\n\tvar rows = _selector_row_indexes( settings, opts );\n\tvar cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\n\tvar allCells = $(_flatten( [], cells ));\n\tvar row;\n\tvar columns = settings.aoColumns.length;\n\tvar a, i, ien, j, o, host;\n\n\tvar run = function ( s ) {\n\t\tvar fnSelector = typeof s === 'function';\n\n\t\tif ( s === null || s === undefined || fnSelector ) {\n\t\t\t// All cells and function selectors\n\t\t\ta = [];\n\n\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\trow = rows[i];\n\n\t\t\t\tfor ( j=0 ; j<columns ; j++ ) {\n\t\t\t\t\to = {\n\t\t\t\t\t\trow: row,\n\t\t\t\t\t\tcolumn: j\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( fnSelector ) {\n\t\t\t\t\t\t// Selector - function\n\t\t\t\t\t\thost = data[ row ];\n\n\t\t\t\t\t\tif ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\n\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Selector - all\n\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a;\n\t\t}\n\t\t\n\t\t// Selector - index\n\t\tif ( $.isPlainObject( s ) ) {\n\t\t\t// Valid cell index and its in the array of selectable rows\n\t\t\treturn s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?\n\t\t\t\t[s] :\n\t\t\t\t[];\n\t\t}\n\n\t\t// Selector - jQuery filtered cells\n\t\tvar jqResult = allCells\n\t\t\t.filter( s )\n\t\t\t.map( function (i, el) {\n\t\t\t\treturn { // use a new object, in case someone changes the values\n\t\t\t\t\trow:    el._DT_CellIndex.row,\n\t\t\t\t\tcolumn: el._DT_CellIndex.column\n \t\t\t\t};\n\t\t\t} )\n\t\t\t.toArray();\n\n\t\tif ( jqResult.length || ! s.nodeName ) {\n\t\t\treturn jqResult;\n\t\t}\n\n\t\t// Otherwise the selector is a node, and there is one last option - the\n\t\t// element might be a child of an element which has dt-row and dt-column\n\t\t// data attributes\n\t\thost = $(s).closest('*[data-dt-row]');\n\t\treturn host.length ?\n\t\t\t[ {\n\t\t\t\trow: host.data('dt-row'),\n\t\t\t\tcolumn: host.data('dt-column')\n\t\t\t} ] :\n\t\t\t[];\n\t};\n\n\treturn _selector_run( 'cell', selector, run, settings, opts );\n};\n\n\n\n\n_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\n\t// Argument shifting\n\tif ( $.isPlainObject( rowSelector ) ) {\n\t\t// Indexes\n\t\tif ( rowSelector.row === undefined ) {\n\t\t\t// Selector options in first parameter\n\t\t\topts = rowSelector;\n\t\t\trowSelector = null;\n\t\t}\n\t\telse {\n\t\t\t// Cell index objects in first parameter\n\t\t\topts = columnSelector;\n\t\t\tcolumnSelector = null;\n\t\t}\n\t}\n\tif ( $.isPlainObject( columnSelector ) ) {\n\t\topts = columnSelector;\n\t\tcolumnSelector = null;\n\t}\n\n\t// Cell selector\n\tif ( columnSelector === null || columnSelector === undefined ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\treturn __cell_selector( settings, rowSelector, _selector_opts( opts ) );\n\t\t} );\n\t}\n\n\t// The default built in options need to apply to row and columns\n\tvar internalOpts = opts ? {\n\t\tpage: opts.page,\n\t\torder: opts.order,\n\t\tsearch: opts.search\n\t} : {};\n\n\t// Row + column selector\n\tvar columns = this.columns( columnSelector, internalOpts );\n\tvar rows = this.rows( rowSelector, internalOpts );\n\tvar i, ien, j, jen;\n\n\tvar cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {\n\t\tvar a = [];\n\n\t\tfor ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\n\t\t\tfor ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\n\t\t\t\ta.push( {\n\t\t\t\t\trow:    rows[idx][i],\n\t\t\t\t\tcolumn: columns[idx][j]\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\treturn a;\n\t}, 1 );\n\n\t// There is currently only one extension which uses a cell selector extension\n\t// It is a _major_ performance drag to run this if it isn't needed, so this is\n\t// an extension specific check at the moment\n\tvar cells = opts && opts.selected ?\n\t\tthis.cells( cellsNoOpts, opts ) :\n\t\tcellsNoOpts;\n\n\t$.extend( cells.selector, {\n\t\tcols: columnSelector,\n\t\trows: rowSelector,\n\t\topts: opts\n\t} );\n\n\treturn cells;\n} );\n\n\n_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\n\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\tvar data = settings.aoData[ row ];\n\n\t\treturn data && data.anCells ?\n\t\t\tdata.anCells[ column ] :\n\t\t\tundefined;\n\t}, 1 );\n} );\n\n\n_api_register( 'cells().data()', function () {\n\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\treturn _fnGetCellData( settings, row, column );\n\t}, 1 );\n} );\n\n\n_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\n\ttype = type === 'search' ? '_aFilterData' : '_aSortData';\n\n\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\treturn settings.aoData[ row ][ type ][ column ];\n\t}, 1 );\n} );\n\n\n_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\n\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\treturn _fnGetCellData( settings, row, column, type );\n\t}, 1 );\n} );\n\n\n_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\n\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\treturn {\n\t\t\trow: row,\n\t\t\tcolumn: column,\n\t\t\tcolumnVisible: _fnColumnIndexToVisible( settings, column )\n\t\t};\n\t}, 1 );\n} );\n\n\n_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\n\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t_fnInvalidate( settings, row, src, column );\n\t} );\n} );\n\n\n\n_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\n\treturn _selector_first( this.cells( rowSelector, columnSelector, opts ) );\n} );\n\n\n_api_register( 'cell().data()', function ( data ) {\n\tvar ctx = this.context;\n\tvar cell = this[0];\n\n\tif ( data === undefined ) {\n\t\t// Get\n\t\treturn ctx.length && cell.length ?\n\t\t\t_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\n\t\t\tundefined;\n\t}\n\n\t// Set\n\t_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\n\t_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\n\n\treturn this;\n} );\n\n\n\n/**\n * Get current ordering (sorting) that has been applied to the table.\n *\n * @returns {array} 2D array containing the sorting information for the first\n *   table in the current context. Each element in the parent array represents\n *   a column being sorted upon (i.e. multi-sorting with two columns would have\n *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n *   the column index that the sorting condition applies to, the second is the\n *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n *   index of the sorting order from the `column.sorting` initialisation array.\n *//**\n * Set the ordering for the table.\n *\n * @param {integer} order Column index to sort upon.\n * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n * @returns {DataTables.Api} this\n *//**\n * Set the ordering for the table.\n *\n * @param {array} order 1D array of sorting information to be applied.\n * @param {array} [...] Optional additional sorting conditions\n * @returns {DataTables.Api} this\n *//**\n * Set the ordering for the table.\n *\n * @param {array} order 2D array of sorting information to be applied.\n * @returns {DataTables.Api} this\n */\n_api_register( 'order()', function ( order, dir ) {\n\tvar ctx = this.context;\n\n\tif ( order === undefined ) {\n\t\t// get\n\t\treturn ctx.length !== 0 ?\n\t\t\tctx[0].aaSorting :\n\t\t\tundefined;\n\t}\n\n\t// set\n\tif ( typeof order === 'number' ) {\n\t\t// Simple column / direction passed in\n\t\torder = [ [ order, dir ] ];\n\t}\n\telse if ( order.length && ! Array.isArray( order[0] ) ) {\n\t\t// Arguments passed in (list of 1D arrays)\n\t\torder = Array.prototype.slice.call( arguments );\n\t}\n\t// otherwise a 2D array was passed in\n\n\treturn this.iterator( 'table', function ( settings ) {\n\t\tsettings.aaSorting = order.slice();\n\t} );\n} );\n\n\n/**\n * Attach a sort listener to an element for a given column\n *\n * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n *   listener to. This can take the form of a single DOM node, a jQuery\n *   collection of nodes or a jQuery selector which will identify the node(s).\n * @param {integer} column the column that a click on this node will sort on\n * @param {function} [callback] callback function when sort is run\n * @returns {DataTables.Api} this\n */\n_api_register( 'order.listener()', function ( node, column, callback ) {\n\treturn this.iterator( 'table', function ( settings ) {\n\t\t_fnSortAttachListener( settings, node, column, callback );\n\t} );\n} );\n\n\n_api_register( 'order.fixed()', function ( set ) {\n\tif ( ! set ) {\n\t\tvar ctx = this.context;\n\t\tvar fixed = ctx.length ?\n\t\t\tctx[0].aaSortingFixed :\n\t\t\tundefined;\n\n\t\treturn Array.isArray( fixed ) ?\n\t\t\t{ pre: fixed } :\n\t\t\tfixed;\n\t}\n\n\treturn this.iterator( 'table', function ( settings ) {\n\t\tsettings.aaSortingFixed = $.extend( true, {}, set );\n\t} );\n} );\n\n\n// Order by the selected column(s)\n_api_register( [\n\t'columns().order()',\n\t'column().order()'\n], function ( dir ) {\n\tvar that = this;\n\n\treturn this.iterator( 'table', function ( settings, i ) {\n\t\tvar sort = [];\n\n\t\t$.each( that[i], function (j, col) {\n\t\t\tsort.push( [ col, dir ] );\n\t\t} );\n\n\t\tsettings.aaSorting = sort;\n\t} );\n} );\n\n\n\n_api_register( 'search()', function ( input, regex, smart, caseInsen ) {\n\tvar ctx = this.context;\n\n\tif ( input === undefined ) {\n\t\t// get\n\t\treturn ctx.length !== 0 ?\n\t\t\tctx[0].oPreviousSearch.sSearch :\n\t\t\tundefined;\n\t}\n\n\t// set\n\treturn this.iterator( 'table', function ( settings ) {\n\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\treturn;\n\t\t}\n\n\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\n\t\t\t\"sSearch\": input+\"\",\n\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t} ), 1 );\n\t} );\n} );\n\n\n_api_registerPlural(\n\t'columns().search()',\n\t'column().search()',\n\tfunction ( input, regex, smart, caseInsen ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\tvar preSearch = settings.aoPreSearchCols;\n\n\t\t\tif ( input === undefined ) {\n\t\t\t\t// get\n\t\t\t\treturn preSearch[ column ].sSearch;\n\t\t\t}\n\n\t\t\t// set\n\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$.extend( preSearch[ column ], {\n\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t} );\n\n\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );\n\t\t} );\n\t}\n);\n\n/*\n * State API methods\n */\n\n_api_register( 'state()', function () {\n\treturn this.context.length ?\n\t\tthis.context[0].oSavedState :\n\t\tnull;\n} );\n\n\n_api_register( 'state.clear()', function () {\n\treturn this.iterator( 'table', function ( settings ) {\n\t\t// Save an empty object\n\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\n\t} );\n} );\n\n\n_api_register( 'state.loaded()', function () {\n\treturn this.context.length ?\n\t\tthis.context[0].oLoadedState :\n\t\tnull;\n} );\n\n\n_api_register( 'state.save()', function () {\n\treturn this.iterator( 'table', function ( settings ) {\n\t\t_fnSaveState( settings );\n\t} );\n} );\n\n\n\n/**\n * Set the jQuery or window object to be used by DataTables\n *\n * @param {*} module Library / container object\n * @param {string} [type] Library or container type `lib`, `win` or `datetime`.\n *   If not provided, automatic detection is attempted.\n */\nDataTable.use = function (module, type) {\n\tif (type === 'lib' || module.fn) {\n\t\t$ = module;\n\t}\n\telse if (type == 'win' || module.document) {\n\t\twindow = module;\n\t\tdocument = module.document;\n\t}\n\telse if (type === 'datetime' || module.type === 'DateTime') {\n\t\tDataTable.DateTime = module;\n\t}\n}\n\n/**\n * CommonJS factory function pass through. This will check if the arguments\n * given are a window object or a jQuery object. If so they are set\n * accordingly.\n * @param {*} root Window\n * @param {*} jq jQUery\n * @returns {boolean} Indicator\n */\nDataTable.factory = function (root, jq) {\n\tvar is = false;\n\n\t// Test if the first parameter is a window object\n\tif (root && root.document) {\n\t\twindow = root;\n\t\tdocument = root.document;\n\t}\n\n\t// Test if the second parameter is a jQuery object\n\tif (jq && jq.fn && jq.fn.jquery) {\n\t\t$ = jq;\n\t\tis = true;\n\t}\n\n\treturn is;\n}\n\n/**\n * Provide a common method for plug-ins to check the version of DataTables being\n * used, in order to ensure compatibility.\n *\n *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n *  @returns {boolean} true if this version of DataTables is greater or equal to\n *    the required version, or false if this version of DataTales is not\n *    suitable\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n */\nDataTable.versionCheck = DataTable.fnVersionCheck = function( version )\n{\n\tvar aThis = DataTable.version.split('.');\n\tvar aThat = version.split('.');\n\tvar iThis, iThat;\n\n\tfor ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\n\t\tiThis = parseInt( aThis[i], 10 ) || 0;\n\t\tiThat = parseInt( aThat[i], 10 ) || 0;\n\n\t\t// Parts are the same, keep comparing\n\t\tif (iThis === iThat) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Parts are different, return immediately\n\t\treturn iThis > iThat;\n\t}\n\n\treturn true;\n};\n\n\n/**\n * Check if a `<table>` node is a DataTable table already or not.\n *\n *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n *      selector for the table to test. Note that if more than more than one\n *      table is passed on, only the first will be checked\n *  @returns {boolean} true the table given is a DataTable, or false otherwise\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n *      $('#example').dataTable();\n *    }\n */\nDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\n{\n\tvar t = $(table).get(0);\n\tvar is = false;\n\n\tif ( table instanceof DataTable.Api ) {\n\t\treturn true;\n\t}\n\n\t$.each( DataTable.settings, function (i, o) {\n\t\tvar head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n\t\tvar foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\n\t\tif ( o.nTable === t || head === t || foot === t ) {\n\t\t\tis = true;\n\t\t}\n\t} );\n\n\treturn is;\n};\n\n\n/**\n * Get all DataTable tables that have been initialised - optionally you can\n * select to get only currently visible tables.\n *\n *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n *    or visible tables only.\n *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n *    DataTables\n *  @static\n *  @dtopt API-Static\n *\n *  @example\n *    $.each( $.fn.dataTable.tables(true), function () {\n *      $(table).DataTable().columns.adjust();\n *    } );\n */\nDataTable.tables = DataTable.fnTables = function ( visible )\n{\n\tvar api = false;\n\n\tif ( $.isPlainObject( visible ) ) {\n\t\tapi = visible.api;\n\t\tvisible = visible.visible;\n\t}\n\n\tvar a = $.map( DataTable.settings, function (o) {\n\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {\n\t\t\treturn o.nTable;\n\t\t}\n\t} );\n\n\treturn api ?\n\t\tnew _Api( a ) :\n\t\ta;\n};\n\n\n/**\n * Convert from camel case parameters to Hungarian notation. This is made public\n * for the extensions to provide the same ability as DataTables core to accept\n * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n * parameters.\n *\n *  @param {object} src The model object which holds all parameters that can be\n *    mapped.\n *  @param {object} user The object to convert from camel case to Hungarian.\n *  @param {boolean} force When set to `true`, properties which already have a\n *    Hungarian value in the `user` object will be overwritten. Otherwise they\n *    won't be.\n */\nDataTable.camelToHungarian = _fnCamelToHungarian;\n\n\n\n/**\n *\n */\n_api_register( '$()', function ( selector, opts ) {\n\tvar\n\t\trows   = this.rows( opts ).nodes(), // Get all rows\n\t\tjqRows = $(rows);\n\n\treturn $( [].concat(\n\t\tjqRows.filter( selector ).toArray(),\n\t\tjqRows.find( selector ).toArray()\n\t) );\n} );\n\n\n// jQuery functions to operate on the tables\n$.each( [ 'on', 'one', 'off' ], function (i, key) {\n\t_api_register( key+'()', function ( /* event, handler */ ) {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\n\t\t// Add the `dt` namespace automatically if it isn't already present\n\t\targs[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\n\t\t\treturn ! e.match(/\\.dt\\b/) ?\n\t\t\t\te+'.dt' :\n\t\t\t\te;\n\t\t\t} ).join( ' ' );\n\n\t\tvar inst = $( this.tables().nodes() );\n\t\tinst[key].apply( inst, args );\n\t\treturn this;\n\t} );\n} );\n\n\n_api_register( 'clear()', function () {\n\treturn this.iterator( 'table', function ( settings ) {\n\t\t_fnClearTable( settings );\n\t} );\n} );\n\n\n_api_register( 'settings()', function () {\n\treturn new _Api( this.context, this.context );\n} );\n\n\n_api_register( 'init()', function () {\n\tvar ctx = this.context;\n\treturn ctx.length ? ctx[0].oInit : null;\n} );\n\n\n_api_register( 'data()', function () {\n\treturn this.iterator( 'table', function ( settings ) {\n\t\treturn _pluck( settings.aoData, '_aData' );\n\t} ).flatten();\n} );\n\n\n_api_register( 'destroy()', function ( remove ) {\n\tremove = remove || false;\n\n\treturn this.iterator( 'table', function ( settings ) {\n\t\tvar classes   = settings.oClasses;\n\t\tvar table     = settings.nTable;\n\t\tvar tbody     = settings.nTBody;\n\t\tvar thead     = settings.nTHead;\n\t\tvar tfoot     = settings.nTFoot;\n\t\tvar jqTable   = $(table);\n\t\tvar jqTbody   = $(tbody);\n\t\tvar jqWrapper = $(settings.nTableWrapper);\n\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\n\t\tvar i, ien;\n\n\t\t// Flag to note that the table is currently being destroyed - no action\n\t\t// should be taken\n\t\tsettings.bDestroying = true;\n\n\t\t// Fire off the destroy callbacks for plug-ins etc\n\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\n\n\t\t// If not being removed from the document, make all columns visible\n\t\tif ( ! remove ) {\n\t\t\tnew _Api( settings ).columns().visible( true );\n\t\t}\n\n\t\t// Blitz all `DT` namespaced events (these are internal events, the\n\t\t// lowercase, `dt` events are user subscribed and they are responsible\n\t\t// for removing them\n\t\tjqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n\t\t$(window).off('.DT-'+settings.sInstance);\n\n\t\t// When scrolling we had to break the table up - restore it\n\t\tif ( table != thead.parentNode ) {\n\t\t\tjqTable.children('thead').detach();\n\t\t\tjqTable.append( thead );\n\t\t}\n\n\t\tif ( tfoot && table != tfoot.parentNode ) {\n\t\t\tjqTable.children('tfoot').detach();\n\t\t\tjqTable.append( tfoot );\n\t\t}\n\n\t\tsettings.aaSorting = [];\n\t\tsettings.aaSortingFixed = [];\n\t\t_fnSortingClasses( settings );\n\n\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );\n\n\t\t$('th, td', thead).removeClass( classes.sSortable+' '+\n\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\n\t\t);\n\n\t\t// Add the TR elements back into the table in their original order\n\t\tjqTbody.children().detach();\n\t\tjqTbody.append( rows );\n\n\t\tvar orig = settings.nTableWrapper.parentNode;\n\n\t\t// Remove the DataTables generated nodes, events and classes\n\t\tvar removedMethod = remove ? 'remove' : 'detach';\n\t\tjqTable[ removedMethod ]();\n\t\tjqWrapper[ removedMethod ]();\n\n\t\t// If we need to reattach the table to the document\n\t\tif ( ! remove && orig ) {\n\t\t\t// insertBefore acts like appendChild if !arg[1]\n\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );\n\n\t\t\t// Restore the width of the original table - was read from the style property,\n\t\t\t// so we can restore directly to that\n\t\t\tjqTable\n\t\t\t\t.css( 'width', settings.sDestroyWidth )\n\t\t\t\t.removeClass( classes.sTable );\n\n\t\t\t// If the were originally stripe classes - then we add them back here.\n\t\t\t// Note this is not fool proof (for example if not all rows had stripe\n\t\t\t// classes - but it's a good effort without getting carried away\n\t\t\tien = settings.asDestroyStripes.length;\n\n\t\t\tif ( ien ) {\n\t\t\t\tjqTbody.children().each( function (i) {\n\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t/* Remove the settings object from the settings array */\n\t\tvar idx = $.inArray( settings, DataTable.settings );\n\t\tif ( idx !== -1 ) {\n\t\t\tDataTable.settings.splice( idx, 1 );\n\t\t}\n\t} );\n} );\n\n\n// Add the `every()` method for rows, columns and cells in a compact form\n$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\n\t_api_register( type+'s().every()', function ( fn ) {\n\t\tvar opts = this.selector.opts;\n\t\tvar api = this;\n\n\t\treturn this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\n\t\t\t// Rows and columns:\n\t\t\t//  arg1 - index\n\t\t\t//  arg2 - table counter\n\t\t\t//  arg3 - loop counter\n\t\t\t//  arg4 - undefined\n\t\t\t// Cells:\n\t\t\t//  arg1 - row index\n\t\t\t//  arg2 - column index\n\t\t\t//  arg3 - table counter\n\t\t\t//  arg4 - loop counter\n\t\t\tfn.call(\n\t\t\t\tapi[ type ](\n\t\t\t\t\targ1,\n\t\t\t\t\ttype==='cell' ? arg2 : opts,\n\t\t\t\t\ttype==='cell' ? opts : undefined\n\t\t\t\t),\n\t\t\t\targ1, arg2, arg3, arg4\n\t\t\t);\n\t\t} );\n\t} );\n} );\n\n\n// i18n method for extensions to be able to use the language object from the\n// DataTable\n_api_register( 'i18n()', function ( token, def, plural ) {\n\tvar ctx = this.context[0];\n\tvar resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\n\n\tif ( resolved === undefined ) {\n\t\tresolved = def;\n\t}\n\n\tif ( plural !== undefined && $.isPlainObject( resolved ) ) {\n\t\tresolved = resolved[ plural ] !== undefined ?\n\t\t\tresolved[ plural ] :\n\t\t\tresolved._;\n\t}\n\n\treturn typeof resolved === 'string'\n\t\t? resolved.replace( '%d', plural ) // nb: plural might be undefined,\n\t\t: resolved;\n} );\n/**\n * Version string for plug-ins to check compatibility. Allowed format is\n * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n * only for non-release builds. See https://semver.org/ for more information.\n *  @member\n *  @type string\n *  @default Version number\n */\nDataTable.version = \"1.13.7\";\n\n/**\n * Private data store, containing all of the settings objects that are\n * created for the tables on a given page.\n *\n * Note that the `DataTable.settings` object is aliased to\n * `jQuery.fn.dataTableExt` through which it may be accessed and\n * manipulated, or `jQuery.fn.dataTable.settings`.\n *  @member\n *  @type array\n *  @default []\n *  @private\n */\nDataTable.settings = [];\n\n/**\n * Object models container, for the various models that DataTables has\n * available to it. These models define the objects that are used to hold\n * the active state and configuration of the table.\n *  @namespace\n */\nDataTable.models = {};\n\n\n\n/**\n * Template object for the way in which DataTables holds information about\n * search information for the global filter and individual column filters.\n *  @namespace\n */\nDataTable.models.oSearch = {\n\t/**\n\t * Flag to indicate if the filtering should be case insensitive or not\n\t *  @type boolean\n\t *  @default true\n\t */\n\t\"bCaseInsensitive\": true,\n\n\t/**\n\t * Applied search term\n\t *  @type string\n\t *  @default <i>Empty string</i>\n\t */\n\t\"sSearch\": \"\",\n\n\t/**\n\t * Flag to indicate if the search term should be interpreted as a\n\t * regular expression (true) or not (false) and therefore and special\n\t * regex characters escaped.\n\t *  @type boolean\n\t *  @default false\n\t */\n\t\"bRegex\": false,\n\n\t/**\n\t * Flag to indicate if DataTables is to use its smart filtering or not.\n\t *  @type boolean\n\t *  @default true\n\t */\n\t\"bSmart\": true,\n\n\t/**\n\t * Flag to indicate if DataTables should only trigger a search when\n\t * the return key is pressed.\n\t *  @type boolean\n\t *  @default false\n\t */\n\t\"return\": false\n};\n\n\n\n\n/**\n * Template object for the way in which DataTables holds information about\n * each individual row. This is the object format used for the settings\n * aoData array.\n *  @namespace\n */\nDataTable.models.oRow = {\n\t/**\n\t * TR element for the row\n\t *  @type node\n\t *  @default null\n\t */\n\t\"nTr\": null,\n\n\t/**\n\t * Array of TD elements for each row. This is null until the row has been\n\t * created.\n\t *  @type array nodes\n\t *  @default []\n\t */\n\t\"anCells\": null,\n\n\t/**\n\t * Data object from the original data source for the row. This is either\n\t * an array if using the traditional form of DataTables, or an object if\n\t * using mData options. The exact type will depend on the passed in\n\t * data from the data source, or will be an array if using DOM a data\n\t * source.\n\t *  @type array|object\n\t *  @default []\n\t */\n\t\"_aData\": [],\n\n\t/**\n\t * Sorting data cache - this array is ostensibly the same length as the\n\t * number of columns (although each index is generated only as it is\n\t * needed), and holds the data that is used for sorting each column in the\n\t * row. We do this cache generation at the start of the sort in order that\n\t * the formatting of the sort data need be done only once for each cell\n\t * per sort. This array should not be read from or written to by anything\n\t * other than the master sorting methods.\n\t *  @type array\n\t *  @default null\n\t *  @private\n\t */\n\t\"_aSortData\": null,\n\n\t/**\n\t * Per cell filtering data cache. As per the sort data cache, used to\n\t * increase the performance of the filtering in DataTables\n\t *  @type array\n\t *  @default null\n\t *  @private\n\t */\n\t\"_aFilterData\": null,\n\n\t/**\n\t * Filtering data cache. This is the same as the cell filtering cache, but\n\t * in this case a string rather than an array. This is easily computed with\n\t * a join on `_aFilterData`, but is provided as a cache so the join isn't\n\t * needed on every search (memory traded for performance)\n\t *  @type array\n\t *  @default null\n\t *  @private\n\t */\n\t\"_sFilterRow\": null,\n\n\t/**\n\t * Cache of the class name that DataTables has applied to the row, so we\n\t * can quickly look at this variable rather than needing to do a DOM check\n\t * on className for the nTr property.\n\t *  @type string\n\t *  @default <i>Empty string</i>\n\t *  @private\n\t */\n\t\"_sRowStripe\": \"\",\n\n\t/**\n\t * Denote if the original data source was from the DOM, or the data source\n\t * object. This is used for invalidating data, so DataTables can\n\t * automatically read data from the original source, unless uninstructed\n\t * otherwise.\n\t *  @type string\n\t *  @default null\n\t *  @private\n\t */\n\t\"src\": null,\n\n\t/**\n\t * Index in the aoData array. This saves an indexOf lookup when we have the\n\t * object, but want to know the index\n\t *  @type integer\n\t *  @default -1\n\t *  @private\n\t */\n\t\"idx\": -1\n};\n\n\n/**\n * Template object for the column information object in DataTables. This object\n * is held in the settings aoColumns array and contains all the information that\n * DataTables needs about each individual column.\n *\n * Note that this object is related to {@link DataTable.defaults.column}\n * but this one is the internal data store for DataTables's cache of columns.\n * It should NOT be manipulated outside of DataTables. Any configuration should\n * be done through the initialisation options.\n *  @namespace\n */\nDataTable.models.oColumn = {\n\t/**\n\t * Column index. This could be worked out on-the-fly with $.inArray, but it\n\t * is faster to just hold it as a variable\n\t *  @type integer\n\t *  @default null\n\t */\n\t\"idx\": null,\n\n\t/**\n\t * A list of the columns that sorting should occur on when this column\n\t * is sorted. That this property is an array allows multi-column sorting\n\t * to be defined for a column (for example first name / last name columns\n\t * would benefit from this). The values are integers pointing to the\n\t * columns to be sorted on (typically it will be a single integer pointing\n\t * at itself, but that doesn't need to be the case).\n\t *  @type array\n\t */\n\t\"aDataSort\": null,\n\n\t/**\n\t * Define the sorting directions that are applied to the column, in sequence\n\t * as the column is repeatedly sorted upon - i.e. the first value is used\n\t * as the sorting direction when the column if first sorted (clicked on).\n\t * Sort it again (click again) and it will move on to the next index.\n\t * Repeat until loop.\n\t *  @type array\n\t */\n\t\"asSorting\": null,\n\n\t/**\n\t * Flag to indicate if the column is searchable, and thus should be included\n\t * in the filtering or not.\n\t *  @type boolean\n\t */\n\t\"bSearchable\": null,\n\n\t/**\n\t * Flag to indicate if the column is sortable or not.\n\t *  @type boolean\n\t */\n\t\"bSortable\": null,\n\n\t/**\n\t * Flag to indicate if the column is currently visible in the table or not\n\t *  @type boolean\n\t */\n\t\"bVisible\": null,\n\n\t/**\n\t * Store for manual type assignment using the `column.type` option. This\n\t * is held in store so we can manipulate the column's `sType` property.\n\t *  @type string\n\t *  @default null\n\t *  @private\n\t */\n\t\"_sManualType\": null,\n\n\t/**\n\t * Flag to indicate if HTML5 data attributes should be used as the data\n\t * source for filtering or sorting. True is either are.\n\t *  @type boolean\n\t *  @default false\n\t *  @private\n\t */\n\t\"_bAttrSrc\": false,\n\n\t/**\n\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t * allowing you to modify the DOM element (add background colour for example) when the\n\t * element is available.\n\t *  @type function\n\t *  @param {element} nTd The TD node that has been created\n\t *  @param {*} sData The Data for the cell\n\t *  @param {array|object} oData The data for the whole row\n\t *  @param {int} iRow The row index for the aoData data store\n\t *  @default null\n\t */\n\t\"fnCreatedCell\": null,\n\n\t/**\n\t * Function to get data from a cell in a column. You should <b>never</b>\n\t * access data directly through _aData internally in DataTables - always use\n\t * the method attached to this property. It allows mData to function as\n\t * required. This function is automatically assigned by the column\n\t * initialisation method\n\t *  @type function\n\t *  @param {array|object} oData The data array/object for the array\n\t *    (i.e. aoData[]._aData)\n\t *  @param {string} sSpecific The specific data type you want to get -\n\t *    'display', 'type' 'filter' 'sort'\n\t *  @returns {*} The data for the cell from the given row's data\n\t *  @default null\n\t */\n\t\"fnGetData\": null,\n\n\t/**\n\t * Function to set data for a cell in the column. You should <b>never</b>\n\t * set the data directly to _aData internally in DataTables - always use\n\t * this method. It allows mData to function as required. This function\n\t * is automatically assigned by the column initialisation method\n\t *  @type function\n\t *  @param {array|object} oData The data array/object for the array\n\t *    (i.e. aoData[]._aData)\n\t *  @param {*} sValue Value to set\n\t *  @default null\n\t */\n\t\"fnSetData\": null,\n\n\t/**\n\t * Property to read the value for the cells in the column from the data\n\t * source array / object. If null, then the default content is used, if a\n\t * function is given then the return from the function is used.\n\t *  @type function|int|string|null\n\t *  @default null\n\t */\n\t\"mData\": null,\n\n\t/**\n\t * Partner property to mData which is used (only when defined) to get\n\t * the data - i.e. it is basically the same as mData, but without the\n\t * 'set' option, and also the data fed to it is the result from mData.\n\t * This is the rendering method to match the data method of mData.\n\t *  @type function|int|string|null\n\t *  @default null\n\t */\n\t\"mRender\": null,\n\n\t/**\n\t * Unique header TH/TD element for this column - this is what the sorting\n\t * listener is attached to (if sorting is enabled.)\n\t *  @type node\n\t *  @default null\n\t */\n\t\"nTh\": null,\n\n\t/**\n\t * Unique footer TH/TD element for this column (if there is one). Not used\n\t * in DataTables as such, but can be used for plug-ins to reference the\n\t * footer for each column.\n\t *  @type node\n\t *  @default null\n\t */\n\t\"nTf\": null,\n\n\t/**\n\t * The class to apply to all TD elements in the table's TBODY for the column\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sClass\": null,\n\n\t/**\n\t * When DataTables calculates the column widths to assign to each column,\n\t * it finds the longest string in each column and then constructs a\n\t * temporary table and reads the widths from that. The problem with this\n\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t * string - thus the calculation can go wrong (doing it properly and putting\n\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t * a \"work around\" we provide this option. It will append its value to the\n\t * text that is found to be the longest string for the column - i.e. padding.\n\t *  @type string\n\t */\n\t\"sContentPadding\": null,\n\n\t/**\n\t * Allows a default value to be given for a column's data, and will be used\n\t * whenever a null data source is encountered (this can be because mData\n\t * is set to null, or because the data source itself is null).\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sDefaultContent\": null,\n\n\t/**\n\t * Name for the column, allowing reference to the column by name as well as\n\t * by index (needs a lookup to work by name).\n\t *  @type string\n\t */\n\t\"sName\": null,\n\n\t/**\n\t * Custom sorting data type - defines which of the available plug-ins in\n\t * afnSortData the custom sorting will use - if any is defined.\n\t *  @type string\n\t *  @default std\n\t */\n\t\"sSortDataType\": 'std',\n\n\t/**\n\t * Class to be applied to the header element when sorting on this column\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sSortingClass\": null,\n\n\t/**\n\t * Class to be applied to the header element when sorting on this column -\n\t * when jQuery UI theming is used.\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sSortingClassJUI\": null,\n\n\t/**\n\t * Title of the column - what is seen in the TH element (nTh).\n\t *  @type string\n\t */\n\t\"sTitle\": null,\n\n\t/**\n\t * Column sorting and filtering type\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sType\": null,\n\n\t/**\n\t * Width of the column\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sWidth\": null,\n\n\t/**\n\t * Width of the column when it was first \"encountered\"\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sWidthOrig\": null\n};\n\n\n/*\n * Developer note: The properties of the object below are given in Hungarian\n * notation, that was used as the interface for DataTables prior to v1.10, however\n * from v1.10 onwards the primary interface is camel case. In order to avoid\n * breaking backwards compatibility utterly with this change, the Hungarian\n * version is still, internally the primary interface, but is is not documented\n * - hence the @name tags in each doc comment. This allows a Javascript function\n * to create a map from Hungarian notation to camel case (going the other direction\n * would require each property to be listed, which would add around 3K to the size\n * of DataTables, while this method is about a 0.5K hit).\n *\n * Ultimately this does pave the way for Hungarian notation to be dropped\n * completely, but that is a massive amount of work and will break current\n * installs (therefore is on-hold until v2).\n */\n\n/**\n * Initialisation options that can be given to DataTables at initialisation\n * time.\n *  @namespace\n */\nDataTable.defaults = {\n\t/**\n\t * An array of data to use for the table, passed in at initialisation which\n\t * will be used in preference to any data which is already in the DOM. This is\n\t * particularly useful for constructing tables purely in Javascript, for\n\t * example with a custom Ajax call.\n\t *  @type array\n\t *  @default null\n\t *\n\t *  @dtopt Option\n\t *  @name DataTable.defaults.data\n\t *\n\t *  @example\n\t *    // Using a 2D array data source\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"data\": [\n\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n\t *        ],\n\t *        \"columns\": [\n\t *          { \"title\": \"Engine\" },\n\t *          { \"title\": \"Browser\" },\n\t *          { \"title\": \"Platform\" },\n\t *          { \"title\": \"Version\" },\n\t *          { \"title\": \"Grade\" }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using an array of objects as a data source (`data`)\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"data\": [\n\t *          {\n\t *            \"engine\":   \"Trident\",\n\t *            \"browser\":  \"Internet Explorer 4.0\",\n\t *            \"platform\": \"Win 95+\",\n\t *            \"version\":  4,\n\t *            \"grade\":    \"X\"\n\t *          },\n\t *          {\n\t *            \"engine\":   \"Trident\",\n\t *            \"browser\":  \"Internet Explorer 5.0\",\n\t *            \"platform\": \"Win 95+\",\n\t *            \"version\":  5,\n\t *            \"grade\":    \"C\"\n\t *          }\n\t *        ],\n\t *        \"columns\": [\n\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\n\t *          { \"title\": \"Version\",  \"data\": \"version\" },\n\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"aaData\": null,\n\n\n\t/**\n\t * If ordering is enabled, then DataTables will perform a first pass sort on\n\t * initialisation. You can define which column(s) the sort is performed\n\t * upon, and the sorting direction, with this variable. The `sorting` array\n\t * should contain an array for each column to be sorted initially containing\n\t * the column's index and a direction string ('asc' or 'desc').\n\t *  @type array\n\t *  @default [[0,'asc']]\n\t *\n\t *  @dtopt Option\n\t *  @name DataTable.defaults.order\n\t *\n\t *  @example\n\t *    // Sort by 3rd column first, and then 4th column\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"order\": [[2,'asc'], [3,'desc']]\n\t *      } );\n\t *    } );\n\t *\n\t *    // No initial sorting\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"order\": []\n\t *      } );\n\t *    } );\n\t */\n\t\"aaSorting\": [[0,'asc']],\n\n\n\t/**\n\t * This parameter is basically identical to the `sorting` parameter, but\n\t * cannot be overridden by user interaction with the table. What this means\n\t * is that you could have a column (visible or hidden) which the sorting\n\t * will always be forced on first - any sorting after that (from the user)\n\t * will then be performed as required. This can be useful for grouping rows\n\t * together.\n\t *  @type array\n\t *  @default null\n\t *\n\t *  @dtopt Option\n\t *  @name DataTable.defaults.orderFixed\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"orderFixed\": [[0,'asc']]\n\t *      } );\n\t *    } )\n\t */\n\t\"aaSortingFixed\": [],\n\n\n\t/**\n\t * DataTables can be instructed to load data to display in the table from a\n\t * Ajax source. This option defines how that Ajax call is made and where to.\n\t *\n\t * The `ajax` property has three different modes of operation, depending on\n\t * how it is defined. These are:\n\t *\n\t * * `string` - Set the URL from where the data should be loaded from.\n\t * * `object` - Define properties for `jQuery.ajax`.\n\t * * `function` - Custom data get function\n\t *\n\t * `string`\n\t * --------\n\t *\n\t * As a string, the `ajax` property simply defines the URL from which\n\t * DataTables will load data.\n\t *\n\t * `object`\n\t * --------\n\t *\n\t * As an object, the parameters in the object are passed to\n\t * [jQuery.ajax](https://api.jquery.com/jQuery.ajax/) allowing fine control\n\t * of the Ajax request. DataTables has a number of default parameters which\n\t * you can override using this option. Please refer to the jQuery\n\t * documentation for a full description of the options available, although\n\t * the following parameters provide additional options in DataTables or\n\t * require special consideration:\n\t *\n\t * * `data` - As with jQuery, `data` can be provided as an object, but it\n\t *   can also be used as a function to manipulate the data DataTables sends\n\t *   to the server. The function takes a single parameter, an object of\n\t *   parameters with the values that DataTables has readied for sending. An\n\t *   object may be returned which will be merged into the DataTables\n\t *   defaults, or you can add the items to the object that was passed in and\n\t *   not return anything from the function. This supersedes `fnServerParams`\n\t *   from DataTables 1.9-.\n\t *\n\t * * `dataSrc` - By default DataTables will look for the property `data` (or\n\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n\t *   from an Ajax source or for server-side processing - this parameter\n\t *   allows that property to be changed. You can use Javascript dotted\n\t *   object notation to get a data source for multiple levels of nesting, or\n\t *   it my be used as a function. As a function it takes a single parameter,\n\t *   the JSON returned from the server, which can be manipulated as\n\t *   required, with the returned value being that used by DataTables as the\n\t *   data source for the table. This supersedes `sAjaxDataProp` from\n\t *   DataTables 1.9-.\n\t *\n\t * * `success` - Should not be overridden it is used internally in\n\t *   DataTables. To manipulate / transform the data returned by the server\n\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n\t *\n\t * `function`\n\t * ----------\n\t *\n\t * As a function, making the Ajax call is left up to yourself allowing\n\t * complete control of the Ajax request. Indeed, if desired, a method other\n\t * than Ajax could be used to obtain the required data, such as Web storage\n\t * or an AIR database.\n\t *\n\t * The function is given four parameters and no return is required. The\n\t * parameters are:\n\t *\n\t * 1. _object_ - Data to send to the server\n\t * 2. _function_ - Callback function that must be executed when the required\n\t *    data has been obtained. That data should be passed into the callback\n\t *    as the only parameter\n\t * 3. _object_ - DataTables settings object for the table\n\t *\n\t * Note that this supersedes `fnServerData` from DataTables 1.9-.\n\t *\n\t *  @type string|object|function\n\t *  @default null\n\t *\n\t *  @dtopt Option\n\t *  @name DataTable.defaults.ajax\n\t *  @since 1.10.0\n\t *\n\t * @example\n\t *   // Get JSON data from a file via Ajax.\n\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n\t *   $('#example').dataTable( {\n\t *     \"ajax\": \"data.json\"\n\t *   } );\n\t *\n\t * @example\n\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n\t *   $('#example').dataTable( {\n\t *     \"ajax\": {\n\t *       \"url\": \"data.json\",\n\t *       \"dataSrc\": \"tableData\"\n\t *     }\n\t *   } );\n\t *\n\t * @example\n\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n\t *   // from a plain array rather than an array in an object\n\t *   $('#example').dataTable( {\n\t *     \"ajax\": {\n\t *       \"url\": \"data.json\",\n\t *       \"dataSrc\": \"\"\n\t *     }\n\t *   } );\n\t *\n\t * @example\n\t *   // Manipulate the data returned from the server - add a link to data\n\t *   // (note this can, should, be done using `render` for the column - this\n\t *   // is just a simple example of how the data can be manipulated).\n\t *   $('#example').dataTable( {\n\t *     \"ajax\": {\n\t *       \"url\": \"data.json\",\n\t *       \"dataSrc\": function ( json ) {\n\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n\t *         }\n\t *         return json;\n\t *       }\n\t *     }\n\t *   } );\n\t *\n\t * @example\n\t *   // Add data to the request\n\t *   $('#example').dataTable( {\n\t *     \"ajax\": {\n\t *       \"url\": \"data.json\",\n\t *       \"data\": function ( d ) {\n\t *         return {\n\t *           \"extra_search\": $('#extra').val()\n\t *         };\n\t *       }\n\t *     }\n\t *   } );\n\t *\n\t * @example\n\t *   // Send request as POST\n\t *   $('#example').dataTable( {\n\t *     \"ajax\": {\n\t *       \"url\": \"data.json\",\n\t *       \"type\": \"POST\"\n\t *     }\n\t *   } );\n\t *\n\t * @example\n\t *   // Get the data from localStorage (could interface with a form for\n\t *   // adding, editing and removing rows).\n\t *   $('#example').dataTable( {\n\t *     \"ajax\": function (data, callback, settings) {\n\t *       callback(\n\t *         JSON.parse( localStorage.getItem('dataTablesData') )\n\t *       );\n\t *     }\n\t *   } );\n\t */\n\t\"ajax\": null,\n\n\n\t/**\n\t * This parameter allows you to readily specify the entries in the length drop\n\t * down menu that DataTables shows when pagination is enabled. It can be\n\t * either a 1D array of options which will be used for both the displayed\n\t * option and the value, or a 2D array which will use the array in the first\n\t * position as the value, and the array in the second position as the\n\t * displayed options (useful for language strings such as 'All').\n\t *\n\t * Note that the `pageLength` property will be automatically set to the\n\t * first value given in this array, unless `pageLength` is also provided.\n\t *  @type array\n\t *  @default [ 10, 25, 50, 100 ]\n\t *\n\t *  @dtopt Option\n\t *  @name DataTable.defaults.lengthMenu\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n\t *      } );\n\t *    } );\n\t */\n\t\"aLengthMenu\": [ 10, 25, 50, 100 ],\n\n\n\t/**\n\t * The `columns` option in the initialisation parameter allows you to define\n\t * details about the way individual columns behave. For a full list of\n\t * column options that can be set, please see\n\t * {@link DataTable.defaults.column}. Note that if you use `columns` to\n\t * define your columns, you must have an entry in the array for every single\n\t * column that you have in your table (these can be null if you don't which\n\t * to specify any options).\n\t *  @member\n\t *\n\t *  @name DataTable.defaults.column\n\t */\n\t\"aoColumns\": null,\n\n\t/**\n\t * Very similar to `columns`, `columnDefs` allows you to target a specific\n\t * column, multiple columns, or all columns, using the `targets` property of\n\t * each object in the array. This allows great flexibility when creating\n\t * tables, as the `columnDefs` arrays can be of any length, targeting the\n\t * columns you specifically want. `columnDefs` may use any of the column\n\t * options available: {@link DataTable.defaults.column}, but it _must_\n\t * have `targets` defined in each object in the array. Values in the `targets`\n\t * array may be:\n\t *   <ul>\n\t *     <li>a string - class name will be matched on the TH for the column</li>\n\t *     <li>0 or a positive integer - column index counting from the left</li>\n\t *     <li>a negative integer - column index counting from the right</li>\n\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n\t *   </ul>\n\t *  @member\n\t *\n\t *  @name DataTable.defaults.columnDefs\n\t */\n\t\"aoColumnDefs\": null,\n\n\n\t/**\n\t * Basically the same as `search`, this parameter defines the individual column\n\t * filtering state at initialisation time. The array must be of the same size\n\t * as the number of columns, and each element be an object with the parameters\n\t * `search` and `escapeRegex` (the latter is optional). 'null' is also\n\t * accepted and the default will be used.\n\t *  @type array\n\t *  @default []\n\t *\n\t *  @dtopt Option\n\t *  @name DataTable.defaults.searchCols\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"searchCols\": [\n\t *          null,\n\t *          { \"search\": \"My filter\" },\n\t *          null,\n\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n\t *        ]\n\t *      } );\n\t *    } )\n\t */\n\t\"aoSearchCols\": [],\n\n\n\t/**\n\t * An array of CSS classes that should be applied to displayed rows. This\n\t * array may be of any length, and DataTables will apply each class\n\t * sequentially, looping when required.\n\t *  @type array\n\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n\t *    options</i>\n\t *\n\t *  @dtopt Option\n\t *  @name DataTable.defaults.stripeClasses\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n\t *      } );\n\t *    } )\n\t */\n\t\"asStripeClasses\": null,\n\n\n\t/**\n\t * Enable or disable automatic column width calculation. This can be disabled\n\t * as an optimisation (it takes some time to calculate the widths) if the\n\t * tables widths are passed in using `columns`.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.autoWidth\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"autoWidth\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"bAutoWidth\": true,\n\n\n\t/**\n\t * Deferred rendering can provide DataTables with a huge speed boost when you\n\t * are using an Ajax or JS data source for the table. This option, when set to\n\t * true, will cause DataTables to defer the creation of the table elements for\n\t * each row until they are needed for a draw - saving a significant amount of\n\t * time.\n\t *  @type boolean\n\t *  @default false\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.deferRender\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"ajax\": \"sources/arrays.txt\",\n\t *        \"deferRender\": true\n\t *      } );\n\t *    } );\n\t */\n\t\"bDeferRender\": false,\n\n\n\t/**\n\t * Replace a DataTable which matches the given selector and replace it with\n\t * one which has the properties of the new initialisation object passed. If no\n\t * table matches the selector, then the new DataTable will be constructed as\n\t * per normal.\n\t *  @type boolean\n\t *  @default false\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.destroy\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"srollY\": \"200px\",\n\t *        \"paginate\": false\n\t *      } );\n\t *\n\t *      // Some time later....\n\t *      $('#example').dataTable( {\n\t *        \"filter\": false,\n\t *        \"destroy\": true\n\t *      } );\n\t *    } );\n\t */\n\t\"bDestroy\": false,\n\n\n\t/**\n\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n\t * that it allows the end user to input multiple words (space separated) and\n\t * will match a row containing those words, even if not in the order that was\n\t * specified (this allow matching across multiple columns). Note that if you\n\t * wish to use filtering in DataTables this must remain 'true' - to remove the\n\t * default filtering input box and retain filtering abilities, please use\n\t * {@link DataTable.defaults.dom}.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.searching\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"searching\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"bFilter\": true,\n\n\n\t/**\n\t * Enable or disable the table information display. This shows information\n\t * about the data that is currently visible on the page, including information\n\t * about filtered data if that action is being performed.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.info\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"info\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"bInfo\": true,\n\n\n\t/**\n\t * Allows the end user to select the size of a formatted page from a select\n\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.lengthChange\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"lengthChange\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"bLengthChange\": true,\n\n\n\t/**\n\t * Enable or disable pagination.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.paging\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"paging\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"bPaginate\": true,\n\n\n\t/**\n\t * Enable or disable the display of a 'processing' indicator when the table is\n\t * being processed (e.g. a sort). This is particularly useful for tables with\n\t * large amounts of data where it can take a noticeable amount of time to sort\n\t * the entries.\n\t *  @type boolean\n\t *  @default false\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.processing\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"processing\": true\n\t *      } );\n\t *    } );\n\t */\n\t\"bProcessing\": false,\n\n\n\t/**\n\t * Retrieve the DataTables object for the given selector. Note that if the\n\t * table has already been initialised, this parameter will cause DataTables\n\t * to simply return the object that has already been set up - it will not take\n\t * account of any changes you might have made to the initialisation object\n\t * passed to DataTables (setting this parameter to true is an acknowledgement\n\t * that you understand this). `destroy` can be used to reinitialise a table if\n\t * you need.\n\t *  @type boolean\n\t *  @default false\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.retrieve\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      initTable();\n\t *      tableActions();\n\t *    } );\n\t *\n\t *    function initTable ()\n\t *    {\n\t *      return $('#example').dataTable( {\n\t *        \"scrollY\": \"200px\",\n\t *        \"paginate\": false,\n\t *        \"retrieve\": true\n\t *      } );\n\t *    }\n\t *\n\t *    function tableActions ()\n\t *    {\n\t *      var table = initTable();\n\t *      // perform API operations with oTable\n\t *    }\n\t */\n\t\"bRetrieve\": false,\n\n\n\t/**\n\t * When vertical (y) scrolling is enabled, DataTables will force the height of\n\t * the table's viewport to the given height at all times (useful for layout).\n\t * However, this can look odd when filtering data down to a small data set,\n\t * and the footer is left \"floating\" further down. This parameter (when\n\t * enabled) will cause DataTables to collapse the table's viewport down when\n\t * the result set will fit within the given Y height.\n\t *  @type boolean\n\t *  @default false\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.scrollCollapse\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"scrollY\": \"200\",\n\t *        \"scrollCollapse\": true\n\t *      } );\n\t *    } );\n\t */\n\t\"bScrollCollapse\": false,\n\n\n\t/**\n\t * Configure DataTables to use server-side processing. Note that the\n\t * `ajax` parameter must also be given in order to give DataTables a\n\t * source to obtain the required data for each draw.\n\t *  @type boolean\n\t *  @default false\n\t *\n\t *  @dtopt Features\n\t *  @dtopt Server-side\n\t *  @name DataTable.defaults.serverSide\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"serverSide\": true,\n\t *        \"ajax\": \"xhr.php\"\n\t *      } );\n\t *    } );\n\t */\n\t\"bServerSide\": false,\n\n\n\t/**\n\t * Enable or disable sorting of columns. Sorting of individual columns can be\n\t * disabled by the `sortable` option for each column.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.ordering\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"ordering\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"bSort\": true,\n\n\n\t/**\n\t * Enable or display DataTables' ability to sort multiple columns at the\n\t * same time (activated by shift-click by the user).\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.orderMulti\n\t *\n\t *  @example\n\t *    // Disable multiple column sorting ability\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"orderMulti\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"bSortMulti\": true,\n\n\n\t/**\n\t * Allows control over whether DataTables should use the top (true) unique\n\t * cell that is found for a single column, or the bottom (false - default).\n\t * This is useful when using complex headers.\n\t *  @type boolean\n\t *  @default false\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.orderCellsTop\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"orderCellsTop\": true\n\t *      } );\n\t *    } );\n\t */\n\t\"bSortCellsTop\": false,\n\n\n\t/**\n\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n\t * `sorting\\_3` to the columns which are currently being sorted on. This is\n\t * presented as a feature switch as it can increase processing time (while\n\t * classes are removed and added) so for large data sets you might want to\n\t * turn this off.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.orderClasses\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"orderClasses\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"bSortClasses\": true,\n\n\n\t/**\n\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n\t * used to save table display information such as pagination information,\n\t * display length, filtering and sorting. As such when the end user reloads\n\t * the page the display display will match what thy had previously set up.\n\t *\n\t * Due to the use of `localStorage` the default state saving is not supported\n\t * in IE6 or 7. If state saving is required in those browsers, use\n\t * `stateSaveCallback` to provide a storage solution such as cookies.\n\t *  @type boolean\n\t *  @default false\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.stateSave\n\t *\n\t *  @example\n\t *    $(document).ready( function () {\n\t *      $('#example').dataTable( {\n\t *        \"stateSave\": true\n\t *      } );\n\t *    } );\n\t */\n\t\"bStateSave\": false,\n\n\n\t/**\n\t * This function is called when a TR element is created (and all TD child\n\t * elements have been inserted), or registered if using a DOM source, allowing\n\t * manipulation of the TR element (adding classes etc).\n\t *  @type function\n\t *  @param {node} row \"TR\" element for the current row\n\t *  @param {array} data Raw data array for this row\n\t *  @param {int} dataIndex The index of this row in the internal aoData array\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.createdRow\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"createdRow\": function( row, data, dataIndex ) {\n\t *          // Bold the grade for all 'A' grade browsers\n\t *          if ( data[4] == \"A\" )\n\t *          {\n\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t *          }\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnCreatedRow\": null,\n\n\n\t/**\n\t * This function is called on every 'draw' event, and allows you to\n\t * dynamically modify any aspect you want about the created DOM.\n\t *  @type function\n\t *  @param {object} settings DataTables settings object\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.drawCallback\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"drawCallback\": function( settings ) {\n\t *          alert( 'DataTables has redrawn the table' );\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnDrawCallback\": null,\n\n\n\t/**\n\t * Identical to fnHeaderCallback() but for the table footer this function\n\t * allows you to modify the table footer on every 'draw' event.\n\t *  @type function\n\t *  @param {node} foot \"TR\" element for the footer\n\t *  @param {array} data Full table data (as derived from the original HTML)\n\t *  @param {int} start Index for the current display starting point in the\n\t *    display array\n\t *  @param {int} end Index for the current display ending point in the\n\t *    display array\n\t *  @param {array int} display Index array to translate the visual position\n\t *    to the full data array\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.footerCallback\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n\t *        }\n\t *      } );\n\t *    } )\n\t */\n\t\"fnFooterCallback\": null,\n\n\n\t/**\n\t * When rendering large numbers in the information element for the table\n\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n\t * to have a comma separator for the 'thousands' units (e.g. 1 million is\n\t * rendered as \"1,000,000\") to help readability for the end user. This\n\t * function will override the default method DataTables uses.\n\t *  @type function\n\t *  @member\n\t *  @param {int} toFormat number to be formatted\n\t *  @returns {string} formatted string for DataTables to show the number\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.formatNumber\n\t *\n\t *  @example\n\t *    // Format a number using a single quote for the separator (note that\n\t *    // this can also be done with the language.thousands option)\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"formatNumber\": function ( toFormat ) {\n\t *          return toFormat.toString().replace(\n\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n\t *          );\n\t *        };\n\t *      } );\n\t *    } );\n\t */\n\t\"fnFormatNumber\": function ( toFormat ) {\n\t\treturn toFormat.toString().replace(\n\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g,\n\t\t\tthis.oLanguage.sThousands\n\t\t);\n\t},\n\n\n\t/**\n\t * This function is called on every 'draw' event, and allows you to\n\t * dynamically modify the header row. This can be used to calculate and\n\t * display useful information about the table.\n\t *  @type function\n\t *  @param {node} head \"TR\" element for the header\n\t *  @param {array} data Full table data (as derived from the original HTML)\n\t *  @param {int} start Index for the current display starting point in the\n\t *    display array\n\t *  @param {int} end Index for the current display ending point in the\n\t *    display array\n\t *  @param {array int} display Index array to translate the visual position\n\t *    to the full data array\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.headerCallback\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\n\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n\t *        }\n\t *      } );\n\t *    } )\n\t */\n\t\"fnHeaderCallback\": null,\n\n\n\t/**\n\t * The information element can be used to convey information about the current\n\t * state of the table. Although the internationalisation options presented by\n\t * DataTables are quite capable of dealing with most customisations, there may\n\t * be times where you wish to customise the string further. This callback\n\t * allows you to do exactly that.\n\t *  @type function\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {int} start Starting position in data for the draw\n\t *  @param {int} end End position in data for the draw\n\t *  @param {int} max Total number of rows in the table (regardless of\n\t *    filtering)\n\t *  @param {int} total Total number of rows in the data set, after filtering\n\t *  @param {string} pre The string that DataTables has formatted using it's\n\t *    own rules\n\t *  @returns {string} The string to be displayed in the information element.\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.infoCallback\n\t *\n\t *  @example\n\t *    $('#example').dataTable( {\n\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n\t *        return start +\" to \"+ end;\n\t *      }\n\t *    } );\n\t */\n\t\"fnInfoCallback\": null,\n\n\n\t/**\n\t * Called when the table has been initialised. Normally DataTables will\n\t * initialise sequentially and there will be no need for this function,\n\t * however, this does not hold true when using external language information\n\t * since that is obtained using an async XHR call.\n\t *  @type function\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} json The JSON object request from the server - only\n\t *    present if client-side Ajax sourced data is used\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.initComplete\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"initComplete\": function(settings, json) {\n\t *          alert( 'DataTables has finished its initialisation.' );\n\t *        }\n\t *      } );\n\t *    } )\n\t */\n\t\"fnInitComplete\": null,\n\n\n\t/**\n\t * Called at the very start of each table draw and can be used to cancel the\n\t * draw by returning false, any other return (including undefined) results in\n\t * the full draw occurring).\n\t *  @type function\n\t *  @param {object} settings DataTables settings object\n\t *  @returns {boolean} False will cancel the draw, anything else (including no\n\t *    return) will allow it to complete.\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.preDrawCallback\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"preDrawCallback\": function( settings ) {\n\t *          if ( $('#test').val() == 1 ) {\n\t *            return false;\n\t *          }\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnPreDrawCallback\": null,\n\n\n\t/**\n\t * This function allows you to 'post process' each row after it have been\n\t * generated for each table draw, but before it is rendered on screen. This\n\t * function might be used for setting the row class name etc.\n\t *  @type function\n\t *  @param {node} row \"TR\" element for the current row\n\t *  @param {array} data Raw data array for this row\n\t *  @param {int} displayIndex The display index for the current table draw\n\t *  @param {int} displayIndexFull The index of the data in the full list of\n\t *    rows (after filtering)\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.rowCallback\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n\t *          // Bold the grade for all 'A' grade browsers\n\t *          if ( data[4] == \"A\" ) {\n\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t *          }\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnRowCallback\": null,\n\n\n\t/**\n\t * __Deprecated__ The functionality provided by this parameter has now been\n\t * superseded by that provided through `ajax`, which should be used instead.\n\t *\n\t * This parameter allows you to override the default function which obtains\n\t * the data from the server so something more suitable for your application.\n\t * For example you could use POST data, or pull information from a Gears or\n\t * AIR database.\n\t *  @type function\n\t *  @member\n\t *  @param {string} source HTTP source to obtain the data from (`ajax`)\n\t *  @param {array} data A key/value pair object containing the data to send\n\t *    to the server\n\t *  @param {function} callback to be called on completion of the data get\n\t *    process that will draw the data on the page.\n\t *  @param {object} settings DataTables settings object\n\t *\n\t *  @dtopt Callbacks\n\t *  @dtopt Server-side\n\t *  @name DataTable.defaults.serverData\n\t *\n\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t */\n\t\"fnServerData\": null,\n\n\n\t/**\n\t * __Deprecated__ The functionality provided by this parameter has now been\n\t * superseded by that provided through `ajax`, which should be used instead.\n\t *\n\t *  It is often useful to send extra data to the server when making an Ajax\n\t * request - for example custom filtering information, and this callback\n\t * function makes it trivial to send extra information to the server. The\n\t * passed in parameter is the data set that has been constructed by\n\t * DataTables, and you can add to this or modify it as you require.\n\t *  @type function\n\t *  @param {array} data Data array (array of objects which are name/value\n\t *    pairs) that has been constructed by DataTables and will be sent to the\n\t *    server. In the case of Ajax sourced data with server-side processing\n\t *    this will be an empty array, for server-side processing there will be a\n\t *    significant number of parameters!\n\t *  @returns {undefined} Ensure that you modify the data array passed in,\n\t *    as this is passed by reference.\n\t *\n\t *  @dtopt Callbacks\n\t *  @dtopt Server-side\n\t *  @name DataTable.defaults.serverParams\n\t *\n\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t */\n\t\"fnServerParams\": null,\n\n\n\t/**\n\t * Load the table state. With this function you can define from where, and how, the\n\t * state of a table is loaded. By default DataTables will load from `localStorage`\n\t * but you might wish to use a server-side database or cookies.\n\t *  @type function\n\t *  @member\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} callback Callback that can be executed when done. It\n\t *    should be passed the loaded state object.\n\t *  @return {object} The DataTables state object to be loaded\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.stateLoadCallback\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"stateSave\": true,\n\t *        \"stateLoadCallback\": function (settings, callback) {\n\t *          $.ajax( {\n\t *            \"url\": \"/state_load\",\n\t *            \"dataType\": \"json\",\n\t *            \"success\": function (json) {\n\t *              callback( json );\n\t *            }\n\t *          } );\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnStateLoadCallback\": function ( settings ) {\n\t\ttry {\n\t\t\treturn JSON.parse(\n\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname\n\t\t\t\t)\n\t\t\t);\n\t\t} catch (e) {\n\t\t\treturn {};\n\t\t}\n\t},\n\n\n\t/**\n\t * Callback which allows modification of the saved state prior to loading that state.\n\t * This callback is called when the table is loading state from the stored data, but\n\t * prior to the settings object being modified by the saved state. Note that for\n\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n\t * a plug-in.\n\t *  @type function\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} data The state object that is to be loaded\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.stateLoadParams\n\t *\n\t *  @example\n\t *    // Remove a saved filter, so filtering is never loaded\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"stateSave\": true,\n\t *        \"stateLoadParams\": function (settings, data) {\n\t *          data.oSearch.sSearch = \"\";\n\t *        }\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Disallow state loading by returning false\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"stateSave\": true,\n\t *        \"stateLoadParams\": function (settings, data) {\n\t *          return false;\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnStateLoadParams\": null,\n\n\n\t/**\n\t * Callback that is called when the state has been loaded from the state saving method\n\t * and the DataTables settings object has been modified as a result of the loaded state.\n\t *  @type function\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} data The state object that was loaded\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.stateLoaded\n\t *\n\t *  @example\n\t *    // Show an alert with the filtering value that was saved\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"stateSave\": true,\n\t *        \"stateLoaded\": function (settings, data) {\n\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnStateLoaded\": null,\n\n\n\t/**\n\t * Save the table state. This function allows you to define where and how the state\n\t * information for the table is stored By default DataTables will use `localStorage`\n\t * but you might wish to use a server-side database or cookies.\n\t *  @type function\n\t *  @member\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} data The state object to be saved\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.stateSaveCallback\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"stateSave\": true,\n\t *        \"stateSaveCallback\": function (settings, data) {\n\t *          // Send an Ajax request to the server with the state object\n\t *          $.ajax( {\n\t *            \"url\": \"/state_save\",\n\t *            \"data\": data,\n\t *            \"dataType\": \"json\",\n\t *            \"method\": \"POST\"\n\t *            \"success\": function () {}\n\t *          } );\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnStateSaveCallback\": function ( settings, data ) {\n\t\ttry {\n\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname,\n\t\t\t\tJSON.stringify( data )\n\t\t\t);\n\t\t} catch (e) {}\n\t},\n\n\n\t/**\n\t * Callback which allows modification of the state to be saved. Called when the table\n\t * has changed state a new state save is required. This method allows modification of\n\t * the state saving object prior to actually doing the save, including addition or\n\t * other state properties or modification. Note that for plug-in authors, you should\n\t * use the `stateSaveParams` event to save parameters for a plug-in.\n\t *  @type function\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} data The state object to be saved\n\t *\n\t *  @dtopt Callbacks\n\t *  @name DataTable.defaults.stateSaveParams\n\t *\n\t *  @example\n\t *    // Remove a saved filter, so filtering is never saved\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"stateSave\": true,\n\t *        \"stateSaveParams\": function (settings, data) {\n\t *          data.oSearch.sSearch = \"\";\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"fnStateSaveParams\": null,\n\n\n\t/**\n\t * Duration for which the saved state information is considered valid. After this period\n\t * has elapsed the state will be returned to the default.\n\t * Value is given in seconds.\n\t *  @type int\n\t *  @default 7200 <i>(2 hours)</i>\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.stateDuration\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"stateDuration\": 60*60*24; // 1 day\n\t *      } );\n\t *    } )\n\t */\n\t\"iStateDuration\": 7200,\n\n\n\t/**\n\t * When enabled DataTables will not make a request to the server for the first\n\t * page draw - rather it will use the data already on the page (no sorting etc\n\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n\t * is used to indicate that deferred loading is required, but it is also used\n\t * to tell DataTables how many records there are in the full table (allowing\n\t * the information element and pagination to be displayed correctly). In the case\n\t * where a filtering is applied to the table on initial load, this can be\n\t * indicated by giving the parameter as an array, where the first element is\n\t * the number of records available after filtering and the second element is the\n\t * number of records without filtering (allowing the table information element\n\t * to be shown correctly).\n\t *  @type int | array\n\t *  @default null\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.deferLoading\n\t *\n\t *  @example\n\t *    // 57 records available in the table, no filtering applied\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"serverSide\": true,\n\t *        \"ajax\": \"scripts/server_processing.php\",\n\t *        \"deferLoading\": 57\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"serverSide\": true,\n\t *        \"ajax\": \"scripts/server_processing.php\",\n\t *        \"deferLoading\": [ 57, 100 ],\n\t *        \"search\": {\n\t *          \"search\": \"my_filter\"\n\t *        }\n\t *      } );\n\t *    } );\n\t */\n\t\"iDeferLoading\": null,\n\n\n\t/**\n\t * Number of rows to display on a single page when using pagination. If\n\t * feature enabled (`lengthChange`) then the end user will be able to override\n\t * this to a custom setting using a pop-up menu.\n\t *  @type int\n\t *  @default 10\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.pageLength\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"pageLength\": 50\n\t *      } );\n\t *    } )\n\t */\n\t\"iDisplayLength\": 10,\n\n\n\t/**\n\t * Define the starting point for data display when using DataTables with\n\t * pagination. Note that this parameter is the number of records, rather than\n\t * the page number, so if you have 10 records per page and want to start on\n\t * the third page, it should be \"20\".\n\t *  @type int\n\t *  @default 0\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.displayStart\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"displayStart\": 20\n\t *      } );\n\t *    } )\n\t */\n\t\"iDisplayStart\": 0,\n\n\n\t/**\n\t * By default DataTables allows keyboard navigation of the table (sorting, paging,\n\t * and filtering) by adding a `tabindex` attribute to the required elements. This\n\t * allows you to tab through the controls and press the enter key to activate them.\n\t * The tabindex is default 0, meaning that the tab follows the flow of the document.\n\t * You can overrule this using this parameter if you wish. Use a value of -1 to\n\t * disable built-in keyboard navigation.\n\t *  @type int\n\t *  @default 0\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.tabIndex\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"tabIndex\": 1\n\t *      } );\n\t *    } );\n\t */\n\t\"iTabIndex\": 0,\n\n\n\t/**\n\t * Classes that DataTables assigns to the various components and features\n\t * that it adds to the HTML table. This allows classes to be configured\n\t * during initialisation in addition to through the static\n\t * {@link DataTable.ext.oStdClasses} object).\n\t *  @namespace\n\t *  @name DataTable.defaults.classes\n\t */\n\t\"oClasses\": {},\n\n\n\t/**\n\t * All strings that DataTables uses in the user interface that it creates\n\t * are defined in this object, allowing you to modified them individually or\n\t * completely replace them all as required.\n\t *  @namespace\n\t *  @name DataTable.defaults.language\n\t */\n\t\"oLanguage\": {\n\t\t/**\n\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not\n\t\t * actually visible on the page, but will be read by screenreaders, and thus\n\t\t * must be internationalised as well).\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.language.aria\n\t\t */\n\t\t\"oAria\": {\n\t\t\t/**\n\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t * sorted ascending by activing the column (click or return when focused).\n\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t *  @type string\n\t\t\t *  @default : activate to sort column ascending\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.aria.sortAscending\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"aria\": {\n\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\n\t\t\t *          }\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sSortAscending\": \": activate to sort column ascending\",\n\n\t\t\t/**\n\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t * sorted descending by activing the column (click or return when focused).\n\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t *  @type string\n\t\t\t *  @default : activate to sort column ascending\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.aria.sortDescending\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"aria\": {\n\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\n\t\t\t *          }\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sSortDescending\": \": activate to sort column descending\"\n\t\t},\n\n\t\t/**\n\t\t * Pagination string used by DataTables for the built-in pagination\n\t\t * control types.\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.language.paginate\n\t\t */\n\t\t\"oPaginate\": {\n\t\t\t/**\n\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t * button to take the user to the first page.\n\t\t\t *  @type string\n\t\t\t *  @default First\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.paginate.first\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"paginate\": {\n\t\t\t *            \"first\": \"First page\"\n\t\t\t *          }\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sFirst\": \"First\",\n\n\n\t\t\t/**\n\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t * button to take the user to the last page.\n\t\t\t *  @type string\n\t\t\t *  @default Last\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.paginate.last\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"paginate\": {\n\t\t\t *            \"last\": \"Last page\"\n\t\t\t *          }\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLast\": \"Last\",\n\n\n\t\t\t/**\n\t\t\t * Text to use for the 'next' pagination button (to take the user to the\n\t\t\t * next page).\n\t\t\t *  @type string\n\t\t\t *  @default Next\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.paginate.next\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"paginate\": {\n\t\t\t *            \"next\": \"Next page\"\n\t\t\t *          }\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sNext\": \"Next\",\n\n\n\t\t\t/**\n\t\t\t * Text to use for the 'previous' pagination button (to take the user to\n\t\t\t * the previous page).\n\t\t\t *  @type string\n\t\t\t *  @default Previous\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.paginate.previous\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"paginate\": {\n\t\t\t *            \"previous\": \"Previous page\"\n\t\t\t *          }\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sPrevious\": \"Previous\"\n\t\t},\n\n\t\t/**\n\t\t * This string is shown in preference to `zeroRecords` when the table is\n\t\t * empty of data (regardless of filtering). Note that this is an optional\n\t\t * parameter - if it is not given, the value of `zeroRecords` will be used\n\t\t * instead (either the default or given value).\n\t\t *  @type string\n\t\t *  @default No data available in table\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.emptyTable\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"emptyTable\": \"No data available in table\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sEmptyTable\": \"No data available in table\",\n\n\n\t\t/**\n\t\t * This string gives information to the end user about the information\n\t\t * that is current on display on the page. The following tokens can be\n\t\t * used in the string and will be dynamically replaced as the table\n\t\t * display updates. This tokens can be placed anywhere in the string, or\n\t\t * removed as needed by the language requires:\n\t\t *\n\t\t * * `\\_START\\_` - Display index of the first record on the current page\n\t\t * * `\\_END\\_` - Display index of the last record on the current page\n\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering\n\t\t * * `\\_MAX\\_` - Number of records in the table without filtering\n\t\t * * `\\_PAGE\\_` - Current page number\n\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table\n\t\t *\n\t\t *  @type string\n\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.info\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\n\n\t\t/**\n\t\t * Display information string for when the table is empty. Typically the\n\t\t * format of this string should match `info`.\n\t\t *  @type string\n\t\t *  @default Showing 0 to 0 of 0 entries\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.infoEmpty\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"infoEmpty\": \"No entries to show\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\n\n\t\t/**\n\t\t * When a user filters the information in a table, this string is appended\n\t\t * to the information (`info`) to give an idea of how strong the filtering\n\t\t * is. The variable _MAX_ is dynamically updated.\n\t\t *  @type string\n\t\t *  @default (filtered from _MAX_ total entries)\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.infoFiltered\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\n\n\t\t/**\n\t\t * If can be useful to append extra information to the info string at times,\n\t\t * and this variable does exactly that. This information will be appended to\n\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n\t\t * being used) at all times.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.infoPostFix\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sInfoPostFix\": \"\",\n\n\n\t\t/**\n\t\t * This decimal place operator is a little different from the other\n\t\t * language options since DataTables doesn't output floating point\n\t\t * numbers, so it won't ever use this for display of a number. Rather,\n\t\t * what this parameter does is modify the sort methods of the table so\n\t\t * that numbers which are in a format which has a character other than\n\t\t * a period (`.`) as a decimal place will be sorted numerically.\n\t\t *\n\t\t * Note that numbers with different decimal places cannot be shown in\n\t\t * the same table and still be sortable, the table must be consistent.\n\t\t * However, multiple different tables on the page can use different\n\t\t * decimal place characters.\n\t\t *  @type string\n\t\t *  @default \n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.decimal\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"decimal\": \",\"\n\t\t *          \"thousands\": \".\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDecimal\": \"\",\n\n\n\t\t/**\n\t\t * DataTables has a build in number formatter (`formatNumber`) which is\n\t\t * used to format large numbers that are used in the table information.\n\t\t * By default a comma is used, but this can be trivially changed to any\n\t\t * character you wish with this parameter.\n\t\t *  @type string\n\t\t *  @default ,\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.thousands\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"thousands\": \"'\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sThousands\": \",\",\n\n\n\t\t/**\n\t\t * Detail the action that will be taken when the drop down menu for the\n\t\t * pagination length option is changed. The '_MENU_' variable is replaced\n\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced\n\t\t * with a custom select box if required.\n\t\t *  @type string\n\t\t *  @default Show _MENU_ entries\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.lengthMenu\n\t\t *\n\t\t *  @example\n\t\t *    // Language change only\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Language and options change\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"lengthMenu\": 'Display <select>'+\n\t\t *            '<option value=\"10\">10</option>'+\n\t\t *            '<option value=\"20\">20</option>'+\n\t\t *            '<option value=\"30\">30</option>'+\n\t\t *            '<option value=\"40\">40</option>'+\n\t\t *            '<option value=\"50\">50</option>'+\n\t\t *            '<option value=\"-1\">All</option>'+\n\t\t *            '</select> records'\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sLengthMenu\": \"Show _MENU_ entries\",\n\n\n\t\t/**\n\t\t * When using Ajax sourced data and during the first draw when DataTables is\n\t\t * gathering the data, this message is shown in an empty row in the table to\n\t\t * indicate to the end user the the data is being loaded. Note that this\n\t\t * parameter is not used when loading data by server-side processing, just\n\t\t * Ajax sourced data with client-side processing.\n\t\t *  @type string\n\t\t *  @default Loading...\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.loadingRecords\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"loadingRecords\": \"Please wait - loading...\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sLoadingRecords\": \"Loading...\",\n\n\n\t\t/**\n\t\t * Text which is displayed when the table is processing a user action\n\t\t * (usually a sort command or similar).\n\t\t *  @type string\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.processing\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"processing\": \"DataTables is currently busy\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sProcessing\": \"\",\n\n\n\t\t/**\n\t\t * Details the actions that will be taken when the user types into the\n\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,\n\t\t * is replaced with the HTML text box for the filtering input allowing\n\t\t * control over where it appears in the string. If \"_INPUT_\" is not given\n\t\t * then the input box is appended to the string automatically.\n\t\t *  @type string\n\t\t *  @default Search:\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.search\n\t\t *\n\t\t *  @example\n\t\t *    // Input text box will be appended at the end automatically\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"search\": \"Filter records:\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Specify where the filter should appear\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sSearch\": \"Search:\",\n\n\n\t\t/**\n\t\t * Assign a `placeholder` attribute to the search `input` element\n\t\t *  @type string\n\t\t *  @default \n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.searchPlaceholder\n\t\t */\n\t\t\"sSearchPlaceholder\": \"\",\n\n\n\t\t/**\n\t\t * All of the language information can be stored in a file on the\n\t\t * server-side, which DataTables will look up if this parameter is passed.\n\t\t * It must store the URL of the language file, which is in a JSON format,\n\t\t * and the object has the same properties as the oLanguage object in the\n\t\t * initialiser object (i.e. the above parameters). Please refer to one of\n\t\t * the example language files to see how this works in action.\n\t\t *  @type string\n\t\t *  @default <i>Empty string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.url\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"url\": \"https://www.sprymedia.co.uk/dataTables/lang.txt\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sUrl\": \"\",\n\n\n\t\t/**\n\t\t * Text shown inside the table records when the is no information to be\n\t\t * displayed after filtering. `emptyTable` is shown when there is simply no\n\t\t * information in the table at all (regardless of filtering).\n\t\t *  @type string\n\t\t *  @default No matching records found\n\t\t *\n\t\t *  @dtopt Language\n\t\t *  @name DataTable.defaults.language.zeroRecords\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"language\": {\n\t\t *          \"zeroRecords\": \"No records to display\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sZeroRecords\": \"No matching records found\"\n\t},\n\n\n\t/**\n\t * This parameter allows you to have define the global filtering state at\n\t * initialisation time. As an object the `search` parameter must be\n\t * defined, but all other parameters are optional. When `regex` is true,\n\t * the search string will be treated as a regular expression, when false\n\t * (default) it will be treated as a straight string. When `smart`\n\t * DataTables will use it's smart filtering methods (to word match at\n\t * any point in the data), when false this will not be done.\n\t *  @namespace\n\t *  @extends DataTable.models.oSearch\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.search\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"search\": {\"search\": \"Initial search\"}\n\t *      } );\n\t *    } )\n\t */\n\t\"oSearch\": $.extend( {}, DataTable.models.oSearch ),\n\n\n\t/**\n\t * __Deprecated__ The functionality provided by this parameter has now been\n\t * superseded by that provided through `ajax`, which should be used instead.\n\t *\n\t * By default DataTables will look for the property `data` (or `aaData` for\n\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n\t * source or for server-side processing - this parameter allows that\n\t * property to be changed. You can use Javascript dotted object notation to\n\t * get a data source for multiple levels of nesting.\n\t *  @type string\n\t *  @default data\n\t *\n\t *  @dtopt Options\n\t *  @dtopt Server-side\n\t *  @name DataTable.defaults.ajaxDataProp\n\t *\n\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t */\n\t\"sAjaxDataProp\": \"data\",\n\n\n\t/**\n\t * __Deprecated__ The functionality provided by this parameter has now been\n\t * superseded by that provided through `ajax`, which should be used instead.\n\t *\n\t * You can instruct DataTables to load data from an external\n\t * source using this parameter (use aData if you want to pass data in you\n\t * already have). Simply provide a url a JSON object can be obtained from.\n\t *  @type string\n\t *  @default null\n\t *\n\t *  @dtopt Options\n\t *  @dtopt Server-side\n\t *  @name DataTable.defaults.ajaxSource\n\t *\n\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t */\n\t\"sAjaxSource\": null,\n\n\n\t/**\n\t * This initialisation variable allows you to specify exactly where in the\n\t * DOM you want DataTables to inject the various controls it adds to the page\n\t * (for example you might want the pagination controls at the top of the\n\t * table). DIV elements (with or without a custom class) can also be added to\n\t * aid styling. The follow syntax is used:\n\t *   <ul>\n\t *     <li>The following options are allowed:\n\t *       <ul>\n\t *         <li>'l' - Length changing</li>\n\t *         <li>'f' - Filtering input</li>\n\t *         <li>'t' - The table!</li>\n\t *         <li>'i' - Information</li>\n\t *         <li>'p' - Pagination</li>\n\t *         <li>'r' - pRocessing</li>\n\t *       </ul>\n\t *     </li>\n\t *     <li>The following constants are allowed:\n\t *       <ul>\n\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n\t *       </ul>\n\t *     </li>\n\t *     <li>The following syntax is expected:\n\t *       <ul>\n\t *         <li>'&lt;' and '&gt;' - div elements</li>\n\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n\t *       </ul>\n\t *     </li>\n\t *     <li>Examples:\n\t *       <ul>\n\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n\t *       </ul>\n\t *     </li>\n\t *   </ul>\n\t *  @type string\n\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.dom\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n\t *      } );\n\t *    } );\n\t */\n\t\"sDom\": \"lfrtip\",\n\n\n\t/**\n\t * Search delay option. This will throttle full table searches that use the\n\t * DataTables provided search input element (it does not effect calls to\n\t * `dt-api search()`, providing a delay before the search is made.\n\t *  @type integer\n\t *  @default 0\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.searchDelay\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"searchDelay\": 200\n\t *      } );\n\t *    } )\n\t */\n\t\"searchDelay\": null,\n\n\n\t/**\n\t * DataTables features six different built-in options for the buttons to\n\t * display for pagination control:\n\t *\n\t * * `numbers` - Page number buttons only\n\t * * `simple` - 'Previous' and 'Next' buttons only\n\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n\t * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n\t *  \n\t * Further methods can be added using {@link DataTable.ext.oPagination}.\n\t *  @type string\n\t *  @default simple_numbers\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.pagingType\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"pagingType\": \"full_numbers\"\n\t *      } );\n\t *    } )\n\t */\n\t\"sPaginationType\": \"simple_numbers\",\n\n\n\t/**\n\t * Enable horizontal scrolling. When a table is too wide to fit into a\n\t * certain layout, or you have a large number of columns in the table, you\n\t * can enable x-scrolling to show the table in a viewport, which can be\n\t * scrolled. This property can be `true` which will allow the table to\n\t * scroll horizontally when needed, or any CSS unit, or a number (in which\n\t * case it will be treated as a pixel measurement). Setting as simply `true`\n\t * is recommended.\n\t *  @type boolean|string\n\t *  @default <i>blank string - i.e. disabled</i>\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.scrollX\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"scrollX\": true,\n\t *        \"scrollCollapse\": true\n\t *      } );\n\t *    } );\n\t */\n\t\"sScrollX\": \"\",\n\n\n\t/**\n\t * This property can be used to force a DataTable to use more width than it\n\t * might otherwise do when x-scrolling is enabled. For example if you have a\n\t * table which requires to be well spaced, this parameter is useful for\n\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n\t * any CSS unit, or a number (in which case it will be treated as a pixel\n\t * measurement).\n\t *  @type string\n\t *  @default <i>blank string - i.e. disabled</i>\n\t *\n\t *  @dtopt Options\n\t *  @name DataTable.defaults.scrollXInner\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"scrollX\": \"100%\",\n\t *        \"scrollXInner\": \"110%\"\n\t *      } );\n\t *    } );\n\t */\n\t\"sScrollXInner\": \"\",\n\n\n\t/**\n\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n\t * to the given height, and enable scrolling for any data which overflows the\n\t * current viewport. This can be used as an alternative to paging to display\n\t * a lot of data in a small area (although paging and scrolling can both be\n\t * enabled at the same time). This property can be any CSS unit, or a number\n\t * (in which case it will be treated as a pixel measurement).\n\t *  @type string\n\t *  @default <i>blank string - i.e. disabled</i>\n\t *\n\t *  @dtopt Features\n\t *  @name DataTable.defaults.scrollY\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"scrollY\": \"200px\",\n\t *        \"paginate\": false\n\t *      } );\n\t *    } );\n\t */\n\t\"sScrollY\": \"\",\n\n\n\t/**\n\t * __Deprecated__ The functionality provided by this parameter has now been\n\t * superseded by that provided through `ajax`, which should be used instead.\n\t *\n\t * Set the HTTP method that is used to make the Ajax call for server-side\n\t * processing or Ajax sourced data.\n\t *  @type string\n\t *  @default GET\n\t *\n\t *  @dtopt Options\n\t *  @dtopt Server-side\n\t *  @name DataTable.defaults.serverMethod\n\t *\n\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t */\n\t\"sServerMethod\": \"GET\",\n\n\n\t/**\n\t * DataTables makes use of renderers when displaying HTML elements for\n\t * a table. These renderers can be added or modified by plug-ins to\n\t * generate suitable mark-up for a site. For example the Bootstrap\n\t * integration plug-in for DataTables uses a paging button renderer to\n\t * display pagination buttons in the mark-up required by Bootstrap.\n\t *\n\t * For further information about the renderers available see\n\t * DataTable.ext.renderer\n\t *  @type string|object\n\t *  @default null\n\t *\n\t *  @name DataTable.defaults.renderer\n\t *\n\t */\n\t\"renderer\": null,\n\n\n\t/**\n\t * Set the data property name that DataTables should use to get a row's id\n\t * to set as the `id` property in the node.\n\t *  @type string\n\t *  @default DT_RowId\n\t *\n\t *  @name DataTable.defaults.rowId\n\t */\n\t\"rowId\": \"DT_RowId\"\n};\n\n_fnHungarianMap( DataTable.defaults );\n\n\n\n/*\n * Developer note - See note in model.defaults.js about the use of Hungarian\n * notation and camel case.\n */\n\n/**\n * Column options that can be given to DataTables at initialisation time.\n *  @namespace\n */\nDataTable.defaults.column = {\n\t/**\n\t * Define which column(s) an order will occur on for this column. This\n\t * allows a column's ordering to take multiple columns into account when\n\t * doing a sort or use the data from a different column. For example first\n\t * name / last name columns make sense to do a multi-column sort over the\n\t * two columns.\n\t *  @type array|int\n\t *  @default null <i>Takes the value of the column index automatically</i>\n\t *\n\t *  @name DataTable.defaults.column.orderData\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"orderData\": [ 0, 1 ] },\n\t *          { \"orderData\": [ 1, 0 ] },\n\t *          { \"orderData\": 2 },\n\t *          null,\n\t *          null\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"aDataSort\": null,\n\t\"iDataSort\": -1,\n\n\n\t/**\n\t * You can control the default ordering direction, and even alter the\n\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n\t * using this parameter.\n\t *  @type array\n\t *  @default [ 'asc', 'desc' ]\n\t *\n\t *  @name DataTable.defaults.column.orderSequence\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          null,\n\t *          { \"orderSequence\": [ \"asc\" ] },\n\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n\t *          { \"orderSequence\": [ \"desc\" ] },\n\t *          null\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"asSorting\": [ 'asc', 'desc' ],\n\n\n\t/**\n\t * Enable or disable filtering on the data in this column.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @name DataTable.defaults.column.searchable\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"searchable\": false, \"targets\": [ 0 ] }\n\t *        ] } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"searchable\": false },\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          null\n\t *        ] } );\n\t *    } );\n\t */\n\t\"bSearchable\": true,\n\n\n\t/**\n\t * Enable or disable ordering on this column.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @name DataTable.defaults.column.orderable\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"orderable\": false, \"targets\": [ 0 ] }\n\t *        ] } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"orderable\": false },\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          null\n\t *        ] } );\n\t *    } );\n\t */\n\t\"bSortable\": true,\n\n\n\t/**\n\t * Enable or disable the display of this column.\n\t *  @type boolean\n\t *  @default true\n\t *\n\t *  @name DataTable.defaults.column.visible\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"visible\": false, \"targets\": [ 0 ] }\n\t *        ] } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"visible\": false },\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          null\n\t *        ] } );\n\t *    } );\n\t */\n\t\"bVisible\": true,\n\n\n\t/**\n\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t * allowing you to modify the DOM element (add background colour for example) when the\n\t * element is available.\n\t *  @type function\n\t *  @param {element} td The TD node that has been created\n\t *  @param {*} cellData The Data for the cell\n\t *  @param {array|object} rowData The data for the whole row\n\t *  @param {int} row The row index for the aoData data store\n\t *  @param {int} col The column index for aoColumns\n\t *\n\t *  @name DataTable.defaults.column.createdCell\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [ {\n\t *          \"targets\": [3],\n\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\n\t *            if ( cellData == \"1.7\" ) {\n\t *              $(td).css('color', 'blue')\n\t *            }\n\t *          }\n\t *        } ]\n\t *      });\n\t *    } );\n\t */\n\t\"fnCreatedCell\": null,\n\n\n\t/**\n\t * This parameter has been replaced by `data` in DataTables to ensure naming\n\t * consistency. `dataProp` can still be used, as there is backwards\n\t * compatibility in DataTables for this option, but it is strongly\n\t * recommended that you use `data` in preference to `dataProp`.\n\t *  @name DataTable.defaults.column.dataProp\n\t */\n\n\n\t/**\n\t * This property can be used to read data from any data source property,\n\t * including deeply nested objects / properties. `data` can be given in a\n\t * number of different ways which effect its behaviour:\n\t *\n\t * * `integer` - treated as an array index for the data source. This is the\n\t *   default that DataTables uses (incrementally increased for each column).\n\t * * `string` - read an object property from the data source. There are\n\t *   three 'special' options that can be used in the string to alter how\n\t *   DataTables reads the data from the source object:\n\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t *      Javascript to read from nested objects, so to can the options\n\t *      specified in `data`. For example: `browser.version` or\n\t *      `browser.name`. If your object parameter name contains a period, use\n\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t *      from and array source, joining the data with the characters provided\n\t *      between the two brackets. For example: `name[, ]` would provide a\n\t *      comma-space separated list from the source array. If no characters\n\t *      are provided between the brackets, the original array source is\n\t *      returned.\n\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t *      execute a function of the name given. For example: `browser()` for a\n\t *      simple function on the data source, `browser.version()` for a\n\t *      function in a nested property or even `browser().version` to get an\n\t *      object property if the function called returns an object. Note that\n\t *      function notation is recommended for use in `render` rather than\n\t *      `data` as it is much simpler to use as a renderer.\n\t * * `null` - use the original data source for the row rather than plucking\n\t *   data directly from it. This action has effects on two other\n\t *   initialisation options:\n\t *    * `defaultContent` - When null is given as the `data` option and\n\t *      `defaultContent` is specified for the column, the value defined by\n\t *      `defaultContent` will be used for the cell.\n\t *    * `render` - When null is used for the `data` option and the `render`\n\t *      option is specified for the column, the whole data source for the\n\t *      row is used for the renderer.\n\t * * `function` - the function given will be executed whenever DataTables\n\t *   needs to set or get the data for a cell in the column. The function\n\t *   takes three parameters:\n\t *    * Parameters:\n\t *      * `{array|object}` The data source for the row\n\t *      * `{string}` The type call data requested - this will be 'set' when\n\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n\t *        when gathering data. Note that when `undefined` is given for the\n\t *        type DataTables expects to get the raw data for the object back<\n\t *      * `{*}` Data to set when the second parameter is 'set'.\n\t *    * Return:\n\t *      * The return value from the function is not required when 'set' is\n\t *        the type of call, but otherwise the return is what will be used\n\t *        for the data requested.\n\t *\n\t * Note that `data` is a getter and setter option. If you just require\n\t * formatting of data for output, you will likely want to use `render` which\n\t * is simply a getter and thus simpler to use.\n\t *\n\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n\t * name change reflects the flexibility of this property and is consistent\n\t * with the naming of mRender. If 'mDataProp' is given, then it will still\n\t * be used by DataTables, as it automatically maps the old name to the new\n\t * if required.\n\t *\n\t *  @type string|int|function|null\n\t *  @default null <i>Use automatically calculated column index</i>\n\t *\n\t *  @name DataTable.defaults.column.data\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Read table data from objects\n\t *    // JSON structure for each row:\n\t *    //   {\n\t *    //      \"engine\": {value},\n\t *    //      \"browser\": {value},\n\t *    //      \"platform\": {value},\n\t *    //      \"version\": {value},\n\t *    //      \"grade\": {value}\n\t *    //   }\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"ajaxSource\": \"sources/objects.txt\",\n\t *        \"columns\": [\n\t *          { \"data\": \"engine\" },\n\t *          { \"data\": \"browser\" },\n\t *          { \"data\": \"platform\" },\n\t *          { \"data\": \"version\" },\n\t *          { \"data\": \"grade\" }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Read information from deeply nested objects\n\t *    // JSON structure for each row:\n\t *    //   {\n\t *    //      \"engine\": {value},\n\t *    //      \"browser\": {value},\n\t *    //      \"platform\": {\n\t *    //         \"inner\": {value}\n\t *    //      },\n\t *    //      \"details\": [\n\t *    //         {value}, {value}\n\t *    //      ]\n\t *    //   }\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t *        \"columns\": [\n\t *          { \"data\": \"engine\" },\n\t *          { \"data\": \"browser\" },\n\t *          { \"data\": \"platform.inner\" },\n\t *          { \"data\": \"details.0\" },\n\t *          { \"data\": \"details.1\" }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `data` as a function to provide different information for\n\t *    // sorting, filtering and display. In this case, currency (price)\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [ {\n\t *          \"targets\": [ 0 ],\n\t *          \"data\": function ( source, type, val ) {\n\t *            if (type === 'set') {\n\t *              source.price = val;\n\t *              // Store the computed display and filter values for efficiency\n\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n\t *              return;\n\t *            }\n\t *            else if (type === 'display') {\n\t *              return source.price_display;\n\t *            }\n\t *            else if (type === 'filter') {\n\t *              return source.price_filter;\n\t *            }\n\t *            // 'sort', 'type' and undefined all just use the integer\n\t *            return source.price;\n\t *          }\n\t *        } ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using default content\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [ {\n\t *          \"targets\": [ 0 ],\n\t *          \"data\": null,\n\t *          \"defaultContent\": \"Click to edit\"\n\t *        } ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using array notation - outputting a list from an array\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [ {\n\t *          \"targets\": [ 0 ],\n\t *          \"data\": \"name[, ]\"\n\t *        } ]\n\t *      } );\n\t *    } );\n\t *\n\t */\n\t\"mData\": null,\n\n\n\t/**\n\t * This property is the rendering partner to `data` and it is suggested that\n\t * when you want to manipulate data for display (including filtering,\n\t * sorting etc) without altering the underlying data for the table, use this\n\t * property. `render` can be considered to be the the read only companion to\n\t * `data` which is read / write (then as such more complex). Like `data`\n\t * this option can be given in a number of different ways to effect its\n\t * behaviour:\n\t *\n\t * * `integer` - treated as an array index for the data source. This is the\n\t *   default that DataTables uses (incrementally increased for each column).\n\t * * `string` - read an object property from the data source. There are\n\t *   three 'special' options that can be used in the string to alter how\n\t *   DataTables reads the data from the source object:\n\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t *      Javascript to read from nested objects, so to can the options\n\t *      specified in `data`. For example: `browser.version` or\n\t *      `browser.name`. If your object parameter name contains a period, use\n\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t *      from and array source, joining the data with the characters provided\n\t *      between the two brackets. For example: `name[, ]` would provide a\n\t *      comma-space separated list from the source array. If no characters\n\t *      are provided between the brackets, the original array source is\n\t *      returned.\n\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t *      execute a function of the name given. For example: `browser()` for a\n\t *      simple function on the data source, `browser.version()` for a\n\t *      function in a nested property or even `browser().version` to get an\n\t *      object property if the function called returns an object.\n\t * * `object` - use different data for the different data types requested by\n\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n\t *   of the object is the data type the property refers to and the value can\n\t *   defined using an integer, string or function using the same rules as\n\t *   `render` normally does. Note that an `_` option _must_ be specified.\n\t *   This is the default value to use if you haven't specified a value for\n\t *   the data type requested by DataTables.\n\t * * `function` - the function given will be executed whenever DataTables\n\t *   needs to set or get the data for a cell in the column. The function\n\t *   takes three parameters:\n\t *    * Parameters:\n\t *      * {array|object} The data source for the row (based on `data`)\n\t *      * {string} The type call data requested - this will be 'filter',\n\t *        'display', 'type' or 'sort'.\n\t *      * {array|object} The full data source for the row (not based on\n\t *        `data`)\n\t *    * Return:\n\t *      * The return value from the function is what will be used for the\n\t *        data requested.\n\t *\n\t *  @type string|int|function|object|null\n\t *  @default null Use the data source value.\n\t *\n\t *  @name DataTable.defaults.column.render\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Create a comma separated list from an array of objects\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t *        \"columns\": [\n\t *          { \"data\": \"engine\" },\n\t *          { \"data\": \"browser\" },\n\t *          {\n\t *            \"data\": \"platform\",\n\t *            \"render\": \"[, ].name\"\n\t *          }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Execute a function to obtain data\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [ {\n\t *          \"targets\": [ 0 ],\n\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t *          \"render\": \"browserName()\"\n\t *        } ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // As an object, extracting different data for the different types\n\t *    // This would be used with a data source such as:\n\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n\t *    // (which has both forms) is used for filtering for if a user inputs either format, while\n\t *    // the formatted phone number is the one that is shown in the table.\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [ {\n\t *          \"targets\": [ 0 ],\n\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t *          \"render\": {\n\t *            \"_\": \"phone\",\n\t *            \"filter\": \"phone_filter\",\n\t *            \"display\": \"phone_display\"\n\t *          }\n\t *        } ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Use as a function to create a link from the data source\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [ {\n\t *          \"targets\": [ 0 ],\n\t *          \"data\": \"download_link\",\n\t *          \"render\": function ( data, type, full ) {\n\t *            return '<a href=\"'+data+'\">Download</a>';\n\t *          }\n\t *        } ]\n\t *      } );\n\t *    } );\n\t */\n\t\"mRender\": null,\n\n\n\t/**\n\t * Change the cell type created for the column - either TD cells or TH cells. This\n\t * can be useful as TH cells have semantic meaning in the table body, allowing them\n\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n\t *  @type string\n\t *  @default td\n\t *\n\t *  @name DataTable.defaults.column.cellType\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Make the first column use TH cells\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [ {\n\t *          \"targets\": [ 0 ],\n\t *          \"cellType\": \"th\"\n\t *        } ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sCellType\": \"td\",\n\n\n\t/**\n\t * Class to give to each cell in this column.\n\t *  @type string\n\t *  @default <i>Empty string</i>\n\t *\n\t *  @name DataTable.defaults.column.class\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"class\": \"my_class\" },\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          null\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sClass\": \"\",\n\n\t/**\n\t * When DataTables calculates the column widths to assign to each column,\n\t * it finds the longest string in each column and then constructs a\n\t * temporary table and reads the widths from that. The problem with this\n\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t * string - thus the calculation can go wrong (doing it properly and putting\n\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t * a \"work around\" we provide this option. It will append its value to the\n\t * text that is found to be the longest string for the column - i.e. padding.\n\t * Generally you shouldn't need this!\n\t *  @type string\n\t *  @default <i>Empty string<i>\n\t *\n\t *  @name DataTable.defaults.column.contentPadding\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          {\n\t *            \"contentPadding\": \"mmm\"\n\t *          }\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sContentPadding\": \"\",\n\n\n\t/**\n\t * Allows a default value to be given for a column's data, and will be used\n\t * whenever a null data source is encountered (this can be because `data`\n\t * is set to null, or because the data source itself is null).\n\t *  @type string\n\t *  @default null\n\t *\n\t *  @name DataTable.defaults.column.defaultContent\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          {\n\t *            \"data\": null,\n\t *            \"defaultContent\": \"Edit\",\n\t *            \"targets\": [ -1 ]\n\t *          }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          {\n\t *            \"data\": null,\n\t *            \"defaultContent\": \"Edit\"\n\t *          }\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sDefaultContent\": null,\n\n\n\t/**\n\t * This parameter is only used in DataTables' server-side processing. It can\n\t * be exceptionally useful to know what columns are being displayed on the\n\t * client side, and to map these to database fields. When defined, the names\n\t * also allow DataTables to reorder information from the server if it comes\n\t * back in an unexpected order (i.e. if you switch your columns around on the\n\t * client-side, your server-side code does not also need updating).\n\t *  @type string\n\t *  @default <i>Empty string</i>\n\t *\n\t *  @name DataTable.defaults.column.name\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\n\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"name\": \"engine\" },\n\t *          { \"name\": \"browser\" },\n\t *          { \"name\": \"platform\" },\n\t *          { \"name\": \"version\" },\n\t *          { \"name\": \"grade\" }\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sName\": \"\",\n\n\n\t/**\n\t * Defines a data source type for the ordering which can be used to read\n\t * real-time information from the table (updating the internally cached\n\t * version) prior to ordering. This allows ordering to occur on user\n\t * editable elements such as form inputs.\n\t *  @type string\n\t *  @default std\n\t *\n\t *  @name DataTable.defaults.column.orderDataType\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          null,\n\t *          null,\n\t *          { \"orderDataType\": \"dom-text\" },\n\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n\t *          { \"orderDataType\": \"dom-select\" },\n\t *          { \"orderDataType\": \"dom-checkbox\" }\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sSortDataType\": \"std\",\n\n\n\t/**\n\t * The title of this column.\n\t *  @type string\n\t *  @default null <i>Derived from the 'TH' value for this column in the\n\t *    original HTML table.</i>\n\t *\n\t *  @name DataTable.defaults.column.title\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"title\": \"My column title\" },\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          null\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sTitle\": null,\n\n\n\t/**\n\t * The type allows you to specify how the data for this column will be\n\t * ordered. Four types (string, numeric, date and html (which will strip\n\t * HTML tags before ordering)) are currently available. Note that only date\n\t * formats understood by Javascript's Date() object will be accepted as type\n\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n\t * 'numeric', 'date' or 'html' (by default). Further types can be adding\n\t * through plug-ins.\n\t *  @type string\n\t *  @default null <i>Auto-detected from raw data</i>\n\t *\n\t *  @name DataTable.defaults.column.type\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"type\": \"html\" },\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          null\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sType\": null,\n\n\n\t/**\n\t * Defining the width of the column, this parameter may take any CSS value\n\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n\t * been given a specific width through this interface ensuring that the table\n\t * remains readable.\n\t *  @type string\n\t *  @default null <i>Automatic</i>\n\t *\n\t *  @name DataTable.defaults.column.width\n\t *  @dtopt Columns\n\t *\n\t *  @example\n\t *    // Using `columnDefs`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columnDefs\": [\n\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n\t *        ]\n\t *      } );\n\t *    } );\n\t *\n\t *  @example\n\t *    // Using `columns`\n\t *    $(document).ready( function() {\n\t *      $('#example').dataTable( {\n\t *        \"columns\": [\n\t *          { \"width\": \"20%\" },\n\t *          null,\n\t *          null,\n\t *          null,\n\t *          null\n\t *        ]\n\t *      } );\n\t *    } );\n\t */\n\t\"sWidth\": null\n};\n\n_fnHungarianMap( DataTable.defaults.column );\n\n\n\n/**\n * DataTables settings object - this holds all the information needed for a\n * given table, including configuration, data and current application of the\n * table options. DataTables does not have a single instance for each DataTable\n * with the settings attached to that instance, but rather instances of the\n * DataTable \"class\" are created on-the-fly as needed (typically by a\n * $().dataTable() call) and the settings object is then applied to that\n * instance.\n *\n * Note that this object is related to {@link DataTable.defaults} but this\n * one is the internal data store for DataTables's cache of columns. It should\n * NOT be manipulated outside of DataTables. Any configuration should be done\n * through the initialisation options.\n *  @namespace\n *  @todo Really should attach the settings object to individual instances so we\n *    don't need to create new instances on each $().dataTable() call (if the\n *    table already exists). It would also save passing oSettings around and\n *    into every single function. However, this is a very significant\n *    architecture change for DataTables and will almost certainly break\n *    backwards compatibility with older installations. This is something that\n *    will be done in 2.0.\n */\nDataTable.models.oSettings = {\n\t/**\n\t * Primary features of DataTables and their enablement state.\n\t *  @namespace\n\t */\n\t\"oFeatures\": {\n\n\t\t/**\n\t\t * Flag to say if DataTables should automatically try to calculate the\n\t\t * optimum table and columns widths (true) or not (false).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bAutoWidth\": null,\n\n\t\t/**\n\t\t * Delay the creation of TR and TD elements until they are actually\n\t\t * needed by a driven page draw. This can give a significant speed\n\t\t * increase for Ajax source and Javascript source data, but makes no\n\t\t * difference at all for DOM and server-side processing tables.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bDeferRender\": null,\n\n\t\t/**\n\t\t * Enable filtering on the table or not. Note that if this is disabled\n\t\t * then there is no filtering at all on the table, including fnFilter.\n\t\t * To just remove the filtering input use sDom and remove the 'f' option.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bFilter\": null,\n\n\t\t/**\n\t\t * Table information element (the 'Showing x of y records' div) enable\n\t\t * flag.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bInfo\": null,\n\n\t\t/**\n\t\t * Present a user control allowing the end user to change the page size\n\t\t * when pagination is enabled.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bLengthChange\": null,\n\n\t\t/**\n\t\t * Pagination enabled or not. Note that if this is disabled then length\n\t\t * changing must also be disabled.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bPaginate\": null,\n\n\t\t/**\n\t\t * Processing indicator enable flag whenever DataTables is enacting a\n\t\t * user request - typically an Ajax request for server-side processing.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bProcessing\": null,\n\n\t\t/**\n\t\t * Server-side processing enabled flag - when enabled DataTables will\n\t\t * get all data from the server for every draw - there is no filtering,\n\t\t * sorting or paging done on the client-side.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bServerSide\": null,\n\n\t\t/**\n\t\t * Sorting enablement flag.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSort\": null,\n\n\t\t/**\n\t\t * Multi-column sorting\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortMulti\": null,\n\n\t\t/**\n\t\t * Apply a class to the columns which are being sorted to provide a\n\t\t * visual highlight or not. This can slow things down when enabled since\n\t\t * there is a lot of DOM interaction.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortClasses\": null,\n\n\t\t/**\n\t\t * State saving enablement flag.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bStateSave\": null\n\t},\n\n\n\t/**\n\t * Scrolling settings for a table.\n\t *  @namespace\n\t */\n\t\"oScroll\": {\n\t\t/**\n\t\t * When the table is shorter in height than sScrollY, collapse the\n\t\t * table container down to the height of the table (when true).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bCollapse\": null,\n\n\t\t/**\n\t\t * Width of the scrollbar for the web-browser's platform. Calculated\n\t\t * during table initialisation.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iBarWidth\": 0,\n\n\t\t/**\n\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is\n\t\t * disabled if an empty string.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sX\": null,\n\n\t\t/**\n\t\t * Width to expand the table to when using x-scrolling. Typically you\n\t\t * should not need to use this.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @deprecated\n\t\t */\n\t\t\"sXInner\": null,\n\n\t\t/**\n\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled\n\t\t * if an empty string.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sY\": null\n\t},\n\n\t/**\n\t * Language information for the table.\n\t *  @namespace\n\t *  @extends DataTable.defaults.oLanguage\n\t */\n\t\"oLanguage\": {\n\t\t/**\n\t\t * Information callback function. See\n\t\t * {@link DataTable.defaults.fnInfoCallback}\n\t\t *  @type function\n\t\t *  @default null\n\t\t */\n\t\t\"fnInfoCallback\": null\n\t},\n\n\t/**\n\t * Browser support parameters\n\t *  @namespace\n\t */\n\t\"oBrowser\": {\n\t\t/**\n\t\t * Indicate if the browser incorrectly calculates width:100% inside a\n\t\t * scrolling element (IE6/7)\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bScrollOversize\": false,\n\n\t\t/**\n\t\t * Determine if the vertical scrollbar is on the right or left of the\n\t\t * scrolling container - needed for rtl language layout, although not\n\t\t * all browsers move the scrollbar (Safari).\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bScrollbarLeft\": false,\n\n\t\t/**\n\t\t * Flag for if `getBoundingClientRect` is fully supported or not\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bBounding\": false,\n\n\t\t/**\n\t\t * Browser scrollbar width\n\t\t *  @type integer\n\t\t *  @default 0\n\t\t */\n\t\t\"barWidth\": 0\n\t},\n\n\n\t\"ajax\": null,\n\n\n\t/**\n\t * Array referencing the nodes which are used for the features. The\n\t * parameters of this object match what is allowed by sDom - i.e.\n\t *   <ul>\n\t *     <li>'l' - Length changing</li>\n\t *     <li>'f' - Filtering input</li>\n\t *     <li>'t' - The table!</li>\n\t *     <li>'i' - Information</li>\n\t *     <li>'p' - Pagination</li>\n\t *     <li>'r' - pRocessing</li>\n\t *   </ul>\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aanFeatures\": [],\n\n\t/**\n\t * Store data information - see {@link DataTable.models.oRow} for detailed\n\t * information.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoData\": [],\n\n\t/**\n\t * Array of indexes which are in the current display (after filtering etc)\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aiDisplay\": [],\n\n\t/**\n\t * Array of indexes for display - no filtering\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aiDisplayMaster\": [],\n\n\t/**\n\t * Map of row ids to data indexes\n\t *  @type object\n\t *  @default {}\n\t */\n\t\"aIds\": {},\n\n\t/**\n\t * Store information about each column that is in use\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoColumns\": [],\n\n\t/**\n\t * Store information about the table's header\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoHeader\": [],\n\n\t/**\n\t * Store information about the table's footer\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoFooter\": [],\n\n\t/**\n\t * Store the applied global search information in case we want to force a\n\t * research or compare the old search to a new one.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @namespace\n\t *  @extends DataTable.models.oSearch\n\t */\n\t\"oPreviousSearch\": {},\n\n\t/**\n\t * Store the applied search for each column - see\n\t * {@link DataTable.models.oSearch} for the format that is used for the\n\t * filtering information for each column.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoPreSearchCols\": [],\n\n\t/**\n\t * Sorting that is applied to the table. Note that the inner arrays are\n\t * used in the following manner:\n\t * <ul>\n\t *   <li>Index 0 - column number</li>\n\t *   <li>Index 1 - current sorting direction</li>\n\t * </ul>\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type array\n\t *  @todo These inner arrays should really be objects\n\t */\n\t\"aaSorting\": null,\n\n\t/**\n\t * Sorting that is always applied to the table (i.e. prefixed in front of\n\t * aaSorting).\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aaSortingFixed\": [],\n\n\t/**\n\t * Classes to use for the striping of a table.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"asStripeClasses\": null,\n\n\t/**\n\t * If restoring a table - we should restore its striping classes as well\n\t *  @type array\n\t *  @default []\n\t */\n\t\"asDestroyStripes\": [],\n\n\t/**\n\t * If restoring a table - we should restore its width\n\t *  @type int\n\t *  @default 0\n\t */\n\t\"sDestroyWidth\": 0,\n\n\t/**\n\t * Callback functions array for every time a row is inserted (i.e. on a draw).\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoRowCallback\": [],\n\n\t/**\n\t * Callback functions for the header on each draw.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoHeaderCallback\": [],\n\n\t/**\n\t * Callback function for the footer on each draw.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoFooterCallback\": [],\n\n\t/**\n\t * Array of callback functions for draw callback functions\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoDrawCallback\": [],\n\n\t/**\n\t * Array of callback functions for row created function\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoRowCreatedCallback\": [],\n\n\t/**\n\t * Callback functions for just before the table is redrawn. A return of\n\t * false will be used to cancel the draw.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoPreDrawCallback\": [],\n\n\t/**\n\t * Callback functions for when the table has been initialised.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoInitComplete\": [],\n\n\n\t/**\n\t * Callbacks for modifying the settings to be stored for state saving, prior to\n\t * saving state.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoStateSaveParams\": [],\n\n\t/**\n\t * Callbacks for modifying the settings that have been stored for state saving\n\t * prior to using the stored values to restore the state.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoStateLoadParams\": [],\n\n\t/**\n\t * Callbacks for operating on the settings object once the saved state has been\n\t * loaded\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoStateLoaded\": [],\n\n\t/**\n\t * Cache the table ID for quick access\n\t *  @type string\n\t *  @default <i>Empty string</i>\n\t */\n\t\"sTableId\": \"\",\n\n\t/**\n\t * The TABLE node for the main table\n\t *  @type node\n\t *  @default null\n\t */\n\t\"nTable\": null,\n\n\t/**\n\t * Permanent ref to the thead element\n\t *  @type node\n\t *  @default null\n\t */\n\t\"nTHead\": null,\n\n\t/**\n\t * Permanent ref to the tfoot element - if it exists\n\t *  @type node\n\t *  @default null\n\t */\n\t\"nTFoot\": null,\n\n\t/**\n\t * Permanent ref to the tbody element\n\t *  @type node\n\t *  @default null\n\t */\n\t\"nTBody\": null,\n\n\t/**\n\t * Cache the wrapper node (contains all DataTables controlled elements)\n\t *  @type node\n\t *  @default null\n\t */\n\t\"nTableWrapper\": null,\n\n\t/**\n\t * Indicate if when using server-side processing the loading of data\n\t * should be deferred until the second draw.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type boolean\n\t *  @default false\n\t */\n\t\"bDeferLoading\": false,\n\n\t/**\n\t * Indicate if all required information has been read in\n\t *  @type boolean\n\t *  @default false\n\t */\n\t\"bInitialised\": false,\n\n\t/**\n\t * Information about open rows. Each object in the array has the parameters\n\t * 'nTr' and 'nParent'\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoOpenRows\": [],\n\n\t/**\n\t * Dictate the positioning of DataTables' control elements - see\n\t * {@link DataTable.model.oInit.sDom}.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sDom\": null,\n\n\t/**\n\t * Search delay (in mS)\n\t *  @type integer\n\t *  @default null\n\t */\n\t\"searchDelay\": null,\n\n\t/**\n\t * Which type of pagination should be used.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type string\n\t *  @default two_button\n\t */\n\t\"sPaginationType\": \"two_button\",\n\n\t/**\n\t * The state duration (for `stateSave`) in seconds.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type int\n\t *  @default 0\n\t */\n\t\"iStateDuration\": 0,\n\n\t/**\n\t * Array of callback functions for state saving. Each array element is an\n\t * object with the following parameters:\n\t *   <ul>\n\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t *       and the JSON string to save that has been thus far created. Returns\n\t *       a JSON string to be inserted into a json object\n\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n\t *     <li>string:sName - name of callback</li>\n\t *   </ul>\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoStateSave\": [],\n\n\t/**\n\t * Array of callback functions for state loading. Each array element is an\n\t * object with the following parameters:\n\t *   <ul>\n\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t *       and the object stored. May return false to cancel state loading</li>\n\t *     <li>string:sName - name of callback</li>\n\t *   </ul>\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoStateLoad\": [],\n\n\t/**\n\t * State that was saved. Useful for back reference\n\t *  @type object\n\t *  @default null\n\t */\n\t\"oSavedState\": null,\n\n\t/**\n\t * State that was loaded. Useful for back reference\n\t *  @type object\n\t *  @default null\n\t */\n\t\"oLoadedState\": null,\n\n\t/**\n\t * Source url for AJAX data for the table.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sAjaxSource\": null,\n\n\t/**\n\t * Property from a given object from which to read the table data from. This\n\t * can be an empty string (when not server-side processing), in which case\n\t * it is  assumed an an array is given directly.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type string\n\t */\n\t\"sAjaxDataProp\": null,\n\n\t/**\n\t * The last jQuery XHR object that was used for server-side data gathering.\n\t * This can be used for working with the XHR information in one of the\n\t * callbacks\n\t *  @type object\n\t *  @default null\n\t */\n\t\"jqXHR\": null,\n\n\t/**\n\t * JSON returned from the server in the last Ajax request\n\t *  @type object\n\t *  @default undefined\n\t */\n\t\"json\": undefined,\n\n\t/**\n\t * Data submitted as part of the last Ajax request\n\t *  @type object\n\t *  @default undefined\n\t */\n\t\"oAjaxData\": undefined,\n\n\t/**\n\t * Function to get the server-side data.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type function\n\t */\n\t\"fnServerData\": null,\n\n\t/**\n\t * Functions which are called prior to sending an Ajax request so extra\n\t * parameters can easily be sent to the server\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoServerParams\": [],\n\n\t/**\n\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n\t * required).\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type string\n\t */\n\t\"sServerMethod\": null,\n\n\t/**\n\t * Format numbers for display.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type function\n\t */\n\t\"fnFormatNumber\": null,\n\n\t/**\n\t * List of options that can be used for the user selectable length menu.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aLengthMenu\": null,\n\n\t/**\n\t * Counter for the draws that the table does. Also used as a tracker for\n\t * server-side processing\n\t *  @type int\n\t *  @default 0\n\t */\n\t\"iDraw\": 0,\n\n\t/**\n\t * Indicate if a redraw is being done - useful for Ajax\n\t *  @type boolean\n\t *  @default false\n\t */\n\t\"bDrawing\": false,\n\n\t/**\n\t * Draw index (iDraw) of the last error when parsing the returned data\n\t *  @type int\n\t *  @default -1\n\t */\n\t\"iDrawError\": -1,\n\n\t/**\n\t * Paging display length\n\t *  @type int\n\t *  @default 10\n\t */\n\t\"_iDisplayLength\": 10,\n\n\t/**\n\t * Paging start point - aiDisplay index\n\t *  @type int\n\t *  @default 0\n\t */\n\t\"_iDisplayStart\": 0,\n\n\t/**\n\t * Server-side processing - number of records in the result set\n\t * (i.e. before filtering), Use fnRecordsTotal rather than\n\t * this property to get the value of the number of records, regardless of\n\t * the server-side processing setting.\n\t *  @type int\n\t *  @default 0\n\t *  @private\n\t */\n\t\"_iRecordsTotal\": 0,\n\n\t/**\n\t * Server-side processing - number of records in the current display set\n\t * (i.e. after filtering). Use fnRecordsDisplay rather than\n\t * this property to get the value of the number of records, regardless of\n\t * the server-side processing setting.\n\t *  @type boolean\n\t *  @default 0\n\t *  @private\n\t */\n\t\"_iRecordsDisplay\": 0,\n\n\t/**\n\t * The classes to use for the table\n\t *  @type object\n\t *  @default {}\n\t */\n\t\"oClasses\": {},\n\n\t/**\n\t * Flag attached to the settings object so you can check in the draw\n\t * callback if filtering has been done in the draw. Deprecated in favour of\n\t * events.\n\t *  @type boolean\n\t *  @default false\n\t *  @deprecated\n\t */\n\t\"bFiltered\": false,\n\n\t/**\n\t * Flag attached to the settings object so you can check in the draw\n\t * callback if sorting has been done in the draw. Deprecated in favour of\n\t * events.\n\t *  @type boolean\n\t *  @default false\n\t *  @deprecated\n\t */\n\t\"bSorted\": false,\n\n\t/**\n\t * Indicate that if multiple rows are in the header and there is more than\n\t * one unique cell per column, if the top one (true) or bottom one (false)\n\t * should be used for sorting / title by DataTables.\n\t * Note that this parameter will be set by the initialisation routine. To\n\t * set a default use {@link DataTable.defaults}.\n\t *  @type boolean\n\t */\n\t\"bSortCellsTop\": null,\n\n\t/**\n\t * Initialisation object that is used for the table\n\t *  @type object\n\t *  @default null\n\t */\n\t\"oInit\": null,\n\n\t/**\n\t * Destroy callback functions - for plug-ins to attach themselves to the\n\t * destroy so they can clean up markup and events.\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aoDestroyCallback\": [],\n\n\n\t/**\n\t * Get the number of records in the current record set, before filtering\n\t *  @type function\n\t */\n\t\"fnRecordsTotal\": function ()\n\t{\n\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\tthis._iRecordsTotal * 1 :\n\t\t\tthis.aiDisplayMaster.length;\n\t},\n\n\t/**\n\t * Get the number of records in the current record set, after filtering\n\t *  @type function\n\t */\n\t\"fnRecordsDisplay\": function ()\n\t{\n\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\tthis._iRecordsDisplay * 1 :\n\t\t\tthis.aiDisplay.length;\n\t},\n\n\t/**\n\t * Get the display end point - aiDisplay index\n\t *  @type function\n\t */\n\t\"fnDisplayEnd\": function ()\n\t{\n\t\tvar\n\t\t\tlen      = this._iDisplayLength,\n\t\t\tstart    = this._iDisplayStart,\n\t\t\tcalc     = start + len,\n\t\t\trecords  = this.aiDisplay.length,\n\t\t\tfeatures = this.oFeatures,\n\t\t\tpaginate = features.bPaginate;\n\n\t\tif ( features.bServerSide ) {\n\t\t\treturn paginate === false || len === -1 ?\n\t\t\t\tstart + records :\n\t\t\t\tMath.min( start+len, this._iRecordsDisplay );\n\t\t}\n\t\telse {\n\t\t\treturn ! paginate || calc>records || len===-1 ?\n\t\t\t\trecords :\n\t\t\t\tcalc;\n\t\t}\n\t},\n\n\t/**\n\t * The DataTables object for this table\n\t *  @type object\n\t *  @default null\n\t */\n\t\"oInstance\": null,\n\n\t/**\n\t * Unique identifier for each instance of the DataTables object. If there\n\t * is an ID on the table node, then it takes that value, otherwise an\n\t * incrementing internal counter is used.\n\t *  @type string\n\t *  @default null\n\t */\n\t\"sInstance\": null,\n\n\t/**\n\t * tabindex attribute value that is added to DataTables control elements, allowing\n\t * keyboard navigation of the table and its controls.\n\t */\n\t\"iTabIndex\": 0,\n\n\t/**\n\t * DIV container for the footer scrolling table if scrolling\n\t */\n\t\"nScrollHead\": null,\n\n\t/**\n\t * DIV container for the footer scrolling table if scrolling\n\t */\n\t\"nScrollFoot\": null,\n\n\t/**\n\t * Last applied sort\n\t *  @type array\n\t *  @default []\n\t */\n\t\"aLastSort\": [],\n\n\t/**\n\t * Stored plug-in instances\n\t *  @type object\n\t *  @default {}\n\t */\n\t\"oPlugins\": {},\n\n\t/**\n\t * Function used to get a row's id from the row's data\n\t *  @type function\n\t *  @default null\n\t */\n\t\"rowIdFn\": null,\n\n\t/**\n\t * Data location where to store a row's id\n\t *  @type string\n\t *  @default null\n\t */\n\t\"rowId\": null\n};\n\n/**\n * Extension object for DataTables that is used to provide all extension\n * options.\n *\n * Note that the `DataTable.ext` object is available through\n * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n *  @namespace\n *  @extends DataTable.models.ext\n */\n\n\n/**\n * DataTables extensions\n * \n * This namespace acts as a collection area for plug-ins that can be used to\n * extend DataTables capabilities. Indeed many of the build in methods\n * use this method to provide their own capabilities (sorting methods for\n * example).\n *\n * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n * reasons\n *\n *  @namespace\n */\nDataTable.ext = _ext = {\n\t/**\n\t * Buttons. For use with the Buttons extension for DataTables. This is\n\t * defined here so other extensions can define buttons regardless of load\n\t * order. It is _not_ used by DataTables core.\n\t *\n\t *  @type object\n\t *  @default {}\n\t */\n\tbuttons: {},\n\n\n\t/**\n\t * Element class names\n\t *\n\t *  @type object\n\t *  @default {}\n\t */\n\tclasses: {},\n\n\n\t/**\n\t * DataTables build type (expanded by the download builder)\n\t *\n\t *  @type string\n\t */\n\tbuilder: \"-source-\",\n\n\n\t/**\n\t * Error reporting.\n\t * \n\t * How should DataTables report an error. Can take the value 'alert',\n\t * 'throw', 'none' or a function.\n\t *\n\t *  @type string|function\n\t *  @default alert\n\t */\n\terrMode: \"alert\",\n\n\n\t/**\n\t * Feature plug-ins.\n\t * \n\t * This is an array of objects which describe the feature plug-ins that are\n\t * available to DataTables. These feature plug-ins are then available for\n\t * use through the `dom` initialisation option.\n\t * \n\t * Each feature plug-in is described by an object which must have the\n\t * following properties:\n\t * \n\t * * `fnInit` - function that is used to initialise the plug-in,\n\t * * `cFeature` - a character so the feature can be enabled by the `dom`\n\t *   instillation option. This is case sensitive.\n\t *\n\t * The `fnInit` function has the following input parameters:\n\t *\n\t * 1. `{object}` DataTables settings object: see\n\t *    {@link DataTable.models.oSettings}\n\t *\n\t * And the following return is expected:\n\t * \n\t * * {node|null} The element which contains your feature. Note that the\n\t *   return may also be void if your plug-in does not require to inject any\n\t *   DOM elements into DataTables control (`dom`) - for example this might\n\t *   be useful when developing a plug-in which allows table control via\n\t *   keyboard entry\n\t *\n\t *  @type array\n\t *\n\t *  @example\n\t *    $.fn.dataTable.ext.features.push( {\n\t *      \"fnInit\": function( oSettings ) {\n\t *        return new TableTools( { \"oDTSettings\": oSettings } );\n\t *      },\n\t *      \"cFeature\": \"T\"\n\t *    } );\n\t */\n\tfeature: [],\n\n\n\t/**\n\t * Row searching.\n\t * \n\t * This method of searching is complimentary to the default type based\n\t * searching, and a lot more comprehensive as it allows you complete control\n\t * over the searching logic. Each element in this array is a function\n\t * (parameters described below) that is called for every row in the table,\n\t * and your logic decides if it should be included in the searching data set\n\t * or not.\n\t *\n\t * Searching functions have the following input parameters:\n\t *\n\t * 1. `{object}` DataTables settings object: see\n\t *    {@link DataTable.models.oSettings}\n\t * 2. `{array|object}` Data for the row to be processed (same as the\n\t *    original format that was passed in as the data source, or an array\n\t *    from a DOM data source\n\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n\t *    can be useful to retrieve the `TR` element if you need DOM interaction.\n\t *\n\t * And the following return is expected:\n\t *\n\t * * {boolean} Include the row in the searched result set (true) or not\n\t *   (false)\n\t *\n\t * Note that as with the main search ability in DataTables, technically this\n\t * is \"filtering\", since it is subtractive. However, for consistency in\n\t * naming we call it searching here.\n\t *\n\t *  @type array\n\t *  @default []\n\t *\n\t *  @example\n\t *    // The following example shows custom search being applied to the\n\t *    // fourth column (i.e. the data[3] index) based on two input values\n\t *    // from the end-user, matching the data in a certain range.\n\t *    $.fn.dataTable.ext.search.push(\n\t *      function( settings, data, dataIndex ) {\n\t *        var min = document.getElementById('min').value * 1;\n\t *        var max = document.getElementById('max').value * 1;\n\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n\t *\n\t *        if ( min == \"\" && max == \"\" ) {\n\t *          return true;\n\t *        }\n\t *        else if ( min == \"\" && version < max ) {\n\t *          return true;\n\t *        }\n\t *        else if ( min < version && \"\" == max ) {\n\t *          return true;\n\t *        }\n\t *        else if ( min < version && version < max ) {\n\t *          return true;\n\t *        }\n\t *        return false;\n\t *      }\n\t *    );\n\t */\n\tsearch: [],\n\n\n\t/**\n\t * Selector extensions\n\t *\n\t * The `selector` option can be used to extend the options available for the\n\t * selector modifier options (`selector-modifier` object data type) that\n\t * each of the three built in selector types offer (row, column and cell +\n\t * their plural counterparts). For example the Select extension uses this\n\t * mechanism to provide an option to select only rows, columns and cells\n\t * that have been marked as selected by the end user (`{selected: true}`),\n\t * which can be used in conjunction with the existing built in selector\n\t * options.\n\t *\n\t * Each property is an array to which functions can be pushed. The functions\n\t * take three attributes:\n\t *\n\t * * Settings object for the host table\n\t * * Options object (`selector-modifier` object type)\n\t * * Array of selected item indexes\n\t *\n\t * The return is an array of the resulting item indexes after the custom\n\t * selector has been applied.\n\t *\n\t *  @type object\n\t */\n\tselector: {\n\t\tcell: [],\n\t\tcolumn: [],\n\t\trow: []\n\t},\n\n\n\t/**\n\t * Internal functions, exposed for used in plug-ins.\n\t * \n\t * Please note that you should not need to use the internal methods for\n\t * anything other than a plug-in (and even then, try to avoid if possible).\n\t * The internal function may change between releases.\n\t *\n\t *  @type object\n\t *  @default {}\n\t */\n\tinternal: {},\n\n\n\t/**\n\t * Legacy configuration options. Enable and disable legacy options that\n\t * are available in DataTables.\n\t *\n\t *  @type object\n\t */\n\tlegacy: {\n\t\t/**\n\t\t * Enable / disable DataTables 1.9 compatible server-side processing\n\t\t * requests\n\t\t *\n\t\t *  @type boolean\n\t\t *  @default null\n\t\t */\n\t\tajax: null\n\t},\n\n\n\t/**\n\t * Pagination plug-in methods.\n\t * \n\t * Each entry in this object is a function and defines which buttons should\n\t * be shown by the pagination rendering method that is used for the table:\n\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n\t * buttons are displayed in the document, while the functions here tell it\n\t * what buttons to display. This is done by returning an array of button\n\t * descriptions (what each button will do).\n\t *\n\t * Pagination types (the four built in options and any additional plug-in\n\t * options defined here) can be used through the `paginationType`\n\t * initialisation parameter.\n\t *\n\t * The functions defined take two parameters:\n\t *\n\t * 1. `{int} page` The current page index\n\t * 2. `{int} pages` The number of pages in the table\n\t *\n\t * Each function is expected to return an array where each element of the\n\t * array can be one of:\n\t *\n\t * * `first` - Jump to first page when activated\n\t * * `last` - Jump to last page when activated\n\t * * `previous` - Show previous page when activated\n\t * * `next` - Show next page when activated\n\t * * `{int}` - Show page of the index given\n\t * * `{array}` - A nested array containing the above elements to add a\n\t *   containing 'DIV' element (might be useful for styling).\n\t *\n\t * Note that DataTables v1.9- used this object slightly differently whereby\n\t * an object with two functions would be defined for each plug-in. That\n\t * ability is still supported by DataTables 1.10+ to provide backwards\n\t * compatibility, but this option of use is now decremented and no longer\n\t * documented in DataTables 1.10+.\n\t *\n\t *  @type object\n\t *  @default {}\n\t *\n\t *  @example\n\t *    // Show previous, next and current page buttons only\n\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n\t *      return [ 'previous', page, 'next' ];\n\t *    };\n\t */\n\tpager: {},\n\n\n\trenderer: {\n\t\tpageButton: {},\n\t\theader: {}\n\t},\n\n\n\t/**\n\t * Ordering plug-ins - custom data source\n\t * \n\t * The extension options for ordering of data available here is complimentary\n\t * to the default type based ordering that DataTables typically uses. It\n\t * allows much greater control over the the data that is being used to\n\t * order a column, but is necessarily therefore more complex.\n\t * \n\t * This type of ordering is useful if you want to do ordering based on data\n\t * live from the DOM (for example the contents of an 'input' element) rather\n\t * than just the static string that DataTables knows of.\n\t * \n\t * The way these plug-ins work is that you create an array of the values you\n\t * wish to be ordering for the column in question and then return that\n\t * array. The data in the array much be in the index order of the rows in\n\t * the table (not the currently ordering order!). Which order data gathering\n\t * function is run here depends on the `dt-init columns.orderDataType`\n\t * parameter that is used for the column (if any).\n\t *\n\t * The functions defined take two parameters:\n\t *\n\t * 1. `{object}` DataTables settings object: see\n\t *    {@link DataTable.models.oSettings}\n\t * 2. `{int}` Target column index\n\t *\n\t * Each function is expected to return an array:\n\t *\n\t * * `{array}` Data for the column to be ordering upon\n\t *\n\t *  @type array\n\t *\n\t *  @example\n\t *    // Ordering using `input` node values\n\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n\t *    {\n\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n\t *        return $('input', td).val();\n\t *      } );\n\t *    }\n\t */\n\torder: {},\n\n\n\t/**\n\t * Type based plug-ins.\n\t *\n\t * Each column in DataTables has a type assigned to it, either by automatic\n\t * detection or by direct assignment using the `type` option for the column.\n\t * The type of a column will effect how it is ordering and search (plug-ins\n\t * can also make use of the column type if required).\n\t *\n\t * @namespace\n\t */\n\ttype: {\n\t\t/**\n\t\t * Type detection functions.\n\t\t *\n\t\t * The functions defined in this object are used to automatically detect\n\t\t * a column's type, making initialisation of DataTables super easy, even\n\t\t * when complex data is in the table.\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t     *  1. `{*}` Data from the column cell to be analysed\n\t     *  2. `{settings}` DataTables settings object. This can be used to\n\t     *     perform context specific type detection - for example detection\n\t     *     based on language settings such as using a comma for a decimal\n\t     *     place. Generally speaking the options from the settings will not\n\t     *     be required\n\t\t *\n\t\t * Each function is expected to return:\n\t\t *\n\t\t * * `{string|null}` Data type detected, or null if unknown (and thus\n\t\t *   pass it on to the other type detection functions.\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    // Currency type detection plug-in:\n\t\t *    $.fn.dataTable.ext.type.detect.push(\n\t\t *      function ( data, settings ) {\n\t\t *        // Check the numeric part\n\t\t *        if ( ! data.substring(1).match(/[0-9]/) ) {\n\t\t *          return null;\n\t\t *        }\n\t\t *\n\t\t *        // Check prefixed by currency\n\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n\t\t *          return 'currency';\n\t\t *        }\n\t\t *        return null;\n\t\t *      }\n\t\t *    );\n\t\t */\n\t\tdetect: [],\n\n\n\t\t/**\n\t\t * Type based search formatting.\n\t\t *\n\t\t * The type based searching functions can be used to pre-format the\n\t\t * data to be search on. For example, it can be used to strip HTML\n\t\t * tags or to de-format telephone numbers for numeric only searching.\n\t\t *\n\t\t * Note that is a search is not defined for a column of a given type,\n\t\t * no search formatting will be performed.\n\t\t * \n\t\t * Pre-processing of searching data plug-ins - When you assign the sType\n\t\t * for a column (or have it automatically detected for you by DataTables\n\t\t * or a type detection plug-in), you will typically be using this for\n\t\t * custom sorting, but it can also be used to provide custom searching\n\t\t * by allowing you to pre-processing the data and returning the data in\n\t\t * the format that should be searched upon. This is done by adding\n\t\t * functions this object with a parameter name which matches the sType\n\t\t * for that target column. This is the corollary of <i>afnSortData</i>\n\t\t * for searching data.\n\t\t *\n\t\t * The functions defined take a single parameter:\n\t\t *\n\t     *  1. `{*}` Data from the column cell to be prepared for searching\n\t\t *\n\t\t * Each function is expected to return:\n\t\t *\n\t\t * * `{string|null}` Formatted string that will be used for the searching.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t *\n\t\t *  @example\n\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n\t\t *    }\n\t\t */\n\t\tsearch: {},\n\n\n\t\t/**\n\t\t * Type based ordering.\n\t\t *\n\t\t * The column type tells DataTables what ordering to apply to the table\n\t\t * when a column is sorted upon. The order for each type that is defined,\n\t\t * is defined by the functions available in this object.\n\t\t *\n\t\t * Each ordering option can be described by three properties added to\n\t\t * this object:\n\t\t *\n\t\t * * `{type}-pre` - Pre-formatting function\n\t\t * * `{type}-asc` - Ascending order function\n\t\t * * `{type}-desc` - Descending order function\n\t\t *\n\t\t * All three can be used together, only `{type}-pre` or only\n\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended\n\t\t * that only `{type}-pre` is used, as this provides the optimal\n\t\t * implementation in terms of speed, although the others are provided\n\t\t * for compatibility with existing Javascript sort functions.\n\t\t *\n\t\t * `{type}-pre`: Functions defined take a single parameter:\n\t\t *\n\t     *  1. `{*}` Data from the column cell to be prepared for ordering\n\t\t *\n\t\t * And return:\n\t\t *\n\t\t * * `{*}` Data to be sorted upon\n\t\t *\n\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n\t\t * functions, taking two parameters:\n\t\t *\n\t     *  1. `{*}` Data to compare to the second parameter\n\t     *  2. `{*}` Data to compare to the first parameter\n\t\t *\n\t\t * And returning:\n\t\t *\n\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n\t\t *   than the second parameter, ===0 if the two parameters are equal and\n\t\t *   >0 if the first parameter should be sorted height than the second\n\t\t *   parameter.\n\t\t * \n\t\t *  @type object\n\t\t *  @default {}\n\t\t *\n\t\t *  @example\n\t\t *    // Numeric ordering of formatted numbers with a pre-formatter\n\t\t *    $.extend( $.fn.dataTable.ext.type.order, {\n\t\t *      \"string-pre\": function(x) {\n\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n\t\t *        return parseFloat( a );\n\t\t *      }\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Case-sensitive string ordering, with no pre-formatting method\n\t\t *    $.extend( $.fn.dataTable.ext.order, {\n\t\t *      \"string-case-asc\": function(x,y) {\n\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t *      },\n\t\t *      \"string-case-desc\": function(x,y) {\n\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t *      }\n\t\t *    } );\n\t\t */\n\t\torder: {}\n\t},\n\n\t/**\n\t * Unique DataTables instance counter\n\t *\n\t * @type int\n\t * @private\n\t */\n\t_unique: 0,\n\n\n\t//\n\t// Depreciated\n\t// The following properties are retained for backwards compatibility only.\n\t// The should not be used in new projects and will be removed in a future\n\t// version\n\t//\n\n\t/**\n\t * Version check function.\n\t *  @type function\n\t *  @depreciated Since 1.10\n\t */\n\tfnVersionCheck: DataTable.fnVersionCheck,\n\n\n\t/**\n\t * Index for what 'this' index API functions should use\n\t *  @type int\n\t *  @deprecated Since v1.10\n\t */\n\tiApiIndex: 0,\n\n\n\t/**\n\t * jQuery UI class container\n\t *  @type object\n\t *  @deprecated Since v1.10\n\t */\n\toJUIClasses: {},\n\n\n\t/**\n\t * Software version\n\t *  @type string\n\t *  @deprecated Since v1.10\n\t */\n\tsVersion: DataTable.version\n};\n\n\n//\n// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n//\n$.extend( _ext, {\n\tafnFiltering: _ext.search,\n\taTypes:       _ext.type.detect,\n\tofnSearch:    _ext.type.search,\n\toSort:        _ext.type.order,\n\tafnSortData:  _ext.order,\n\taoFeatures:   _ext.feature,\n\toApi:         _ext.internal,\n\toStdClasses:  _ext.classes,\n\toPagination:  _ext.pager\n} );\n\n\n$.extend( DataTable.ext.classes, {\n\t\"sTable\": \"dataTable\",\n\t\"sNoFooter\": \"no-footer\",\n\n\t/* Paging buttons */\n\t\"sPageButton\": \"paginate_button\",\n\t\"sPageButtonActive\": \"current\",\n\t\"sPageButtonDisabled\": \"disabled\",\n\n\t/* Striping classes */\n\t\"sStripeOdd\": \"odd\",\n\t\"sStripeEven\": \"even\",\n\n\t/* Empty row */\n\t\"sRowEmpty\": \"dataTables_empty\",\n\n\t/* Features */\n\t\"sWrapper\": \"dataTables_wrapper\",\n\t\"sFilter\": \"dataTables_filter\",\n\t\"sInfo\": \"dataTables_info\",\n\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n\t\"sLength\": \"dataTables_length\",\n\t\"sProcessing\": \"dataTables_processing\",\n\n\t/* Sorting */\n\t\"sSortAsc\": \"sorting_asc\",\n\t\"sSortDesc\": \"sorting_desc\",\n\t\"sSortable\": \"sorting\", /* Sortable in both directions */\n\t\"sSortableAsc\": \"sorting_desc_disabled\",\n\t\"sSortableDesc\": \"sorting_asc_disabled\",\n\t\"sSortableNone\": \"sorting_disabled\",\n\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n\n\t/* Filtering */\n\t\"sFilterInput\": \"\",\n\n\t/* Page length */\n\t\"sLengthSelect\": \"\",\n\n\t/* Scrolling */\n\t\"sScrollWrapper\": \"dataTables_scroll\",\n\t\"sScrollHead\": \"dataTables_scrollHead\",\n\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n\t\"sScrollBody\": \"dataTables_scrollBody\",\n\t\"sScrollFoot\": \"dataTables_scrollFoot\",\n\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\n\t/* Misc */\n\t\"sHeaderTH\": \"\",\n\t\"sFooterTH\": \"\",\n\n\t// Deprecated\n\t\"sSortJUIAsc\": \"\",\n\t\"sSortJUIDesc\": \"\",\n\t\"sSortJUI\": \"\",\n\t\"sSortJUIAscAllowed\": \"\",\n\t\"sSortJUIDescAllowed\": \"\",\n\t\"sSortJUIWrapper\": \"\",\n\t\"sSortIcon\": \"\",\n\t\"sJUIHeader\": \"\",\n\t\"sJUIFooter\": \"\"\n} );\n\n\nvar extPagination = DataTable.ext.pager;\n\nfunction _numbers ( page, pages ) {\n\tvar\n\t\tnumbers = [],\n\t\tbuttons = extPagination.numbers_length,\n\t\thalf = Math.floor( buttons / 2 ),\n\t\ti = 1;\n\n\tif ( pages <= buttons ) {\n\t\tnumbers = _range( 0, pages );\n\t}\n\telse if ( page <= half ) {\n\t\tnumbers = _range( 0, buttons-2 );\n\t\tnumbers.push( 'ellipsis' );\n\t\tnumbers.push( pages-1 );\n\t}\n\telse if ( page >= pages - 1 - half ) {\n\t\tnumbers = _range( pages-(buttons-2), pages );\n\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\n\t\tnumbers.splice( 0, 0, 0 );\n\t}\n\telse {\n\t\tnumbers = _range( page-half+2, page+half-1 );\n\t\tnumbers.push( 'ellipsis' );\n\t\tnumbers.push( pages-1 );\n\t\tnumbers.splice( 0, 0, 'ellipsis' );\n\t\tnumbers.splice( 0, 0, 0 );\n\t}\n\n\tnumbers.DT_el = 'span';\n\treturn numbers;\n}\n\n\n$.extend( extPagination, {\n\tsimple: function ( page, pages ) {\n\t\treturn [ 'previous', 'next' ];\n\t},\n\n\tfull: function ( page, pages ) {\n\t\treturn [  'first', 'previous', 'next', 'last' ];\n\t},\n\n\tnumbers: function ( page, pages ) {\n\t\treturn [ _numbers(page, pages) ];\n\t},\n\n\tsimple_numbers: function ( page, pages ) {\n\t\treturn [ 'previous', _numbers(page, pages), 'next' ];\n\t},\n\n\tfull_numbers: function ( page, pages ) {\n\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\n\t},\n\t\n\tfirst_last_numbers: function (page, pages) {\n \t\treturn ['first', _numbers(page, pages), 'last'];\n \t},\n\n\t// For testing and plug-ins to use\n\t_numbers: _numbers,\n\n\t// Number of number buttons (including ellipsis) to show. _Must be odd!_\n\tnumbers_length: 7\n} );\n\n\n$.extend( true, DataTable.ext.renderer, {\n\tpageButton: {\n\t\t_: function ( settings, host, idx, buttons, page, pages ) {\n\t\t\tvar classes = settings.oClasses;\n\t\t\tvar lang = settings.oLanguage.oPaginate;\n\t\t\tvar aria = settings.oLanguage.oAria.paginate || {};\n\t\t\tvar btnDisplay, btnClass;\n\n\t\t\tvar attach = function( container, buttons ) {\n\t\t\t\tvar i, ien, node, button;\n\t\t\t\tvar disabledClass = classes.sPageButtonDisabled;\n\t\t\t\tvar clickHandler = function ( e ) {\n\t\t\t\t\t_fnPageChange( settings, e.data.action, true );\n\t\t\t\t};\n\n\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n\t\t\t\t\tbutton = buttons[i];\n\n\t\t\t\t\tif ( Array.isArray( button ) ) {\n\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )\n\t\t\t\t\t\t\t.appendTo( container );\n\t\t\t\t\t\tattach( inner, button );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar disabled = false;\n\n\t\t\t\t\t\tbtnDisplay = null;\n\t\t\t\t\t\tbtnClass = button;\n\n\t\t\t\t\t\tswitch ( button ) {\n\t\t\t\t\t\t\tcase 'ellipsis':\n\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'first':\n\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;\n\n\t\t\t\t\t\t\t\tif ( page === 0 ) {\n\t\t\t\t\t\t\t\t\tdisabled = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'previous':\n\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\n\n\t\t\t\t\t\t\t\tif ( page === 0 ) {\n\t\t\t\t\t\t\t\t\tdisabled = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'next':\n\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;\n\n\t\t\t\t\t\t\t\tif ( pages === 0 || page === pages-1 ) {\n\t\t\t\t\t\t\t\t\tdisabled = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'last':\n\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;\n\n\t\t\t\t\t\t\t\tif ( pages === 0 || page === pages-1 ) {\n\t\t\t\t\t\t\t\t\tdisabled = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbtnDisplay = settings.fnFormatNumber( button + 1 );\n\t\t\t\t\t\t\t\tbtnClass = page === button ?\n\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( btnDisplay !== null ) {\n\t\t\t\t\t\t\tvar tag = settings.oInit.pagingTag || 'a';\n\n\t\t\t\t\t\t\tif (disabled) {\n\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnode = $('<'+tag+'>', {\n\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\n\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\n\t\t\t\t\t\t\t\t\t'aria-disabled': disabled ? 'true' : null,\n\t\t\t\t\t\t\t\t\t'aria-label': aria[ button ],\n\t\t\t\t\t\t\t\t\t'role': 'link',\n\t\t\t\t\t\t\t\t\t'aria-current': btnClass === classes.sPageButtonActive ? 'page' : null,\n\t\t\t\t\t\t\t\t\t'data-dt-idx': button,\n\t\t\t\t\t\t\t\t\t'tabindex': disabled ? -1 : settings.iTabIndex,\n\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\n\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\n\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t.html( btnDisplay )\n\t\t\t\t\t\t\t\t.appendTo( container );\n\n\t\t\t\t\t\t\t_fnBindAction(\n\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t// inside an iframe or frame. Try / catch the error. Not good for\n\t\t\t// accessibility, but neither are frames.\n\t\t\tvar activeEl;\n\n\t\t\ttry {\n\t\t\t\t// Because this approach is destroying and recreating the paging\n\t\t\t\t// elements, focus is lost on the select button which is bad for\n\t\t\t\t// accessibility. So we want to restore focus once the draw has\n\t\t\t\t// completed\n\t\t\t\tactiveEl = $(host).find(document.activeElement).data('dt-idx');\n\t\t\t}\n\t\t\tcatch (e) {}\n\n\t\t\tattach( $(host).empty(), buttons );\n\n\t\t\tif ( activeEl !== undefined ) {\n\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');\n\t\t\t}\n\t\t}\n\t}\n} );\n\n\n\n// Built in type detection. See model.ext.aTypes for information about\n// what is required from this methods.\n$.extend( DataTable.ext.type.detect, [\n\t// Plain numbers - first since V8 detects some plain numbers as dates\n\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n\tfunction ( d, settings )\n\t{\n\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;\n\t},\n\n\t// Dates (only those recognised by the browser's Date.parse)\n\tfunction ( d, settings )\n\t{\n\t\t// V8 tries _very_ hard to make a string passed into `Date.parse()`\n\t\t// valid, so we need to use a regex to restrict date formats. Use a\n\t\t// plug-in for anything other than ISO8601 style strings\n\t\tif ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\n\t\t\treturn null;\n\t\t}\n\t\tvar parsed = Date.parse(d);\n\t\treturn (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n\t},\n\n\t// Formatted numbers\n\tfunction ( d, settings )\n\t{\n\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\n\t},\n\n\t// HTML numeric\n\tfunction ( d, settings )\n\t{\n\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\n\t},\n\n\t// HTML numeric, formatted\n\tfunction ( d, settings )\n\t{\n\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\n\t},\n\n\t// HTML (this is strict checking - there must be html)\n\tfunction ( d, settings )\n\t{\n\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n\t\t\t'html' : null;\n\t}\n] );\n\n\n\n// Filter formatting functions. See model.ext.ofnSearch for information about\n// what is required from these methods.\n// \n// Note that additional search methods are added for the html numbers and\n// html formatted numbers by `_addNumericSort()` when we know what the decimal\n// place is\n\n\n$.extend( DataTable.ext.type.search, {\n\thtml: function ( data ) {\n\t\treturn _empty(data) ?\n\t\t\tdata :\n\t\t\ttypeof data === 'string' ?\n\t\t\t\tdata\n\t\t\t\t\t.replace( _re_new_lines, \" \" )\n\t\t\t\t\t.replace( _re_html, \"\" ) :\n\t\t\t\t'';\n\t},\n\n\tstring: function ( data ) {\n\t\treturn _empty(data) ?\n\t\t\tdata :\n\t\t\ttypeof data === 'string' ?\n\t\t\t\tdata.replace( _re_new_lines, \" \" ) :\n\t\t\t\tdata;\n\t}\n} );\n\n\n\nvar __numericReplace = function ( d, decimalPlace, re1, re2 ) {\n\tif ( d !== 0 && (!d || d === '-') ) {\n\t\treturn -Infinity;\n\t}\n\t\n\tvar type = typeof d;\n\n\tif (type === 'number' || type === 'bigint') {\n\t\treturn d;\n\t}\n\n\t// If a decimal place other than `.` is used, it needs to be given to the\n\t// function so we can detect it and replace with a `.` which is the only\n\t// decimal place Javascript recognises - it is not locale aware.\n\tif ( decimalPlace ) {\n\t\td = _numToDecimal( d, decimalPlace );\n\t}\n\n\tif ( d.replace ) {\n\t\tif ( re1 ) {\n\t\t\td = d.replace( re1, '' );\n\t\t}\n\n\t\tif ( re2 ) {\n\t\t\td = d.replace( re2, '' );\n\t\t}\n\t}\n\n\treturn d * 1;\n};\n\n\n// Add the numeric 'deformatting' functions for sorting and search. This is done\n// in a function to provide an easy ability for the language options to add\n// additional methods if a non-period decimal place is used.\nfunction _addNumericSort ( decimalPlace ) {\n\t$.each(\n\t\t{\n\t\t\t// Plain numbers\n\t\t\t\"num\": function ( d ) {\n\t\t\t\treturn __numericReplace( d, decimalPlace );\n\t\t\t},\n\n\t\t\t// Formatted numbers\n\t\t\t\"num-fmt\": function ( d ) {\n\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );\n\t\t\t},\n\n\t\t\t// HTML numeric\n\t\t\t\"html-num\": function ( d ) {\n\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );\n\t\t\t},\n\n\t\t\t// HTML numeric, formatted\n\t\t\t\"html-num-fmt\": function ( d ) {\n\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\n\t\t\t}\n\t\t},\n\t\tfunction ( key, fn ) {\n\t\t\t// Add the ordering method\n\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;\n\n\t\t\t// For HTML types add a search formatter that will strip the HTML\n\t\t\tif ( key.match(/^html\\-/) ) {\n\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\n\t\t\t}\n\t\t}\n\t);\n}\n\n\n// Default sort methods\n$.extend( _ext.type.order, {\n\t// Dates\n\t\"date-pre\": function ( d ) {\n\t\tvar ts = Date.parse( d );\n\t\treturn isNaN(ts) ? -Infinity : ts;\n\t},\n\n\t// html\n\t\"html-pre\": function ( a ) {\n\t\treturn _empty(a) ?\n\t\t\t'' :\n\t\t\ta.replace ?\n\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :\n\t\t\t\ta+'';\n\t},\n\n\t// string\n\t\"string-pre\": function ( a ) {\n\t\t// This is a little complex, but faster than always calling toString,\n\t\t// https://jsperf.com/tostring-v-check\n\t\treturn _empty(a) ?\n\t\t\t'' :\n\t\t\ttypeof a === 'string' ?\n\t\t\t\ta.toLowerCase() :\n\t\t\t\t! a.toString ?\n\t\t\t\t\t'' :\n\t\t\t\t\ta.toString();\n\t},\n\n\t// string-asc and -desc are retained only for compatibility with the old\n\t// sort methods\n\t\"string-asc\": function ( x, y ) {\n\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t},\n\n\t\"string-desc\": function ( x, y ) {\n\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t}\n} );\n\n\n// Numeric sorting types - order doesn't matter here\n_addNumericSort( '' );\n\n\n$.extend( true, DataTable.ext.renderer, {\n\theader: {\n\t\t_: function ( settings, cell, column, classes ) {\n\t\t\t// No additional mark-up required\n\t\t\t// Attach a sort listener to update on sort - note that using the\n\t\t\t// `DT` namespace will allow the event to be removed automatically\n\t\t\t// on destroy, while the `dt` namespaced event is the one we are\n\t\t\t// listening for\n\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\tif ( settings !== ctx ) { // need to check this this is the host\n\t\t\t\t\treturn;               // table, not a nested one\n\t\t\t\t}\n\n\t\t\t\tvar colIdx = column.idx;\n\n\t\t\t\tcell\n\t\t\t\t\t.removeClass(\n\t\t\t\t\t\tclasses.sSortAsc +' '+\n\t\t\t\t\t\tclasses.sSortDesc\n\t\t\t\t\t)\n\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t);\n\t\t\t} );\n\t\t},\n\n\t\tjqueryui: function ( settings, cell, column, classes ) {\n\t\t\t$('<div/>')\n\t\t\t\t.addClass( classes.sSortJUIWrapper )\n\t\t\t\t.append( cell.contents() )\n\t\t\t\t.append( $('<span/>')\n\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\n\t\t\t\t)\n\t\t\t\t.appendTo( cell );\n\n\t\t\t// Attach a sort listener to update on sort\n\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar colIdx = column.idx;\n\n\t\t\t\tcell\n\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t);\n\n\t\t\t\tcell\n\t\t\t\t\t.find( 'span.'+classes.sSortIcon )\n\t\t\t\t\t.removeClass(\n\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+\n\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+\n\t\t\t\t\t\tclasses.sSortJUI +\" \"+\n\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+\n\t\t\t\t\t\tclasses.sSortJUIDescAllowed\n\t\t\t\t\t)\n\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\tclasses.sSortJUIDesc :\n\t\t\t\t\t\t\tcolumn.sSortingClassJUI\n\t\t\t\t\t);\n\t\t\t} );\n\t\t}\n\t}\n} );\n\n/*\n * Public helper functions. These aren't used internally by DataTables, or\n * called by any of the options passed into DataTables, but they can be used\n * externally by developers working with DataTables. They are helper functions\n * to make working with DataTables a little bit easier.\n */\n\nvar __htmlEscapeEntities = function ( d ) {\n\tif (Array.isArray(d)) {\n\t\td = d.join(',');\n\t}\n\n\treturn typeof d === 'string' ?\n\t\td\n\t\t\t.replace(/&/g, '&amp;')\n\t\t\t.replace(/</g, '&lt;')\n\t\t\t.replace(/>/g, '&gt;')\n\t\t\t.replace(/\"/g, '&quot;') :\n\t\td;\n};\n\n// Common logic for moment, luxon or a date action\nfunction __mld( dt, momentFn, luxonFn, dateFn, arg1 ) {\n\tif (window.moment) {\n\t\treturn dt[momentFn]( arg1 );\n\t}\n\telse if (window.luxon) {\n\t\treturn dt[luxonFn]( arg1 );\n\t}\n\t\n\treturn dateFn ? dt[dateFn]( arg1 ) : dt;\n}\n\n\nvar __mlWarning = false;\nfunction __mldObj (d, format, locale) {\n\tvar dt;\n\n\tif (window.moment) {\n\t\tdt = window.moment.utc( d, format, locale, true );\n\n\t\tif (! dt.isValid()) {\n\t\t\treturn null;\n\t\t}\n\t}\n\telse if (window.luxon) {\n\t\tdt = format && typeof d === 'string'\n\t\t\t? window.luxon.DateTime.fromFormat( d, format )\n\t\t\t: window.luxon.DateTime.fromISO( d );\n\n\t\tif (! dt.isValid) {\n\t\t\treturn null;\n\t\t}\n\n\t\tdt.setLocale(locale);\n\t}\n\telse if (! format) {\n\t\t// No format given, must be ISO\n\t\tdt = new Date(d);\n\t}\n\telse {\n\t\tif (! __mlWarning) {\n\t\t\talert('DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17');\n\t\t}\n\n\t\t__mlWarning = true;\n\t}\n\n\treturn dt;\n}\n\n// Wrapper for date, datetime and time which all operate the same way with the exception of\n// the output string for auto locale support\nfunction __mlHelper (localeString) {\n\treturn function ( from, to, locale, def ) {\n\t\t// Luxon and Moment support\n\t\t// Argument shifting\n\t\tif ( arguments.length === 0 ) {\n\t\t\tlocale = 'en';\n\t\t\tto = null; // means toLocaleString\n\t\t\tfrom = null; // means iso8601\n\t\t}\n\t\telse if ( arguments.length === 1 ) {\n\t\t\tlocale = 'en';\n\t\t\tto = from;\n\t\t\tfrom = null;\n\t\t}\n\t\telse if ( arguments.length === 2 ) {\n\t\t\tlocale = to;\n\t\t\tto = from;\n\t\t\tfrom = null;\n\t\t}\n\n\t\tvar typeName = 'datetime-' + to;\n\n\t\t// Add type detection and sorting specific to this date format - we need to be able to identify\n\t\t// date type columns as such, rather than as numbers in extensions. Hence the need for this.\n\t\tif (! DataTable.ext.type.order[typeName]) {\n\t\t\t// The renderer will give the value to type detect as the type!\n\t\t\tDataTable.ext.type.detect.unshift(function (d) {\n\t\t\t\treturn d === typeName ? typeName : false;\n\t\t\t});\n\n\t\t\t// The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a\n\t\t\t// `valueOf` which gives milliseconds epoch\n\t\t\tDataTable.ext.type.order[typeName + '-asc'] = function (a, b) {\n\t\t\t\tvar x = a.valueOf();\n\t\t\t\tvar y = b.valueOf();\n\n\t\t\t\treturn x === y\n\t\t\t\t\t? 0\n\t\t\t\t\t: x < y\n\t\t\t\t\t\t? -1\n\t\t\t\t\t\t: 1;\n\t\t\t}\n\n\t\t\tDataTable.ext.type.order[typeName + '-desc'] = function (a, b) {\n\t\t\t\tvar x = a.valueOf();\n\t\t\t\tvar y = b.valueOf();\n\n\t\t\t\treturn x === y\n\t\t\t\t\t? 0\n\t\t\t\t\t: x > y\n\t\t\t\t\t\t? -1\n\t\t\t\t\t\t: 1;\n\t\t\t}\n\t\t}\n\t\n\t\treturn function ( d, type ) {\n\t\t\t// Allow for a default value\n\t\t\tif (d === null || d === undefined) {\n\t\t\t\tif (def === '--now') {\n\t\t\t\t\t// We treat everything as UTC further down, so no changes are\n\t\t\t\t\t// made, as such need to get the local date / time as if it were\n\t\t\t\t\t// UTC\n\t\t\t\t\tvar local = new Date();\n\t\t\t\t\td = new Date( Date.UTC(\n\t\t\t\t\t\tlocal.getFullYear(), local.getMonth(), local.getDate(),\n\t\t\t\t\t\tlocal.getHours(), local.getMinutes(), local.getSeconds()\n\t\t\t\t\t) );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\td = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (type === 'type') {\n\t\t\t\t// Typing uses the type name for fast matching\n\t\t\t\treturn typeName;\n\t\t\t}\n\n\t\t\tif (d === '') {\n\t\t\t\treturn type !== 'sort'\n\t\t\t\t\t? ''\n\t\t\t\t\t: __mldObj('0000-01-01 00:00:00', null, locale);\n\t\t\t}\n\n\t\t\t// Shortcut. If `from` and `to` are the same, we are using the renderer to\n\t\t\t// format for ordering, not display - its already in the display format.\n\t\t\tif ( to !== null && from === to && type !== 'sort' && type !== 'type' && ! (d instanceof Date) ) {\n\t\t\t\treturn d;\n\t\t\t}\n\n\t\t\tvar dt = __mldObj(d, from, locale);\n\n\t\t\tif (dt === null) {\n\t\t\t\treturn d;\n\t\t\t}\n\n\t\t\tif (type === 'sort') {\n\t\t\t\treturn dt;\n\t\t\t}\n\t\t\t\n\t\t\tvar formatted = to === null\n\t\t\t\t? __mld(dt, 'toDate', 'toJSDate', '')[localeString]()\n\t\t\t\t: __mld(dt, 'format', 'toFormat', 'toISOString', to);\n\n\t\t\t// XSS protection\n\t\t\treturn type === 'display' ?\n\t\t\t\t__htmlEscapeEntities( formatted ) :\n\t\t\t\tformatted;\n\t\t};\n\t}\n}\n\n// Based on locale, determine standard number formatting\n// Fallback for legacy browsers is US English\nvar __thousands = ',';\nvar __decimal = '.';\n\nif (window.Intl !== undefined) {\n\ttry {\n\t\tvar num = new Intl.NumberFormat().formatToParts(100000.1);\n\t\n\t\tfor (var i=0 ; i<num.length ; i++) {\n\t\t\tif (num[i].type === 'group') {\n\t\t\t\t__thousands = num[i].value;\n\t\t\t}\n\t\t\telse if (num[i].type === 'decimal') {\n\t\t\t\t__decimal = num[i].value;\n\t\t\t}\n\t\t}\n\t}\n\tcatch (e) {\n\t\t// noop\n\t}\n}\n\n// Formatted date time detection - use by declaring the formats you are going to use\nDataTable.datetime = function ( format, locale ) {\n\tvar typeName = 'datetime-detect-' + format;\n\n\tif (! locale) {\n\t\tlocale = 'en';\n\t}\n\n\tif (! DataTable.ext.type.order[typeName]) {\n\t\tDataTable.ext.type.detect.unshift(function (d) {\n\t\t\tvar dt = __mldObj(d, format, locale);\n\t\t\treturn d === '' || dt ? typeName : false;\n\t\t});\n\n\t\tDataTable.ext.type.order[typeName + '-pre'] = function (d) {\n\t\t\treturn __mldObj(d, format, locale) || 0;\n\t\t}\n\t}\n}\n\n/**\n * Helpers for `columns.render`.\n *\n * The options defined here can be used with the `columns.render` initialisation\n * option to provide a display renderer. The following functions are defined:\n *\n * * `number` - Will format numeric data (defined by `columns.data`) for\n *   display, retaining the original unformatted data for sorting and filtering.\n *   It takes 5 parameters:\n *   * `string` - Thousands grouping separator\n *   * `string` - Decimal point indicator\n *   * `integer` - Number of decimal points to show\n *   * `string` (optional) - Prefix.\n *   * `string` (optional) - Postfix (/suffix).\n * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n *   parameters.\n *\n * @example\n *   // Column definition using the number renderer\n *   {\n *     data: \"salary\",\n *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n *   }\n *\n * @namespace\n */\nDataTable.render = {\n\tdate: __mlHelper('toLocaleDateString'),\n\tdatetime: __mlHelper('toLocaleString'),\n\ttime: __mlHelper('toLocaleTimeString'),\n\tnumber: function ( thousands, decimal, precision, prefix, postfix ) {\n\t\t// Auto locale detection\n\t\tif (thousands === null || thousands === undefined) {\n\t\t\tthousands = __thousands;\n\t\t}\n\n\t\tif (decimal === null || decimal === undefined) {\n\t\t\tdecimal = __decimal;\n\t\t}\n\n\t\treturn {\n\t\t\tdisplay: function ( d ) {\n\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {\n\t\t\t\t\treturn d;\n\t\t\t\t}\n\n\t\t\t\tif (d === '' || d === null) {\n\t\t\t\t\treturn d;\n\t\t\t\t}\n\n\t\t\t\tvar negative = d < 0 ? '-' : '';\n\t\t\t\tvar flo = parseFloat( d );\n\n\t\t\t\t// If NaN then there isn't much formatting that we can do - just\n\t\t\t\t// return immediately, escaping any HTML (this was supposed to\n\t\t\t\t// be a number after all)\n\t\t\t\tif ( isNaN( flo ) ) {\n\t\t\t\t\treturn __htmlEscapeEntities( d );\n\t\t\t\t}\n\n\t\t\t\tflo = flo.toFixed( precision );\n\t\t\t\td = Math.abs( flo );\n\n\t\t\t\tvar intPart = parseInt( d, 10 );\n\t\t\t\tvar floatPart = precision ?\n\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):\n\t\t\t\t\t'';\n\n\t\t\t\t// If zero, then can't have a negative prefix\n\t\t\t\tif (intPart === 0 && parseFloat(floatPart) === 0) {\n\t\t\t\t\tnegative = '';\n\t\t\t\t}\n\n\t\t\t\treturn negative + (prefix||'') +\n\t\t\t\t\tintPart.toString().replace(\n\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands\n\t\t\t\t\t) +\n\t\t\t\t\tfloatPart +\n\t\t\t\t\t(postfix||'');\n\t\t\t}\n\t\t};\n\t},\n\n\ttext: function () {\n\t\treturn {\n\t\t\tdisplay: __htmlEscapeEntities,\n\t\t\tfilter: __htmlEscapeEntities\n\t\t};\n\t}\n};\n\n\n/*\n * This is really a good bit rubbish this method of exposing the internal methods\n * publicly... - To be fixed in 2.0 using methods on the prototype\n */\n\n\n/**\n * Create a wrapper function for exporting an internal functions to an external API.\n *  @param {string} fn API function name\n *  @returns {function} wrapped function\n *  @memberof DataTable#internal\n */\nfunction _fnExternApiFunc (fn)\n{\n\treturn function() {\n\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\n\t\t\tArray.prototype.slice.call(arguments)\n\t\t);\n\t\treturn DataTable.ext.internal[fn].apply( this, args );\n\t};\n}\n\n\n/**\n * Reference to internal functions for use by plug-in developers. Note that\n * these methods are references to internal functions and are considered to be\n * private. If you use these methods, be aware that they are liable to change\n * between versions.\n *  @namespace\n */\n$.extend( DataTable.ext.internal, {\n\t_fnExternApiFunc: _fnExternApiFunc,\n\t_fnBuildAjax: _fnBuildAjax,\n\t_fnAjaxUpdate: _fnAjaxUpdate,\n\t_fnAjaxParameters: _fnAjaxParameters,\n\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n\t_fnAjaxDataSrc: _fnAjaxDataSrc,\n\t_fnAddColumn: _fnAddColumn,\n\t_fnColumnOptions: _fnColumnOptions,\n\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,\n\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,\n\t_fnVisbleColumns: _fnVisbleColumns,\n\t_fnGetColumns: _fnGetColumns,\n\t_fnColumnTypes: _fnColumnTypes,\n\t_fnApplyColumnDefs: _fnApplyColumnDefs,\n\t_fnHungarianMap: _fnHungarianMap,\n\t_fnCamelToHungarian: _fnCamelToHungarian,\n\t_fnLanguageCompat: _fnLanguageCompat,\n\t_fnBrowserDetect: _fnBrowserDetect,\n\t_fnAddData: _fnAddData,\n\t_fnAddTr: _fnAddTr,\n\t_fnNodeToDataIndex: _fnNodeToDataIndex,\n\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,\n\t_fnGetCellData: _fnGetCellData,\n\t_fnSetCellData: _fnSetCellData,\n\t_fnSplitObjNotation: _fnSplitObjNotation,\n\t_fnGetObjectDataFn: _fnGetObjectDataFn,\n\t_fnSetObjectDataFn: _fnSetObjectDataFn,\n\t_fnGetDataMaster: _fnGetDataMaster,\n\t_fnClearTable: _fnClearTable,\n\t_fnDeleteIndex: _fnDeleteIndex,\n\t_fnInvalidate: _fnInvalidate,\n\t_fnGetRowElements: _fnGetRowElements,\n\t_fnCreateTr: _fnCreateTr,\n\t_fnBuildHead: _fnBuildHead,\n\t_fnDrawHead: _fnDrawHead,\n\t_fnDraw: _fnDraw,\n\t_fnReDraw: _fnReDraw,\n\t_fnAddOptionsHtml: _fnAddOptionsHtml,\n\t_fnDetectHeader: _fnDetectHeader,\n\t_fnGetUniqueThs: _fnGetUniqueThs,\n\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n\t_fnFilterComplete: _fnFilterComplete,\n\t_fnFilterCustom: _fnFilterCustom,\n\t_fnFilterColumn: _fnFilterColumn,\n\t_fnFilter: _fnFilter,\n\t_fnFilterCreateSearch: _fnFilterCreateSearch,\n\t_fnEscapeRegex: _fnEscapeRegex,\n\t_fnFilterData: _fnFilterData,\n\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n\t_fnUpdateInfo: _fnUpdateInfo,\n\t_fnInfoMacros: _fnInfoMacros,\n\t_fnInitialise: _fnInitialise,\n\t_fnInitComplete: _fnInitComplete,\n\t_fnLengthChange: _fnLengthChange,\n\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,\n\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n\t_fnPageChange: _fnPageChange,\n\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n\t_fnProcessingDisplay: _fnProcessingDisplay,\n\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,\n\t_fnScrollDraw: _fnScrollDraw,\n\t_fnApplyToChildren: _fnApplyToChildren,\n\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,\n\t_fnThrottle: _fnThrottle,\n\t_fnConvertToWidth: _fnConvertToWidth,\n\t_fnGetWidestNode: _fnGetWidestNode,\n\t_fnGetMaxLenString: _fnGetMaxLenString,\n\t_fnStringToCss: _fnStringToCss,\n\t_fnSortFlatten: _fnSortFlatten,\n\t_fnSort: _fnSort,\n\t_fnSortAria: _fnSortAria,\n\t_fnSortListener: _fnSortListener,\n\t_fnSortAttachListener: _fnSortAttachListener,\n\t_fnSortingClasses: _fnSortingClasses,\n\t_fnSortData: _fnSortData,\n\t_fnSaveState: _fnSaveState,\n\t_fnLoadState: _fnLoadState,\n\t_fnImplementState: _fnImplementState,\n\t_fnSettingsFromNode: _fnSettingsFromNode,\n\t_fnLog: _fnLog,\n\t_fnMap: _fnMap,\n\t_fnBindAction: _fnBindAction,\n\t_fnCallbackReg: _fnCallbackReg,\n\t_fnCallbackFire: _fnCallbackFire,\n\t_fnLengthOverflow: _fnLengthOverflow,\n\t_fnRenderer: _fnRenderer,\n\t_fnDataSource: _fnDataSource,\n\t_fnRowAttributes: _fnRowAttributes,\n\t_fnExtend: _fnExtend,\n\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n\t                                // in 1.10, so this dead-end function is\n\t                                // added to prevent errors\n} );\n\n\n// jQuery access\n$.fn.dataTable = DataTable;\n\n// Provide access to the host jQuery object (circular reference)\nDataTable.$ = $;\n\n// Legacy aliases\n$.fn.dataTableSettings = DataTable.settings;\n$.fn.dataTableExt = DataTable.ext;\n\n// With a capital `D` we return a DataTables API instance rather than a\n// jQuery object\n$.fn.DataTable = function ( opts ) {\n\treturn $(this).dataTable( opts ).api();\n};\n\n// All properties that are available to $.fn.dataTable should also be\n// available on $.fn.DataTable\n$.each( DataTable, function ( prop, val ) {\n\t$.fn.DataTable[ prop ] = val;\n} );\n\nexport default DataTable;\n"]},"metadata":{},"sourceType":"module"}